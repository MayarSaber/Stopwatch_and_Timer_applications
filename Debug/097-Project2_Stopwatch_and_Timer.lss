
097-Project2_Stopwatch_and_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00004b08  00004b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  008000ee  008000ee  00004c2a  2**0
                  ALLOC
  3 .stab         00004a4c  00000000  00000000  00004c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c0b  00000000  00000000  00009678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b283  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fa7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_1>
       8:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_2>
       c:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_3>
      10:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__vector_4>
      14:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__vector_5>
      18:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__vector_6>
      1c:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_7>
      20:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__vector_8>
      24:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__vector_9>
      28:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_10>
      2c:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <main>
      8a:	0c 94 82 25 	jmp	0x4b04	; 0x4b04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ec       	ldi	r26, 0xC5	; 197
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ec       	ldi	r24, 0xC5	; 197
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 25 	jmp	0x4aa6	; 0x4aa6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ec       	ldi	r22, 0xC5	; 197
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include	"DIO_config.h"


void DIO_voidInit(void)
/**Function to initiate the directions and the values of all the pins**/
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	//Initiating the directions of pins
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION , DIO_u8_PA6_INITIAL_DIRECTION , DIO_u8_PA5_INITIAL_DIRECTION , DIO_u8_PA4_INITIAL_DIRECTION , 
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
						   DIO_u8_PA3_INITIAL_DIRECTION , DIO_u8_PA2_INITIAL_DIRECTION , DIO_u8_PA1_INITIAL_DIRECTION , DIO_u8_PA0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION , DIO_u8_PB6_INITIAL_DIRECTION , DIO_u8_PB5_INITIAL_DIRECTION , DIO_u8_PB4_INITIAL_DIRECTION , 
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 83       	st	Z, r24
						   DIO_u8_PB3_INITIAL_DIRECTION , DIO_u8_PB2_INITIAL_DIRECTION , DIO_u8_PB1_INITIAL_DIRECTION , DIO_u8_PB0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION , DIO_u8_PC6_INITIAL_DIRECTION , DIO_u8_PC5_INITIAL_DIRECTION , DIO_u8_PC4_INITIAL_DIRECTION , 
     cb4:	e4 e3       	ldi	r30, 0x34	; 52
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	80 83       	st	Z, r24
						   DIO_u8_PC3_INITIAL_DIRECTION , DIO_u8_PC2_INITIAL_DIRECTION , DIO_u8_PC1_INITIAL_DIRECTION , DIO_u8_PC0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION , DIO_u8_PD6_INITIAL_DIRECTION , DIO_u8_PD5_INITIAL_DIRECTION , DIO_u8_PD4_INITIAL_DIRECTION , 
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	8b ef       	ldi	r24, 0xFB	; 251
     cc2:	80 83       	st	Z, r24
						                              
										

						   
	//Initiating the values of pins
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE , DIO_u8_PA6_INITIAL_VALUE , DIO_u8_PA5_INITIAL_VALUE , DIO_u8_PA4_INITIAL_VALUE , 
     cc4:	eb e3       	ldi	r30, 0x3B	; 59
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
							DIO_u8_PA3_INITIAL_VALUE , DIO_u8_PA2_INITIAL_VALUE , DIO_u8_PA1_INITIAL_VALUE , DIO_u8_PA0_INITIAL_VALUE);
						    
						   
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE , DIO_u8_PB6_INITIAL_VALUE , DIO_u8_PB5_INITIAL_VALUE , DIO_u8_PB4_INITIAL_VALUE , 
     cca:	e8 e3       	ldi	r30, 0x38	; 56
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	84 ef       	ldi	r24, 0xF4	; 244
     cd0:	80 83       	st	Z, r24
						    DIO_u8_PB3_INITIAL_VALUE , DIO_u8_PB2_INITIAL_VALUE , DIO_u8_PB1_INITIAL_VALUE , DIO_u8_PB0_INITIAL_VALUE);

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE , DIO_u8_PC6_INITIAL_VALUE , DIO_u8_PC5_INITIAL_VALUE , DIO_u8_PC4_INITIAL_VALUE , 
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
						    DIO_u8_PC3_INITIAL_VALUE , DIO_u8_PC2_INITIAL_VALUE , DIO_u8_PC1_INITIAL_VALUE , DIO_u8_PC0_INITIAL_VALUE);
						   
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE , DIO_u8_PD6_INITIAL_VALUE , DIO_u8_PD5_INITIAL_VALUE , DIO_u8_PD4_INITIAL_VALUE , 
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8f e1       	ldi	r24, 0x1F	; 31
     cde:	80 83       	st	Z, r24
						    DIO_u8_PD3_INITIAL_VALUE , DIO_u8_PD2_INITIAL_VALUE , DIO_u8_PD1_INITIAL_VALUE , DIO_u8_PD0_INITIAL_VALUE);
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:

/*************************************************************************************/

u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
/**Function to specify the direction of a pin whether it's input or output**/
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <DIO_u8SetPinDirection+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_u8SetPinDirection+0x8>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8a 83       	std	Y+2, r24	; 0x02
     cf4:	6b 83       	std	Y+3, r22	; 0x03
     cf6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		//Checks the validity of the user inputs
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x1e>
     d02:	d6 c0       	rjmp	.+428    	; 0xeb0 <DIO_u8SetPinDirection+0x1ca>
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	d2 c0       	rjmp	.+420    	; 0xeb0 <DIO_u8SetPinDirection+0x1ca>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	21 f0       	breq	.+8      	; 0xd1a <DIO_u8SetPinDirection+0x34>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	88 23       	and	r24, r24
     d16:	09 f0       	breq	.+2      	; 0xd1a <DIO_u8SetPinDirection+0x34>
     d18:	cb c0       	rjmp	.+406    	; 0xeb0 <DIO_u8SetPinDirection+0x1ca>
	{
		if(Copy_u8PortId == DIO_u8_PORTA)				///PORTA is chosen
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	88 23       	and	r24, r24
     d1e:	81 f5       	brne	.+96     	; 0xd80 <DIO_u8SetPinDirection+0x9a>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	a1 f4       	brne	.+40     	; 0xd4e <DIO_u8SetPinDirection+0x68>
				{
					SET_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_u8SetPinDirection+0x5e>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_u8SetPinDirection+0x5a>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	b2 c0       	rjmp	.+356    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	88 23       	and	r24, r24
     d52:	09 f0       	breq	.+2      	; 0xd56 <DIO_u8SetPinDirection+0x70>
     d54:	ae c0       	rjmp	.+348    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);
     d56:	aa e3       	ldi	r26, 0x3A	; 58
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e3       	ldi	r30, 0x3A	; 58
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_u8SetPinDirection+0x8e>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_u8SetPinDirection+0x8a>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	99 c0       	rjmp	.+306    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTB)			///PORTB is chosen
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	81 f5       	brne	.+96     	; 0xde6 <DIO_u8SetPinDirection+0x100>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	a1 f4       	brne	.+40     	; 0xdb4 <DIO_u8SetPinDirection+0xce>
				{
					SET_BIT(DIO_u8_DDRB_REG , Copy_u8PinId);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_u8SetPinDirection+0xc4>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_u8SetPinDirection+0xc0>
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	7f c0       	rjmp	.+254    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	88 23       	and	r24, r24
     db8:	09 f0       	breq	.+2      	; 0xdbc <DIO_u8SetPinDirection+0xd6>
     dba:	7b c0       	rjmp	.+246    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRB_REG , Copy_u8PinId);
     dbc:	a7 e3       	ldi	r26, 0x37	; 55
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_u8SetPinDirection+0xf4>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	66 c0       	rjmp	.+204    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTC)			///PORTC is chosen
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	81 f5       	brne	.+96     	; 0xe4c <DIO_u8SetPinDirection+0x166>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <DIO_u8SetPinDirection+0x134>
				{
					SET_BIT(DIO_u8_DDRC_REG , Copy_u8PinId);
     df2:	a4 e3       	ldi	r26, 0x34	; 52
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e3       	ldi	r30, 0x34	; 52
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPinDirection+0x12a>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8SetPinDirection+0x126>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	4c c0       	rjmp	.+152    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	88 23       	and	r24, r24
     e1e:	09 f0       	breq	.+2      	; 0xe22 <DIO_u8SetPinDirection+0x13c>
     e20:	48 c0       	rjmp	.+144    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRC_REG , Copy_u8PinId);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_u8SetPinDirection+0x15a>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_u8SetPinDirection+0x156>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	33 c0       	rjmp	.+102    	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTD)			///PORTD is chosen
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	81 f5       	brne	.+96     	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	a1 f4       	brne	.+40     	; 0xe80 <DIO_u8SetPinDirection+0x19a>
				{
					SET_BIT(DIO_u8_DDRD_REG , Copy_u8PinId);
     e58:	a1 e3       	ldi	r26, 0x31	; 49
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e1 e3       	ldi	r30, 0x31	; 49
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_u8SetPinDirection+0x190>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_u8SetPinDirection+0x18c>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	19 c0       	rjmp	.+50     	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	88 23       	and	r24, r24
     e84:	b1 f4       	brne	.+44     	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRD_REG , Copy_u8PinId);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_u8SetPinDirection+0x1be>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_u8SetPinDirection+0x1ba>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
	}
	
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;						//The validity of the user inputs isn't guaranteed
     eb0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
		return Local_u8ErrorState;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <DIO_u8SetPinValue>:
	
/*************************************************************************************/	
		
u8 DIO_u8SetPinValue      (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue)
/**Function to specify the value of a pin whether it's high or low**/
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	2a 97       	sbiw	r28, 0x0a	; 10
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	6b 83       	std	Y+3, r22	; 0x03
     eda:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PinId <= DIO_u8_PIN7)							//Checks the validity of the user inputs of the Pin value
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	88 30       	cpi	r24, 0x08	; 8
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <DIO_u8SetPinValue+0x26>
     ee6:	f9 c0       	rjmp	.+498    	; 0x10da <DIO_u8SetPinValue+0x218>
	{
		switch(Copy_u8PinValue)		//Checks the user input for Pin value
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3a 87       	std	Y+10, r19	; 0x0a
     ef0:	29 87       	std	Y+9, r18	; 0x09
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_u8SetPinValue+0x3a>
     efa:	77 c0       	rjmp	.+238    	; 0xfea <DIO_u8SetPinValue+0x128>
     efc:	29 85       	ldd	r18, Y+9	; 0x09
     efe:	3a 85       	ldd	r19, Y+10	; 0x0a
     f00:	21 30       	cpi	r18, 0x01	; 1
     f02:	31 05       	cpc	r19, r1
     f04:	09 f0       	breq	.+2      	; 0xf08 <DIO_u8SetPinValue+0x46>
     f06:	e7 c0       	rjmp	.+462    	; 0x10d6 <DIO_u8SetPinValue+0x214>
		{
			case DIO_u8_HIGH:	///High is chosen
			switch(Copy_u8PortId)	//Checks the user input for Port value
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	38 87       	std	Y+8, r19	; 0x08
     f10:	2f 83       	std	Y+7, r18	; 0x07
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	49 f1       	breq	.+82     	; 0xf6e <DIO_u8SetPinValue+0xac>
     f1c:	2f 81       	ldd	r18, Y+7	; 0x07
     f1e:	38 85       	ldd	r19, Y+8	; 0x08
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	2c f4       	brge	.+10     	; 0xf30 <DIO_u8SetPinValue+0x6e>
     f26:	8f 81       	ldd	r24, Y+7	; 0x07
     f28:	98 85       	ldd	r25, Y+8	; 0x08
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	61 f0       	breq	.+24     	; 0xf46 <DIO_u8SetPinValue+0x84>
     f2e:	5b c0       	rjmp	.+182    	; 0xfe6 <DIO_u8SetPinValue+0x124>
     f30:	2f 81       	ldd	r18, Y+7	; 0x07
     f32:	38 85       	ldd	r19, Y+8	; 0x08
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	71 f1       	breq	.+92     	; 0xf96 <DIO_u8SetPinValue+0xd4>
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	98 85       	ldd	r25, Y+8	; 0x08
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	e9 f1       	breq	.+122    	; 0xfbe <DIO_u8SetPinValue+0xfc>
     f44:	50 c0       	rjmp	.+160    	; 0xfe6 <DIO_u8SetPinValue+0x124>
			{
				case DIO_u8_PORTA: SET_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;		///PORTA is chosen
     f46:	ab e3       	ldi	r26, 0x3B	; 59
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_u8SetPinValue+0xa2>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_u8SetPinValue+0x9e>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	b7 c0       	rjmp	.+366    	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTB: SET_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;     ///PORTB is chosen
     f6e:	a8 e3       	ldi	r26, 0x38	; 56
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e3       	ldi	r30, 0x38	; 56
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_u8SetPinValue+0xca>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_u8SetPinValue+0xc6>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	a3 c0       	rjmp	.+326    	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTC: SET_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;     ///PORTC is chosen
     f96:	a5 e3       	ldi	r26, 0x35	; 53
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_u8SetPinValue+0xf2>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_u8SetPinValue+0xee>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	8f c0       	rjmp	.+286    	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTD: SET_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;     ///PORTD is chosen
     fbe:	a2 e3       	ldi	r26, 0x32	; 50
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e2 e3       	ldi	r30, 0x32	; 50
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_u8SetPinValue+0x11a>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_u8SetPinValue+0x116>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	7b c0       	rjmp	.+246    	; 0x10dc <DIO_u8SetPinValue+0x21a>
				default: Local_u8ErrorState = STD_TYPES_NOK; break;						//Wrong input for the Port Id
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	79 c0       	rjmp	.+242    	; 0x10dc <DIO_u8SetPinValue+0x21a>
			}
			break;
			
			case DIO_u8_LOW:	///Low is chosen
			switch(Copy_u8PortId)	//Checks the user input for port value
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3e 83       	std	Y+6, r19	; 0x06
     ff2:	2d 83       	std	Y+5, r18	; 0x05
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	59 f1       	breq	.+86     	; 0x1054 <DIO_u8SetPinValue+0x192>
     ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    1000:	3e 81       	ldd	r19, Y+6	; 0x06
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <DIO_u8SetPinValue+0x150>
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f0       	breq	.+26     	; 0x102a <DIO_u8SetPinValue+0x168>
    1010:	60 c0       	rjmp	.+192    	; 0x10d2 <DIO_u8SetPinValue+0x210>
    1012:	2d 81       	ldd	r18, Y+5	; 0x05
    1014:	3e 81       	ldd	r19, Y+6	; 0x06
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	89 f1       	breq	.+98     	; 0x107e <DIO_u8SetPinValue+0x1bc>
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <DIO_u8SetPinValue+0x166>
    1026:	40 c0       	rjmp	.+128    	; 0x10a8 <DIO_u8SetPinValue+0x1e6>
    1028:	54 c0       	rjmp	.+168    	; 0x10d2 <DIO_u8SetPinValue+0x210>
			{
				case DIO_u8_PORTA: CLR_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;		///PORTA is chosen
    102a:	ab e3       	ldi	r26, 0x3B	; 59
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e3       	ldi	r30, 0x3B	; 59
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_u8SetPinValue+0x186>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_u8SetPinValue+0x182>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	44 c0       	rjmp	.+136    	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTB: CLR_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;     ///PORTB is chosen
    1054:	a8 e3       	ldi	r26, 0x38	; 56
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e8 e3       	ldi	r30, 0x38	; 56
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8SetPinValue+0x1b0>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8SetPinValue+0x1ac>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	2f c0       	rjmp	.+94     	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTC: CLR_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;     ///PORTC is chosen
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8SetPinValue+0x1da>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_u8SetPinValue+0x1d6>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	1a c0       	rjmp	.+52     	; 0x10dc <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTD: CLR_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;     ///PORTD is chosen
    10a8:	a2 e3       	ldi	r26, 0x32	; 50
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e2 e3       	ldi	r30, 0x32	; 50
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8SetPinValue+0x204>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8SetPinValue+0x200>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <DIO_u8SetPinValue+0x21a>
				default: Local_u8ErrorState = STD_TYPES_NOK; break;						//Wrong input for the Port Id
    10d2:	19 82       	std	Y+1, r1	; 0x01
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <DIO_u8SetPinValue+0x21a>
			}
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;											//Wrong input for the Pin value 
    10d6:	19 82       	std	Y+1, r1	; 0x01
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <DIO_u8SetPinValue+0x21a>
		}
	}
	
	else									//Wrong input for the Pin Id
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    10da:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
}		
    10de:	2a 96       	adiw	r28, 0x0a	; 10
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_u8GetPinValue>:

/*************************************************************************************/

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 * Copy_pu8ReturnPinValue)
/**Function to return the value of a pin whether it's high or low**/
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	28 97       	sbiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	6c 83       	std	Y+4, r22	; 0x04
    1108:	5e 83       	std	Y+6, r21	; 0x06
    110a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnPinValue != NULL))		//Checks the validity of the user inputs of the pin value and that the pointer had an address
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	88 30       	cpi	r24, 0x08	; 8
    1114:	08 f0       	brcs	.+2      	; 0x1118 <DIO_u8GetPinValue+0x28>
    1116:	9d c0       	rjmp	.+314    	; 0x1252 <DIO_u8GetPinValue+0x162>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_u8GetPinValue+0x32>
    1120:	98 c0       	rjmp	.+304    	; 0x1252 <DIO_u8GetPinValue+0x162>
	{
		switch(Copy_u8PortId)		//Checks the user input for Port Id
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	38 87       	std	Y+8, r19	; 0x08
    112a:	2f 83       	std	Y+7, r18	; 0x07
    112c:	4f 81       	ldd	r20, Y+7	; 0x07
    112e:	58 85       	ldd	r21, Y+8	; 0x08
    1130:	41 30       	cpi	r20, 0x01	; 1
    1132:	51 05       	cpc	r21, r1
    1134:	a9 f1       	breq	.+106    	; 0x11a0 <DIO_u8GetPinValue+0xb0>
    1136:	8f 81       	ldd	r24, Y+7	; 0x07
    1138:	98 85       	ldd	r25, Y+8	; 0x08
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	91 05       	cpc	r25, r1
    113e:	34 f4       	brge	.+12     	; 0x114c <DIO_u8GetPinValue+0x5c>
    1140:	2f 81       	ldd	r18, Y+7	; 0x07
    1142:	38 85       	ldd	r19, Y+8	; 0x08
    1144:	21 15       	cp	r18, r1
    1146:	31 05       	cpc	r19, r1
    1148:	71 f0       	breq	.+28     	; 0x1166 <DIO_u8GetPinValue+0x76>
    114a:	81 c0       	rjmp	.+258    	; 0x124e <DIO_u8GetPinValue+0x15e>
    114c:	4f 81       	ldd	r20, Y+7	; 0x07
    114e:	58 85       	ldd	r21, Y+8	; 0x08
    1150:	42 30       	cpi	r20, 0x02	; 2
    1152:	51 05       	cpc	r21, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <DIO_u8GetPinValue+0x68>
    1156:	41 c0       	rjmp	.+130    	; 0x11da <DIO_u8GetPinValue+0xea>
    1158:	8f 81       	ldd	r24, Y+7	; 0x07
    115a:	98 85       	ldd	r25, Y+8	; 0x08
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_u8GetPinValue+0x74>
    1162:	58 c0       	rjmp	.+176    	; 0x1214 <DIO_u8GetPinValue+0x124>
    1164:	74 c0       	rjmp	.+232    	; 0x124e <DIO_u8GetPinValue+0x15e>
		{
			case DIO_u8_PORTA:		///PORTA is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);			//Because the High & low values may differ (Don't have always to be 0 & 1)
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8GetPinValue+0x8e>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8GetPinValue+0x8a>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	29 f4       	brne	.+10     	; 0x1198 <DIO_u8GetPinValue+0xa8>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    118e:	ed 81       	ldd	r30, Y+5	; 0x05
    1190:	fe 81       	ldd	r31, Y+6	; 0x06
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 83       	st	Z, r24
    1196:	5e c0       	rjmp	.+188    	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    1198:	ed 81       	ldd	r30, Y+5	; 0x05
    119a:	fe 81       	ldd	r31, Y+6	; 0x06
    119c:	10 82       	st	Z, r1
    119e:	5a c0       	rjmp	.+180    	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTB:		///PORTB is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    11a0:	e6 e3       	ldi	r30, 0x36	; 54
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_u8GetPinValue+0xc8>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_u8GetPinValue+0xc4>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	29 f4       	brne	.+10     	; 0x11d2 <DIO_u8GetPinValue+0xe2>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    11c8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ca:	fe 81       	ldd	r31, Y+6	; 0x06
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
    11d0:	41 c0       	rjmp	.+130    	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    11d2:	ed 81       	ldd	r30, Y+5	; 0x05
    11d4:	fe 81       	ldd	r31, Y+6	; 0x06
    11d6:	10 82       	st	Z, r1
    11d8:	3d c0       	rjmp	.+122    	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTC:		///PORTC is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    11da:	e3 e3       	ldi	r30, 0x33	; 51
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8GetPinValue+0x102>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8GetPinValue+0xfe>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	29 f4       	brne	.+10     	; 0x120c <DIO_u8GetPinValue+0x11c>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    1202:	ed 81       	ldd	r30, Y+5	; 0x05
    1204:	fe 81       	ldd	r31, Y+6	; 0x06
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 83       	st	Z, r24
    120a:	24 c0       	rjmp	.+72     	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    120c:	ed 81       	ldd	r30, Y+5	; 0x05
    120e:	fe 81       	ldd	r31, Y+6	; 0x06
    1210:	10 82       	st	Z, r1
    1212:	20 c0       	rjmp	.+64     	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTD:		///PORTD is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8GetPinValue+0x13c>
    1228:	55 95       	asr	r21
    122a:	47 95       	ror	r20
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8GetPinValue+0x138>
    1230:	ca 01       	movw	r24, r20
    1232:	81 70       	andi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	29 f4       	brne	.+10     	; 0x1246 <DIO_u8GetPinValue+0x156>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    123c:	ed 81       	ldd	r30, Y+5	; 0x05
    123e:	fe 81       	ldd	r31, Y+6	; 0x06
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	80 83       	st	Z, r24
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    1246:	ed 81       	ldd	r30, Y+5	; 0x05
    1248:	fe 81       	ldd	r31, Y+6	; 0x06
    124a:	10 82       	st	Z, r1
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;			//Wrong input for the Port Id
    124e:	1a 82       	std	Y+2, r1	; 0x02
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <DIO_u8GetPinValue+0x164>
		}
	}
	
	else									//Wrong input for the Pin Id 
	{
		Local_u8ErrorState = STD_TYPES_NOK;		
    1252:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1256:	28 96       	adiw	r28, 0x08	; 8
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <DIO_u8SetPortDirection>:

/*************************************************************************************/

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId , u8 Copy_u8PortDirection)
///Function to specify the direction of a whole port whether it's input or output
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	29 97       	sbiw	r28, 0x09	; 9
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
	
	
	switch(Copy_u8PortDirection)		//Checks the user input for Port Direction
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	39 87       	std	Y+9, r19	; 0x09
    128c:	28 87       	std	Y+8, r18	; 0x08
    128e:	88 85       	ldd	r24, Y+8	; 0x08
    1290:	99 85       	ldd	r25, Y+9	; 0x09
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	d9 f1       	breq	.+118    	; 0x130c <DIO_u8SetPortDirection+0xa4>
    1296:	28 85       	ldd	r18, Y+8	; 0x08
    1298:	39 85       	ldd	r19, Y+9	; 0x09
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <DIO_u8SetPortDirection+0x3a>
    12a0:	66 c0       	rjmp	.+204    	; 0x136e <DIO_u8SetPortDirection+0x106>
	{
		case DIO_u8_OUTPUT:
		switch(Copy_u8PortId)			//Checks the user input for Port Id
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3f 83       	std	Y+7, r19	; 0x07
    12aa:	2e 83       	std	Y+6, r18	; 0x06
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	d1 f0       	breq	.+52     	; 0x12ea <DIO_u8SetPortDirection+0x82>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <DIO_u8SetPortDirection+0x62>
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <DIO_u8SetPortDirection+0x78>
    12c8:	1f c0       	rjmp	.+62     	; 0x1308 <DIO_u8SetPortDirection+0xa0>
    12ca:	2e 81       	ldd	r18, Y+6	; 0x06
    12cc:	3f 81       	ldd	r19, Y+7	; 0x07
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	81 f0       	breq	.+32     	; 0x12f4 <DIO_u8SetPortDirection+0x8c>
    12d4:	8e 81       	ldd	r24, Y+6	; 0x06
    12d6:	9f 81       	ldd	r25, Y+7	; 0x07
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	81 f0       	breq	.+32     	; 0x12fe <DIO_u8SetPortDirection+0x96>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <DIO_u8SetPortDirection+0xa0>
		{
			case DIO_u8_PORTA: DIO_u8_DDRA_REG = 0xFF; break;	///PORTA is chosen
    12e0:	ea e3       	ldi	r30, 0x3A	; 58
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	43 c0       	rjmp	.+134    	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTB: DIO_u8_DDRB_REG = 0xFF; break;	///PORTB is chosen
    12ea:	e7 e3       	ldi	r30, 0x37	; 55
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	80 83       	st	Z, r24
    12f2:	3e c0       	rjmp	.+124    	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTC: DIO_u8_DDRC_REG = 0xFF; break;	///PORTC is chosen
    12f4:	e4 e3       	ldi	r30, 0x34	; 52
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	80 83       	st	Z, r24
    12fc:	39 c0       	rjmp	.+114    	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTD: DIO_u8_DDRD_REG = 0xFF; break;	///PORTD is chosen
    12fe:	e1 e3       	ldi	r30, 0x31	; 49
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	80 83       	st	Z, r24
    1306:	34 c0       	rjmp	.+104    	; 0x1370 <DIO_u8SetPortDirection+0x108>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;				//Wrong input for the Port Id
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	32 c0       	rjmp	.+100    	; 0x1370 <DIO_u8SetPortDirection+0x108>
		break;
		
		
		
		case DIO_u8_INPUT:
		switch(Copy_u8PortId)			//Checks the user input for Port Id
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3d 83       	std	Y+5, r19	; 0x05
    1314:	2c 83       	std	Y+4, r18	; 0x04
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	c9 f0       	breq	.+50     	; 0x1352 <DIO_u8SetPortDirection+0xea>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_u8SetPortDirection+0xcc>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_u8SetPortDirection+0xe2>
    1332:	1b c0       	rjmp	.+54     	; 0x136a <DIO_u8SetPortDirection+0x102>
    1334:	2c 81       	ldd	r18, Y+4	; 0x04
    1336:	3d 81       	ldd	r19, Y+5	; 0x05
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	71 f0       	breq	.+28     	; 0x135a <DIO_u8SetPortDirection+0xf2>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	69 f0       	breq	.+26     	; 0x1362 <DIO_u8SetPortDirection+0xfa>
    1348:	10 c0       	rjmp	.+32     	; 0x136a <DIO_u8SetPortDirection+0x102>
		{
			case DIO_u8_PORTA: DIO_u8_DDRA_REG = 0x00; break;	///PORTA is chosed
    134a:	ea e3       	ldi	r30, 0x3A	; 58
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTB: DIO_u8_DDRB_REG = 0x00; break;   ///PORTB is chosed
    1352:	e7 e3       	ldi	r30, 0x37	; 55
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	10 82       	st	Z, r1
    1358:	0b c0       	rjmp	.+22     	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTC: DIO_u8_DDRC_REG = 0x00; break;   ///PORTC is chosed
    135a:	e4 e3       	ldi	r30, 0x34	; 52
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	10 82       	st	Z, r1
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTD: DIO_u8_DDRD_REG = 0x00; break;   ///PORTD is chosed
    1362:	e1 e3       	ldi	r30, 0x31	; 49
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	10 82       	st	Z, r1
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <DIO_u8SetPortDirection+0x108>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;				//Wrong input for the Port Id
    136a:	19 82       	std	Y+1, r1	; 0x01
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <DIO_u8SetPortDirection+0x108>
		break;
		
		
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;			//Wrong input for the Port Direction
    136e:	19 82       	std	Y+1, r1	; 0x01
		break;
		
	}
	
	return Local_u8ErrorState;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
}					
    1372:	29 96       	adiw	r28, 0x09	; 9
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <DIO_u8SetPortValue>:

/*************************************************************************************/

u8 DIO_u8SetPortValue	  (u8 Copy_u8PortId , u8 Copy_u8PortValue)
///Function to specify the value of a whole port whether it's high or low
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <DIO_u8SetPortValue+0x6>
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_u8SetPortValue+0x8>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	89 83       	std	Y+1, r24	; 0x01
	
	
	switch(Copy_u8PortId)						//Because the value doesn't have to be only High or Low for the whole port
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3d 83       	std	Y+5, r19	; 0x05
    13a2:	2c 83       	std	Y+4, r18	; 0x04
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	d1 f0       	breq	.+52     	; 0x13e2 <DIO_u8SetPortValue+0x5e>
    13ae:	2c 81       	ldd	r18, Y+4	; 0x04
    13b0:	3d 81       	ldd	r19, Y+5	; 0x05
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <DIO_u8SetPortValue+0x3e>
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <DIO_u8SetPortValue+0x54>
    13c0:	1f c0       	rjmp	.+62     	; 0x1400 <DIO_u8SetPortValue+0x7c>
    13c2:	2c 81       	ldd	r18, Y+4	; 0x04
    13c4:	3d 81       	ldd	r19, Y+5	; 0x05
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	81 f0       	breq	.+32     	; 0x13ec <DIO_u8SetPortValue+0x68>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <DIO_u8SetPortValue+0x72>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:		///PORTA is chosen
		DIO_u8_PORTA_REG = Copy_u8PortValue;
    13d8:	eb e3       	ldi	r30, 0x3B	; 59
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	80 83       	st	Z, r24
    13e0:	10 c0       	rjmp	.+32     	; 0x1402 <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTB:		///PORTB is chosen
		DIO_u8_PORTB_REG = Copy_u8PortValue;
    13e2:	e8 e3       	ldi	r30, 0x38	; 56
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	80 83       	st	Z, r24
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTC:		///PORTC is chosen
		DIO_u8_PORTC_REG = Copy_u8PortValue;
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	80 83       	st	Z, r24
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTD:		///PORTD is chosen
		DIO_u8_PORTD_REG = Copy_u8PortValue;
    13f6:	e2 e3       	ldi	r30, 0x32	; 50
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	80 83       	st	Z, r24
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <DIO_u8SetPortValue+0x7e>
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK ;				//Wrong input for the Port Id 
    1400:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_u8ErrorState;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
	
}						
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <DIO_u8GetPortValue>:

/*************************************************************************************/

u8 DIO_u8GetPortValue	  (u8 Copy_u8PortId , u8 * Copy_pu8ReturnPortValue)
/**Function to return the value of a whole port whether it's high or low**/
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <DIO_u8GetPortValue+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <DIO_u8GetPortValue+0x8>
    141c:	00 d0       	rcall	.+0      	; 0x141e <DIO_u8GetPortValue+0xa>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	7c 83       	std	Y+4, r23	; 0x04
    1426:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8ReturnPortValue != NULL)		//Checks that the pointer has an address
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	e9 f1       	breq	.+122    	; 0x14ae <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)	//Checks the user input for Port Id
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3e 83       	std	Y+6, r19	; 0x06
    143c:	2d 83       	std	Y+5, r18	; 0x05
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	e1 f0       	breq	.+56     	; 0x1480 <DIO_u8GetPortValue+0x6c>
    1448:	2d 81       	ldd	r18, Y+5	; 0x05
    144a:	3e 81       	ldd	r19, Y+6	; 0x06
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <DIO_u8GetPortValue+0x48>
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 f0       	breq	.+24     	; 0x1472 <DIO_u8GetPortValue+0x5e>
    145a:	27 c0       	rjmp	.+78     	; 0x14aa <DIO_u8GetPortValue+0x96>
    145c:	2d 81       	ldd	r18, Y+5	; 0x05
    145e:	3e 81       	ldd	r19, Y+6	; 0x06
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	a1 f0       	breq	.+40     	; 0x148e <DIO_u8GetPortValue+0x7a>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	b1 f0       	breq	.+44     	; 0x149c <DIO_u8GetPortValue+0x88>
    1470:	1c c0       	rjmp	.+56     	; 0x14aa <DIO_u8GetPortValue+0x96>
		{

			case DIO_u8_PORTA:*Copy_pu8ReturnPortValue = DIO_u8_PINA_REG; break;		//Not true & false, its an 8 bit number
    1472:	e9 e3       	ldi	r30, 0x39	; 57
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	eb 81       	ldd	r30, Y+3	; 0x03
    147a:	fc 81       	ldd	r31, Y+4	; 0x04
    147c:	80 83       	st	Z, r24
    147e:	18 c0       	rjmp	.+48     	; 0x14b0 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB:*Copy_pu8ReturnPortValue = DIO_u8_PINB_REG; break;
    1480:	e6 e3       	ldi	r30, 0x36	; 54
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	eb 81       	ldd	r30, Y+3	; 0x03
    1488:	fc 81       	ldd	r31, Y+4	; 0x04
    148a:	80 83       	st	Z, r24
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC:*Copy_pu8ReturnPortValue = DIO_u8_PINC_REG; break;
    148e:	e3 e3       	ldi	r30, 0x33	; 51
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	80 83       	st	Z, r24
    149a:	0a c0       	rjmp	.+20     	; 0x14b0 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD:*Copy_pu8ReturnPortValue = DIO_u8_PIND_REG; break;
    149c:	e0 e3       	ldi	r30, 0x30	; 48
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	eb 81       	ldd	r30, Y+3	; 0x03
    14a4:	fc 81       	ldd	r31, Y+4	; 0x04
    14a6:	80 83       	st	Z, r24
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <DIO_u8GetPortValue+0x9c>
			
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK; 		//Wrong input for the Port Id
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <DIO_u8GetPortValue+0x9c>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
}		
    14b2:	26 96       	adiw	r28, 0x06	; 6
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_u8TogglePinValue>:

/**************************************************************************************/

u8 DIO_u8TogglePinValue(u8 Copy_u8PortId , u8 Copy_u8PinId)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8TogglePinValue+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_u8TogglePinValue+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;				    	//u8 Variable - To return the state of the function at the end of it
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId <= DIO_u8_PIN7))		//Checks the validity of the user inputs of the pin value and that the pointer had an address
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <DIO_u8TogglePinValue+0x1e>
    14e0:	72 c0       	rjmp	.+228    	; 0x15c6 <DIO_u8TogglePinValue+0x102>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_u8TogglePinValue+0x26>
    14e8:	6e c0       	rjmp	.+220    	; 0x15c6 <DIO_u8TogglePinValue+0x102>
	{
		switch(Copy_u8PortId)
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	49 f1       	breq	.+82     	; 0x1550 <DIO_u8TogglePinValue+0x8c>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_u8TogglePinValue+0x4e>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <DIO_u8TogglePinValue+0x64>
    1510:	5a c0       	rjmp	.+180    	; 0x15c6 <DIO_u8TogglePinValue+0x102>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	71 f1       	breq	.+92     	; 0x1578 <DIO_u8TogglePinValue+0xb4>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	e9 f1       	breq	.+122    	; 0x15a0 <DIO_u8TogglePinValue+0xdc>
    1526:	4f c0       	rjmp	.+158    	; 0x15c6 <DIO_u8TogglePinValue+0x102>
		{
		    case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;
    1528:	ab e3       	ldi	r26, 0x3B	; 59
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_u8TogglePinValue+0x82>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_u8TogglePinValue+0x7e>
    154a:	84 27       	eor	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	3b c0       	rjmp	.+118    	; 0x15c6 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;
    1550:	a8 e3       	ldi	r26, 0x38	; 56
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e3       	ldi	r30, 0x38	; 56
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8TogglePinValue+0xaa>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8TogglePinValue+0xa6>
    1572:	84 27       	eor	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	27 c0       	rjmp	.+78     	; 0x15c6 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;
    1578:	a5 e3       	ldi	r26, 0x35	; 53
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_u8TogglePinValue+0xd2>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_u8TogglePinValue+0xce>
    159a:	84 27       	eor	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	13 c0       	rjmp	.+38     	; 0x15c6 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_u8TogglePinValue+0xfa>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_u8TogglePinValue+0xf6>
    15c2:	84 27       	eor	r24, r20
    15c4:	8c 93       	st	X, r24
		}
	}
	return Local_u8ErrorState;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <EXTI_u8SetCallBack>:



u8 EXTI_u8SetCallBack(u8 Copy_u8EXTIIndex , void(*Copy_pf)(void))
/**Function to send the address of the ISR application function to ISR**/
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <EXTI_u8SetCallBack+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <EXTI_u8SetCallBack+0x8>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	8a 83       	std	Y+2, r24	; 0x02
    15e6:	7c 83       	std	Y+4, r23	; 0x04
    15e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INTERRUPT2) && (Copy_pf != NULL))
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	88 f4       	brcc	.+34     	; 0x1616 <EXTI_u8SetCallBack+0x3e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f0       	breq	.+26     	; 0x1616 <EXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	fc 01       	movw	r30, r24
    1608:	e2 51       	subi	r30, 0x12	; 18
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <EXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1616:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EXTI_u8InterruptEnable>:

/***************************************************************************/

u8 EXTI_u8InterruptEnable(u8 Copy_u8EXTIIndex , u8 Copy_EdgeIndex)
/**Function used to enable a specific interrupt in a specific edge**/
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	2d 97       	sbiw	r28, 0x0d	; 13
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_EdgeIndex)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3d 87       	std	Y+13, r19	; 0x0d
    164c:	2c 87       	std	Y+12, r18	; 0x0c
    164e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1650:	9d 85       	ldd	r25, Y+13	; 0x0d
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <EXTI_u8InterruptEnable+0x32>
    1658:	5a c0       	rjmp	.+180    	; 0x170e <EXTI_u8InterruptEnable+0xe6>
    165a:	2c 85       	ldd	r18, Y+12	; 0x0c
    165c:	3d 85       	ldd	r19, Y+13	; 0x0d
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <EXTI_u8InterruptEnable+0x46>
    1664:	8c 85       	ldd	r24, Y+12	; 0x0c
    1666:	9d 85       	ldd	r25, Y+13	; 0x0d
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	71 f0       	breq	.+28     	; 0x1688 <EXTI_u8InterruptEnable+0x60>
    166c:	33 c1       	rjmp	.+614    	; 0x18d4 <EXTI_u8InterruptEnable+0x2ac>
    166e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1670:	3d 85       	ldd	r19, Y+13	; 0x0d
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <EXTI_u8InterruptEnable+0x52>
    1678:	8d c0       	rjmp	.+282    	; 0x1794 <EXTI_u8InterruptEnable+0x16c>
    167a:	8c 85       	ldd	r24, Y+12	; 0x0c
    167c:	9d 85       	ldd	r25, Y+13	; 0x0d
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <EXTI_u8InterruptEnable+0x5e>
    1684:	d7 c0       	rjmp	.+430    	; 0x1834 <EXTI_u8InterruptEnable+0x20c>
    1686:	26 c1       	rjmp	.+588    	; 0x18d4 <EXTI_u8InterruptEnable+0x2ac>
	{
		case EXTI_u8_LOW_LEVEL:
		switch(Copy_u8EXTIIndex)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3b 87       	std	Y+11, r19	; 0x0b
    1690:	2a 87       	std	Y+10, r18	; 0x0a
    1692:	8a 85       	ldd	r24, Y+10	; 0x0a
    1694:	9b 85       	ldd	r25, Y+11	; 0x0b
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	f9 f0       	breq	.+62     	; 0x16da <EXTI_u8InterruptEnable+0xb2>
    169c:	2a 85       	ldd	r18, Y+10	; 0x0a
    169e:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	81 f1       	breq	.+96     	; 0x1706 <EXTI_u8InterruptEnable+0xde>
    16a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	71 f5       	brne	.+92     	; 0x170a <EXTI_u8InterruptEnable+0xe2>
		{
			case EXTI_u8_INTERRUPT0:
			CLR_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Low Level ISC01 ISC00  --> 0 0
    16ae:	a5 e5       	ldi	r26, 0x55	; 85
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e5       	ldi	r30, 0x55	; 85
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 1);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8d 7f       	andi	r24, 0xFD	; 253
    16c8:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    16ca:	ab e5       	ldi	r26, 0x5B	; 91
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e5       	ldi	r30, 0x5B	; 91
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 64       	ori	r24, 0x40	; 64
    16d6:	8c 93       	st	X, r24
    16d8:	fe c0       	rjmp	.+508    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			CLR_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Low Level ISC11 ISC10  --> 0 0
    16da:	a5 e5       	ldi	r26, 0x55	; 85
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e5       	ldi	r30, 0x55	; 85
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8b 7f       	andi	r24, 0xFB	; 251
    16e6:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 3);
    16e8:	a5 e5       	ldi	r26, 0x55	; 85
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e5       	ldi	r30, 0x55	; 85
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	87 7f       	andi	r24, 0xF7	; 247
    16f4:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    16f6:	ab e5       	ldi	r26, 0x5B	; 91
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e5       	ldi	r30, 0x5B	; 91
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 68       	ori	r24, 0x80	; 128
    1702:	8c 93       	st	X, r24
    1704:	e8 c0       	rjmp	.+464    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			Local_u8ErrorState = STD_TYPES_NOK;	//Low level isn't applicable in INT2
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	e6 c0       	rjmp	.+460    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	e4 c0       	rjmp	.+456    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
		
		case EXTI_u8_LOGICAL_CHANGE:
		switch(Copy_u8EXTIIndex)
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	39 87       	std	Y+9, r19	; 0x09
    1716:	28 87       	std	Y+8, r18	; 0x08
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	f9 f0       	breq	.+62     	; 0x1760 <EXTI_u8InterruptEnable+0x138>
    1722:	28 85       	ldd	r18, Y+8	; 0x08
    1724:	39 85       	ldd	r19, Y+9	; 0x09
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	81 f1       	breq	.+96     	; 0x178c <EXTI_u8InterruptEnable+0x164>
    172c:	88 85       	ldd	r24, Y+8	; 0x08
    172e:	99 85       	ldd	r25, Y+9	; 0x09
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	71 f5       	brne	.+92     	; 0x1790 <EXTI_u8InterruptEnable+0x168>
		{
			case EXTI_u8_INTERRUPT0:
			SET_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Logical Change ISC01 ISC00  --> 0 1
    1734:	a5 e5       	ldi	r26, 0x55	; 85
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e5       	ldi	r30, 0x55	; 85
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	81 60       	ori	r24, 0x01	; 1
    1740:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 1);
    1742:	a5 e5       	ldi	r26, 0x55	; 85
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e5       	ldi	r30, 0x55	; 85
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8d 7f       	andi	r24, 0xFD	; 253
    174e:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1750:	ab e5       	ldi	r26, 0x5B	; 91
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	eb e5       	ldi	r30, 0x5B	; 91
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 64       	ori	r24, 0x40	; 64
    175c:	8c 93       	st	X, r24
    175e:	bb c0       	rjmp	.+374    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			SET_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Low Level ISC11 ISC10  --> 0 1
    1760:	a5 e5       	ldi	r26, 0x55	; 85
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e5       	ldi	r30, 0x55	; 85
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	84 60       	ori	r24, 0x04	; 4
    176c:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 3);
    176e:	a5 e5       	ldi	r26, 0x55	; 85
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e5       	ldi	r30, 0x55	; 85
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    177c:	ab e5       	ldi	r26, 0x5B	; 91
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e5       	ldi	r30, 0x5B	; 91
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	8c 93       	st	X, r24
    178a:	a5 c0       	rjmp	.+330    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:				//Logical change isn't applicable in INT2
			Local_u8ErrorState = STD_TYPES_NOK;
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	a3 c0       	rjmp	.+326    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	a1 c0       	rjmp	.+322    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
	
		case EXTI_u8_FALLING_EDGE:
		switch(Copy_u8EXTIIndex)
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3f 83       	std	Y+7, r19	; 0x07
    179c:	2e 83       	std	Y+6, r18	; 0x06
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	f9 f0       	breq	.+62     	; 0x17e6 <EXTI_u8InterruptEnable+0x1be>
    17a8:	2e 81       	ldd	r18, Y+6	; 0x06
    17aa:	3f 81       	ldd	r19, Y+7	; 0x07
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	81 f1       	breq	.+96     	; 0x1812 <EXTI_u8InterruptEnable+0x1ea>
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	9f 81       	ldd	r25, Y+7	; 0x07
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	d9 f5       	brne	.+118    	; 0x1830 <EXTI_u8InterruptEnable+0x208>
		{
			case EXTI_u8_INTERRUPT0:
			CLR_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Falling Edge ISC01 ISC00  --> 1 0
    17ba:	a5 e5       	ldi	r26, 0x55	; 85
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e5       	ldi	r30, 0x55	; 85
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8e 7f       	andi	r24, 0xFE	; 254
    17c6:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 1);
    17c8:	a5 e5       	ldi	r26, 0x55	; 85
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e5       	ldi	r30, 0x55	; 85
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    17d6:	ab e5       	ldi	r26, 0x5B	; 91
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e5       	ldi	r30, 0x5B	; 91
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 64       	ori	r24, 0x40	; 64
    17e2:	8c 93       	st	X, r24
    17e4:	78 c0       	rjmp	.+240    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			CLR_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Falling Edge ISC11 ISC10  --> 1 0
    17e6:	a5 e5       	ldi	r26, 0x55	; 85
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e5       	ldi	r30, 0x55	; 85
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8b 7f       	andi	r24, 0xFB	; 251
    17f2:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 3);
    17f4:	a5 e5       	ldi	r26, 0x55	; 85
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e5       	ldi	r30, 0x55	; 85
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 60       	ori	r24, 0x08	; 8
    1800:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	8c 93       	st	X, r24
    1810:	62 c0       	rjmp	.+196    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			CLR_BIT(EXTI_u8_MCUCSR_REG , 6);		// Select Edge source => Falling Edge ISC2  --> 0
    1812:	a4 e5       	ldi	r26, 0x54	; 84
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e4 e5       	ldi	r30, 0x54	; 84
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 5);			//Enable EXTI2 => PIE INT2 --> 1
    1820:	ab e5       	ldi	r26, 0x5B	; 91
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e5       	ldi	r30, 0x5B	; 91
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 62       	ori	r24, 0x20	; 32
    182c:	8c 93       	st	X, r24
    182e:	53 c0       	rjmp	.+166    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	51 c0       	rjmp	.+162    	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
		
		case EXTI_u8_RISING_EDGE:
		switch(Copy_u8EXTIIndex)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3d 83       	std	Y+5, r19	; 0x05
    183c:	2c 83       	std	Y+4, r18	; 0x04
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	f9 f0       	breq	.+62     	; 0x1886 <EXTI_u8InterruptEnable+0x25e>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	81 f1       	breq	.+96     	; 0x18b2 <EXTI_u8InterruptEnable+0x28a>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	d9 f5       	brne	.+118    	; 0x18d0 <EXTI_u8InterruptEnable+0x2a8>
		{
			case EXTI_u8_INTERRUPT0:
			SET_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Raising Edge ISC01 ISC00  --> 1 1
    185a:	a5 e5       	ldi	r26, 0x55	; 85
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e5       	ldi	r30, 0x55	; 85
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 1);
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1876:	ab e5       	ldi	r26, 0x5B	; 91
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e5       	ldi	r30, 0x5B	; 91
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	80 64       	ori	r24, 0x40	; 64
    1882:	8c 93       	st	X, r24
    1884:	28 c0       	rjmp	.+80     	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			SET_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Raising Edge ISC11 ISC10  --> 1 1
    1886:	a5 e5       	ldi	r26, 0x55	; 85
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e5 e5       	ldi	r30, 0x55	; 85
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	84 60       	ori	r24, 0x04	; 4
    1892:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 3);
    1894:	a5 e5       	ldi	r26, 0x55	; 85
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e5 e5       	ldi	r30, 0x55	; 85
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 60       	ori	r24, 0x08	; 8
    18a0:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    18a2:	ab e5       	ldi	r26, 0x5B	; 91
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e5       	ldi	r30, 0x5B	; 91
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 68       	ori	r24, 0x80	; 128
    18ae:	8c 93       	st	X, r24
    18b0:	12 c0       	rjmp	.+36     	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			SET_BIT(EXTI_u8_MCUCSR_REG , 6);		// Select Edge source => Raising Edge ISC2  --> 0
    18b2:	a4 e5       	ldi	r26, 0x54	; 84
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e4 e5       	ldi	r30, 0x54	; 84
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 5);			//Enable EXTI2 => PIE INT2 --> 1
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	8c 93       	st	X, r24
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    18d0:	19 82       	std	Y+1, r1	; 0x01
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <EXTI_u8InterruptEnable+0x2ae>
			break;
		}
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;
    18d4:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	
	return Local_u8ErrorState;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	2d 96       	adiw	r28, 0x0d	; 13
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <EXTI_u8InterruptDisable>:

/***************************************************************************/

u8 EXTI_u8InterruptDisable(u8 Copy_u8EXTIIndex)
/**Function used to disable a specific interrupt**/
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <EXTI_u8InterruptDisable+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <EXTI_u8InterruptDisable+0x8>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3c 83       	std	Y+4, r19	; 0x04
    1904:	2b 83       	std	Y+3, r18	; 0x03
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	91 05       	cpc	r25, r1
    190e:	89 f0       	breq	.+34     	; 0x1932 <EXTI_u8InterruptDisable+0x48>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	a1 f0       	breq	.+40     	; 0x1942 <EXTI_u8InterruptDisable+0x58>
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	c1 f4       	brne	.+48     	; 0x1952 <EXTI_u8InterruptDisable+0x68>
	{
		case EXTI_u8_INTERRUPT0:
		CLR_BIT(EXTI_u8_GICR_REG , 6);		//Disable EXTI0 => PIE INT2 --> 0
    1922:	ab e5       	ldi	r26, 0x5B	; 91
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	eb e5       	ldi	r30, 0x5B	; 91
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7b       	andi	r24, 0xBF	; 191
    192e:	8c 93       	st	X, r24
    1930:	11 c0       	rjmp	.+34     	; 0x1954 <EXTI_u8InterruptDisable+0x6a>
		break;
		
		case EXTI_u8_INTERRUPT1:
		CLR_BIT(EXTI_u8_GICR_REG , 7);		//Disable EXTI1 => PIE INT2 --> 0
    1932:	ab e5       	ldi	r26, 0x5B	; 91
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	eb e5       	ldi	r30, 0x5B	; 91
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	8c 93       	st	X, r24
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <EXTI_u8InterruptDisable+0x6a>
		break;
		
		case EXTI_u8_INTERRUPT2:			//Disable EXTI2 => PIE INT2 --> 0
		CLR_BIT(EXTI_u8_GICR_REG , 5);
    1942:	ab e5       	ldi	r26, 0x5B	; 91
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e5       	ldi	r30, 0x5B	; 91
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7d       	andi	r24, 0xDF	; 223
    194e:	8c 93       	st	X, r24
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <EXTI_u8InterruptDisable+0x6a>
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;
    1952:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <__vector_1>:

/***************************************************************************/

void __vector_1(void)		__attribute__((signal));	/**ISR function of the EXTI0**/
void __vector_1(void)
{
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT0] != NULL)
    198e:	80 91 ee 00 	lds	r24, 0x00EE
    1992:	90 91 ef 00 	lds	r25, 0x00EF
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	29 f0       	breq	.+10     	; 0x19a4 <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT0]();
    199a:	e0 91 ee 00 	lds	r30, 0x00EE
    199e:	f0 91 ef 00 	lds	r31, 0x00EF
    19a2:	09 95       	icall
	}
	
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	bf 91       	pop	r27
    19ae:	af 91       	pop	r26
    19b0:	9f 91       	pop	r25
    19b2:	8f 91       	pop	r24
    19b4:	7f 91       	pop	r23
    19b6:	6f 91       	pop	r22
    19b8:	5f 91       	pop	r21
    19ba:	4f 91       	pop	r20
    19bc:	3f 91       	pop	r19
    19be:	2f 91       	pop	r18
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <__vector_2>:

/***************************************************************************/

void __vector_2(void)		__attribute__((signal));	/**ISR function of the EXTI1**/
void __vector_2(void)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT1] != NULL)
    19f4:	80 91 f0 00 	lds	r24, 0x00F0
    19f8:	90 91 f1 00 	lds	r25, 0x00F1
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT1]();
    1a00:	e0 91 f0 00 	lds	r30, 0x00F0
    1a04:	f0 91 f1 00 	lds	r31, 0x00F1
    1a08:	09 95       	icall
	}
	
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__vector_3>:

/***************************************************************************/

void __vector_3(void)		__attribute__((signal));	/**ISR function of the EXTI2**/
void __vector_3(void)
{
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT2] != NULL)
    1a5a:	80 91 f2 00 	lds	r24, 0x00F2
    1a5e:	90 91 f3 00 	lds	r25, 0x00F3
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT2]();
    1a66:	e0 91 f2 00 	lds	r30, 0x00F2
    1a6a:	f0 91 f3 00 	lds	r31, 0x00F3
    1a6e:	09 95       	icall
	}
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <GI_voidEnable>:
/*MCAL*/
#include "GI_interface.h"
#include "GI_private.h"

void GI_voidEnable(void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
    1a9e:	af e5       	ldi	r26, 0x5F	; 95
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ef e5       	ldi	r30, 0x5F	; 95
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	8c 93       	st	X, r24
}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , 7);
    1aba:	af e5       	ldi	r26, 0x5F	; 95
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ef e5       	ldi	r30, 0x5F	; 95
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 77       	andi	r24, 0x7F	; 127
    1ac6:	8c 93       	st	X, r24
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <KPD_u8GetPressedKey>:



u8 KPD_u8GetPressedKey(u8 * Copy_pu8ReturnedKey)
/**Function used to return the pressed key from the keypad**/			
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	65 97       	sbiw	r28, 0x15	; 21
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	9d 8b       	std	Y+21, r25	; 0x15
    1ae4:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;					//Variable to return the state of the function
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8ReturnedPinValue;							//Variable to hold the returned pin value
	u8 Local_u8RowsCounter;									//Variable to be used as Counter for rows
	u8 Local_u8ColsCounter;									//Variable to be used as Counter for cols
	u8 Local_u8Flag = 0;									//Variable to be used as a flag to indicate that the key was found
    1aea:	1f 86       	std	Y+15, r1	; 0x0f
	
	
	if(Copy_pu8ReturnedKey != NULL)															//Check that the pointer argument holds an address of a variable in main
    1aec:	8c 89       	ldd	r24, Y+20	; 0x14
    1aee:	9d 89       	ldd	r25, Y+21	; 0x15
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <KPD_u8GetPressedKey+0x28>
    1af4:	1b c1       	rjmp	.+566    	; 0x1d2c <KPD_u8GetPressedKey+0x25e>
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
    1af6:	19 8a       	std	Y+17, r1	; 0x11
    1af8:	14 c1       	rjmp	.+552    	; 0x1d22 <KPD_u8GetPressedKey+0x254>
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_LOW);	//Set the row in the round to low (Activate the row)
    1afa:	89 89       	ldd	r24, Y+17	; 0x11
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	fc 01       	movw	r30, r24
    1b02:	e3 52       	subi	r30, 0x23	; 35
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	20 81       	ld	r18, Z
    1b08:	89 89       	ldd	r24, Y+17	; 0x11
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	fc 01       	movw	r30, r24
    1b10:	ef 51       	subi	r30, 0x1F	; 31
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	90 81       	ld	r25, Z
    1b16:	82 2f       	mov	r24, r18
    1b18:	69 2f       	mov	r22, r25
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
			
			for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<4 ; Local_u8ColsCounter++)		//Loop on the cols
    1b20:	18 8a       	std	Y+16, r1	; 0x10
    1b22:	e2 c0       	rjmp	.+452    	; 0x1ce8 <KPD_u8GetPressedKey+0x21a>
			{
				DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);   //Get the value of the current pin and save that to the local variable
    1b24:	88 89       	ldd	r24, Y+16	; 0x10
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	eb 51       	subi	r30, 0x1B	; 27
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	40 81       	ld	r20, Z
    1b32:	88 89       	ldd	r24, Y+16	; 0x10
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e7 51       	subi	r30, 0x17	; 23
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	90 81       	ld	r25, Z
    1b40:	9e 01       	movw	r18, r28
    1b42:	2d 5e       	subi	r18, 0xED	; 237
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	84 2f       	mov	r24, r20
    1b48:	69 2f       	mov	r22, r25
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8GetPinValue>
				if(Local_u8ReturnedPinValue == DIO_u8_LOW)									//If local variable is set to 0  --> The key is pressed
    1b50:	8b 89       	ldd	r24, Y+19	; 0x13
    1b52:	88 23       	and	r24, r24
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <KPD_u8GetPressedKey+0x8a>
    1b56:	c1 c0       	rjmp	.+386    	; 0x1cda <KPD_u8GetPressedKey+0x20c>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b5e:	b1 e4       	ldi	r27, 0x41	; 65
    1b60:	8b 87       	std	Y+11, r24	; 0x0b
    1b62:	9c 87       	std	Y+12, r25	; 0x0c
    1b64:	ad 87       	std	Y+13, r26	; 0x0d
    1b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a ef       	ldi	r20, 0xFA	; 250
    1b76:	54 e4       	ldi	r21, 0x44	; 68
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	98 87       	std	Y+8, r25	; 0x08
    1b84:	a9 87       	std	Y+9, r26	; 0x09
    1b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <KPD_u8GetPressedKey+0xdc>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <KPD_u8GetPressedKey+0x15a>
	else if (__tmp > 65535)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <KPD_u8GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <KPD_u8GetPressedKey+0x13c>
    1bec:	88 ec       	ldi	r24, 0xC8	; 200
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <KPD_u8GetPressedKey+0x12a>
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <KPD_u8GetPressedKey+0x11e>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <KPD_u8GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <KPD_u8GetPressedKey+0x166>
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing using delay*/
					_delay_ms(20);
					
					/*Check if the pin is still LOW*/
					DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
    1c3c:	88 89       	ldd	r24, Y+16	; 0x10
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	fc 01       	movw	r30, r24
    1c44:	eb 51       	subi	r30, 0x1B	; 27
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	40 81       	ld	r20, Z
    1c4a:	88 89       	ldd	r24, Y+16	; 0x10
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	fc 01       	movw	r30, r24
    1c52:	e7 51       	subi	r30, 0x17	; 23
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	90 81       	ld	r25, Z
    1c58:	9e 01       	movw	r18, r28
    1c5a:	2d 5e       	subi	r18, 0xED	; 237
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	84 2f       	mov	r24, r20
    1c60:	69 2f       	mov	r22, r25
    1c62:	a9 01       	movw	r20, r18
    1c64:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8GetPinValue>
					
					if(Local_u8ReturnedPinValue == DIO_u8_LOW)		//Pin is still low
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	88 23       	and	r24, r24
    1c6c:	89 f5       	brne	.+98     	; 0x1cd0 <KPD_u8GetPressedKey+0x202>
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <KPD_u8GetPressedKey+0x1ce>
					{
						/*Wait till the pin is back to HIGH*/
						while(Local_u8ReturnedPinValue == DIO_u8_LOW)
						{
							DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
    1c70:	88 89       	ldd	r24, Y+16	; 0x10
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	fc 01       	movw	r30, r24
    1c78:	eb 51       	subi	r30, 0x1B	; 27
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	40 81       	ld	r20, Z
    1c7e:	88 89       	ldd	r24, Y+16	; 0x10
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fc 01       	movw	r30, r24
    1c86:	e7 51       	subi	r30, 0x17	; 23
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	90 81       	ld	r25, Z
    1c8c:	9e 01       	movw	r18, r28
    1c8e:	2d 5e       	subi	r18, 0xED	; 237
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	84 2f       	mov	r24, r20
    1c94:	69 2f       	mov	r22, r25
    1c96:	a9 01       	movw	r20, r18
    1c98:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8GetPinValue>
					DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
					
					if(Local_u8ReturnedPinValue == DIO_u8_LOW)		//Pin is still low
					{
						/*Wait till the pin is back to HIGH*/
						while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9e:	88 23       	and	r24, r24
    1ca0:	39 f3       	breq	.-50     	; 0x1c70 <KPD_u8GetPressedKey+0x1a2>
						{
							DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
						}
						
						*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];	//Return the pressed key to the return key argument
    1ca2:	89 89       	ldd	r24, Y+17	; 0x11
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	88 89       	ldd	r24, Y+16	; 0x10
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	ca 01       	movw	r24, r20
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e3 53       	subi	r30, 0x33	; 51
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	ec 89       	ldd	r30, Y+20	; 0x14
    1cc6:	fd 89       	ldd	r31, Y+21	; 0x15
    1cc8:	80 83       	st	Z, r24
						Local_u8Flag = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	8f 87       	std	Y+15, r24	; 0x0f
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <KPD_u8GetPressedKey+0x222>
						break;
					}
					
					else		//Pin isn't low anymore
					{
						*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;		//This character will be sent in case no key was pressed, so that the LCD won't display anything
    1cd0:	ec 89       	ldd	r30, Y+20	; 0x14
    1cd2:	fd 89       	ldd	r31, Y+21	; 0x15
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	80 83       	st	Z, r24
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <KPD_u8GetPressedKey+0x214>
				
				
				
				else
				{
					*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;			    //This character will be sent in case no key was pressed, so that the LCD won't display anything
    1cda:	ec 89       	ldd	r30, Y+20	; 0x14
    1cdc:	fd 89       	ldd	r31, Y+21	; 0x15
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	80 83       	st	Z, r24
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_LOW);	//Set the row in the round to low (Activate the row)
			
			for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<4 ; Local_u8ColsCounter++)		//Loop on the cols
    1ce2:	88 89       	ldd	r24, Y+16	; 0x10
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	88 8b       	std	Y+16, r24	; 0x10
    1ce8:	88 89       	ldd	r24, Y+16	; 0x10
    1cea:	84 30       	cpi	r24, 0x04	; 4
    1cec:	08 f4       	brcc	.+2      	; 0x1cf0 <KPD_u8GetPressedKey+0x222>
    1cee:	1a cf       	rjmp	.-460    	; 0x1b24 <KPD_u8GetPressedKey+0x56>
				}
			}
			

			/*Deactivate ROw*/
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_HIGH);	//We need to return the row pin to it's original state at the end of each loop
    1cf0:	89 89       	ldd	r24, Y+17	; 0x11
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e3 52       	subi	r30, 0x23	; 35
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	20 81       	ld	r18, Z
    1cfe:	89 89       	ldd	r24, Y+17	; 0x11
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	fc 01       	movw	r30, r24
    1d06:	ef 51       	subi	r30, 0x1F	; 31
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	90 81       	ld	r25, Z
    1d0c:	82 2f       	mov	r24, r18
    1d0e:	69 2f       	mov	r22, r25
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
			
			if(Local_u8Flag == 1)	//If we found the key, we'll break the rows loop too
    1d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	49 f0       	breq	.+18     	; 0x1d2e <KPD_u8GetPressedKey+0x260>
	u8 Local_u8Flag = 0;									//Variable to be used as a flag to indicate that the key was found
	
	
	if(Copy_pu8ReturnedKey != NULL)															//Check that the pointer argument holds an address of a variable in main
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	89 8b       	std	Y+17, r24	; 0x11
    1d22:	89 89       	ldd	r24, Y+17	; 0x11
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <KPD_u8GetPressedKey+0x25c>
    1d28:	e8 ce       	rjmp	.-560    	; 0x1afa <KPD_u8GetPressedKey+0x2c>
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <KPD_u8GetPressedKey+0x260>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d2c:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    1d2e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1d30:	65 96       	adiw	r28, 0x15	; 21
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <LCD_voidInit>:
#include "LCD_config.h"


void LCD_voidInit(void)
/**Function used to iniate the LCD**/
{
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	c6 55       	subi	r28, 0x56	; 86
    1d50:	d0 40       	sbci	r29, 0x00	; 0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ed 5a       	subi	r30, 0xAD	; 173
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	ac e0       	ldi	r26, 0x0C	; 12
    1d68:	b2 e4       	ldi	r27, 0x42	; 66
    1d6a:	80 83       	st	Z, r24
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	a2 83       	std	Z+2, r26	; 0x02
    1d70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	8e 01       	movw	r16, r28
    1d74:	01 5b       	subi	r16, 0xB1	; 177
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 5a       	subi	r30, 0xAD	; 173
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da0:	fe 01       	movw	r30, r28
    1da2:	e1 5b       	subi	r30, 0xB1	; 177
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	44 f4       	brge	.+16     	; 0x1dce <LCD_voidInit+0x8c>
		__ticks = 1;
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e3 5b       	subi	r30, 0xB3	; 179
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	64 c0       	rjmp	.+200    	; 0x1e96 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e1 5b       	subi	r30, 0xB1	; 177
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <LCD_voidInit+0xac>
    1dec:	43 c0       	rjmp	.+134    	; 0x1e74 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 5a       	subi	r30, 0xAD	; 173
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	03 5b       	subi	r16, 0xB3	; 179
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	1f c0       	rjmp	.+62     	; 0x1e64 <LCD_voidInit+0x122>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e5 5b       	subi	r30, 0xB5	; 181
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	fe 01       	movw	r30, r28
    1e36:	e5 5b       	subi	r30, 0xB5	; 181
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_voidInit+0xfc>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e5 5b       	subi	r30, 0xB5	; 181
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	de 01       	movw	r26, r28
    1e4e:	a3 5b       	subi	r26, 0xB3	; 179
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e3 5b       	subi	r30, 0xB3	; 179
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	fe 01       	movw	r30, r28
    1e66:	e3 5b       	subi	r30, 0xB3	; 179
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	d1 f6       	brne	.-76     	; 0x1e26 <LCD_voidInit+0xe4>
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	8e 01       	movw	r16, r28
    1e76:	03 5b       	subi	r16, 0xB3	; 179
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e1 5b       	subi	r30, 0xB1	; 177
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	f8 01       	movw	r30, r16
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	de 01       	movw	r26, r28
    1e98:	a7 5b       	subi	r26, 0xB7	; 183
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e3 5b       	subi	r30, 0xB3	; 179
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	8d 93       	st	X+, r24
    1ea8:	9c 93       	st	X, r25
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e7 5b       	subi	r30, 0xB7	; 183
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_voidInit+0x172>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 5b       	subi	r30, 0xB7	; 183
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
												 F:Sets character font
												   F=0  --> 5x7 dots
												   F=1  --> 5x10 dots
												   */
												   
	LCD_voidSendCmnd(0b00111000);			    ///DL=1 -- N=1 -- F=0
    1ec2:	88 e3       	ldi	r24, 0x38	; 56
    1ec4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	eb 5b       	subi	r30, 0xBB	; 187
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e2       	ldi	r26, 0x20	; 32
    1ed4:	b2 e4       	ldi	r27, 0x42	; 66
    1ed6:	80 83       	st	Z, r24
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	a2 83       	std	Z+2, r26	; 0x02
    1edc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ede:	8e 01       	movw	r16, r28
    1ee0:	0f 5b       	subi	r16, 0xBF	; 191
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 5b       	subi	r30, 0xBB	; 187
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	2b ea       	ldi	r18, 0xAB	; 171
    1ef4:	3a ea       	ldi	r19, 0xAA	; 170
    1ef6:	4a e2       	ldi	r20, 0x2A	; 42
    1ef8:	50 e4       	ldi	r21, 0x40	; 64
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	f8 01       	movw	r30, r16
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	a2 83       	std	Z+2, r26	; 0x02
    1f0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ef 5b       	subi	r30, 0xBF	; 191
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	34 f4       	brge	.+12     	; 0x1f36 <LCD_voidInit+0x1f4>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e0 5c       	subi	r30, 0xC0	; 192
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 83       	st	Z, r24
    1f34:	9d c0       	rjmp	.+314    	; 0x2070 <LCD_voidInit+0x32e>
	else if (__tmp > 255)
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 5b       	subi	r30, 0xBF	; 191
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	53 e4       	ldi	r21, 0x43	; 67
    1f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	0c f0       	brlt	.+2      	; 0x1f56 <LCD_voidInit+0x214>
    1f54:	7e c0       	rjmp	.+252    	; 0x2052 <LCD_voidInit+0x310>
	{
		_delay_ms(__us / 1000.0);
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 5b       	subi	r30, 0xBB	; 187
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8c af       	std	Y+60, r24	; 0x3c
    1f76:	9d af       	std	Y+61, r25	; 0x3d
    1f78:	ae af       	std	Y+62, r26	; 0x3e
    1f7a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f80:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a ef       	ldi	r20, 0xFA	; 250
    1f8a:	54 e4       	ldi	r21, 0x44	; 68
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	88 af       	std	Y+56, r24	; 0x38
    1f96:	99 af       	std	Y+57, r25	; 0x39
    1f98:	aa af       	std	Y+58, r26	; 0x3a
    1f9a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f9c:	68 ad       	ldd	r22, Y+56	; 0x38
    1f9e:	79 ad       	ldd	r23, Y+57	; 0x39
    1fa0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fa2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <LCD_voidInit+0x27c>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9f ab       	std	Y+55, r25	; 0x37
    1fba:	8e ab       	std	Y+54, r24	; 0x36
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    1fbe:	68 ad       	ldd	r22, Y+56	; 0x38
    1fc0:	79 ad       	ldd	r23, Y+57	; 0x39
    1fc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fd8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fda:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9f ab       	std	Y+55, r25	; 0x37
    1ffc:	8e ab       	std	Y+54, r24	; 0x36
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCD_voidInit+0x2dc>
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9d ab       	std	Y+53, r25	; 0x35
    2006:	8c ab       	std	Y+52, r24	; 0x34
    2008:	8c a9       	ldd	r24, Y+52	; 0x34
    200a:	9d a9       	ldd	r25, Y+53	; 0x35
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_voidInit+0x2ca>
    2010:	9d ab       	std	Y+53, r25	; 0x35
    2012:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8e a9       	ldd	r24, Y+54	; 0x36
    2016:	9f a9       	ldd	r25, Y+55	; 0x37
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9f ab       	std	Y+55, r25	; 0x37
    201c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8e a9       	ldd	r24, Y+54	; 0x36
    2020:	9f a9       	ldd	r25, Y+55	; 0x37
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCD_voidInit+0x2be>
    2026:	2d c0       	rjmp	.+90     	; 0x2082 <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	68 ad       	ldd	r22, Y+56	; 0x38
    202a:	79 ad       	ldd	r23, Y+57	; 0x39
    202c:	8a ad       	ldd	r24, Y+58	; 0x3a
    202e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9f ab       	std	Y+55, r25	; 0x37
    203a:	8e ab       	std	Y+54, r24	; 0x36
    203c:	8e a9       	ldd	r24, Y+54	; 0x36
    203e:	9f a9       	ldd	r25, Y+55	; 0x37
    2040:	9b ab       	std	Y+51, r25	; 0x33
    2042:	8a ab       	std	Y+50, r24	; 0x32
    2044:	8a a9       	ldd	r24, Y+50	; 0x32
    2046:	9b a9       	ldd	r25, Y+51	; 0x33
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_voidInit+0x306>
    204c:	9b ab       	std	Y+51, r25	; 0x33
    204e:	8a ab       	std	Y+50, r24	; 0x32
    2050:	18 c0       	rjmp	.+48     	; 0x2082 <LCD_voidInit+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2052:	fe 01       	movw	r30, r28
    2054:	ef 5b       	subi	r30, 0xBF	; 191
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	fe 01       	movw	r30, r28
    206a:	e0 5c       	subi	r30, 0xC0	; 192
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 83       	st	Z, r24
    2070:	fe 01       	movw	r30, r28
    2072:	e0 5c       	subi	r30, 0xC0	; 192
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    207a:	89 a9       	ldd	r24, Y+49	; 0x31
    207c:	8a 95       	dec	r24
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_voidInit+0x33a>
    2080:	89 ab       	std	Y+49, r24	; 0x31
												 B: Controls cursor blinking
													B=0 --> The blink is off
													B=1 --> The blink is on 
												 */
												 
	LCD_voidSendCmnd(0b00001111);			    ///D=1 -- C=0 -- B=0
    2082:	8f e0       	ldi	r24, 0x0F	; 15
    2084:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e2       	ldi	r26, 0x20	; 32
    208e:	b2 e4       	ldi	r27, 0x42	; 66
    2090:	8d a7       	std	Y+45, r24	; 0x2d
    2092:	9e a7       	std	Y+46, r25	; 0x2e
    2094:	af a7       	std	Y+47, r26	; 0x2f
    2096:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2098:	6d a5       	ldd	r22, Y+45	; 0x2d
    209a:	7e a5       	ldd	r23, Y+46	; 0x2e
    209c:	8f a5       	ldd	r24, Y+47	; 0x2f
    209e:	98 a9       	ldd	r25, Y+48	; 0x30
    20a0:	2b ea       	ldi	r18, 0xAB	; 171
    20a2:	3a ea       	ldi	r19, 0xAA	; 170
    20a4:	4a e2       	ldi	r20, 0x2A	; 42
    20a6:	50 e4       	ldi	r21, 0x40	; 64
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	89 a7       	std	Y+41, r24	; 0x29
    20b2:	9a a7       	std	Y+42, r25	; 0x2a
    20b4:	ab a7       	std	Y+43, r26	; 0x2b
    20b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20b8:	69 a5       	ldd	r22, Y+41	; 0x29
    20ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    20bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20be:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	1c f4       	brge	.+6      	; 0x20d6 <LCD_voidInit+0x394>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	88 a7       	std	Y+40, r24	; 0x28
    20d4:	91 c0       	rjmp	.+290    	; 0x21f8 <LCD_voidInit+0x4b6>
	else if (__tmp > 255)
    20d6:	69 a5       	ldd	r22, Y+41	; 0x29
    20d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    20da:	8b a5       	ldd	r24, Y+43	; 0x2b
    20dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	53 e4       	ldi	r21, 0x43	; 67
    20e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	0c f0       	brlt	.+2      	; 0x20f0 <LCD_voidInit+0x3ae>
    20ee:	7b c0       	rjmp	.+246    	; 0x21e6 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    20f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    20f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f6:	98 a9       	ldd	r25, Y+48	; 0x30
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	54 e4       	ldi	r21, 0x44	; 68
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8c a3       	std	Y+36, r24	; 0x24
    210a:	9d a3       	std	Y+37, r25	; 0x25
    210c:	ae a3       	std	Y+38, r26	; 0x26
    210e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2110:	6c a1       	ldd	r22, Y+36	; 0x24
    2112:	7d a1       	ldd	r23, Y+37	; 0x25
    2114:	8e a1       	ldd	r24, Y+38	; 0x26
    2116:	9f a1       	ldd	r25, Y+39	; 0x27
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	4a ef       	ldi	r20, 0xFA	; 250
    211e:	54 e4       	ldi	r21, 0x44	; 68
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	88 a3       	std	Y+32, r24	; 0x20
    212a:	99 a3       	std	Y+33, r25	; 0x21
    212c:	aa a3       	std	Y+34, r26	; 0x22
    212e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2130:	68 a1       	ldd	r22, Y+32	; 0x20
    2132:	79 a1       	ldd	r23, Y+33	; 0x21
    2134:	8a a1       	ldd	r24, Y+34	; 0x22
    2136:	9b a1       	ldd	r25, Y+35	; 0x23
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e8       	ldi	r20, 0x80	; 128
    213e:	5f e3       	ldi	r21, 0x3F	; 63
    2140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2144:	88 23       	and	r24, r24
    2146:	2c f4       	brge	.+10     	; 0x2152 <LCD_voidInit+0x410>
		__ticks = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9f 8f       	std	Y+31, r25	; 0x1f
    214e:	8e 8f       	std	Y+30, r24	; 0x1e
    2150:	3f c0       	rjmp	.+126    	; 0x21d0 <LCD_voidInit+0x48e>
	else if (__tmp > 65535)
    2152:	68 a1       	ldd	r22, Y+32	; 0x20
    2154:	79 a1       	ldd	r23, Y+33	; 0x21
    2156:	8a a1       	ldd	r24, Y+34	; 0x22
    2158:	9b a1       	ldd	r25, Y+35	; 0x23
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	3f ef       	ldi	r19, 0xFF	; 255
    215e:	4f e7       	ldi	r20, 0x7F	; 127
    2160:	57 e4       	ldi	r21, 0x47	; 71
    2162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2166:	18 16       	cp	r1, r24
    2168:	4c f5       	brge	.+82     	; 0x21bc <LCD_voidInit+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216a:	6c a1       	ldd	r22, Y+36	; 0x24
    216c:	7d a1       	ldd	r23, Y+37	; 0x25
    216e:	8e a1       	ldd	r24, Y+38	; 0x26
    2170:	9f a1       	ldd	r25, Y+39	; 0x27
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e2       	ldi	r20, 0x20	; 32
    2178:	51 e4       	ldi	r21, 0x41	; 65
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9f 8f       	std	Y+31, r25	; 0x1f
    2190:	8e 8f       	std	Y+30, r24	; 0x1e
    2192:	0f c0       	rjmp	.+30     	; 0x21b2 <LCD_voidInit+0x470>
    2194:	88 ec       	ldi	r24, 0xC8	; 200
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9d 8f       	std	Y+29, r25	; 0x1d
    219a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    219c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    219e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_voidInit+0x45e>
    21a4:	9d 8f       	std	Y+29, r25	; 0x1d
    21a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	9f 8f       	std	Y+31, r25	; 0x1f
    21b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	69 f7       	brne	.-38     	; 0x2194 <LCD_voidInit+0x452>
    21ba:	24 c0       	rjmp	.+72     	; 0x2204 <LCD_voidInit+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21bc:	68 a1       	ldd	r22, Y+32	; 0x20
    21be:	79 a1       	ldd	r23, Y+33	; 0x21
    21c0:	8a a1       	ldd	r24, Y+34	; 0x22
    21c2:	9b a1       	ldd	r25, Y+35	; 0x23
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9f 8f       	std	Y+31, r25	; 0x1f
    21ce:	8e 8f       	std	Y+30, r24	; 0x1e
    21d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21d4:	9b 8f       	std	Y+27, r25	; 0x1b
    21d6:	8a 8f       	std	Y+26, r24	; 0x1a
    21d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_voidInit+0x49a>
    21e0:	9b 8f       	std	Y+27, r25	; 0x1b
    21e2:	8a 8f       	std	Y+26, r24	; 0x1a
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <LCD_voidInit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e6:	69 a5       	ldd	r22, Y+41	; 0x29
    21e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	88 a7       	std	Y+40, r24	; 0x28
    21f8:	88 a5       	ldd	r24, Y+40	; 0x28
    21fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21fc:	89 8d       	ldd	r24, Y+25	; 0x19
    21fe:	8a 95       	dec	r24
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_voidInit+0x4bc>
    2202:	89 8f       	std	Y+25, r24	; 0x19
	//Wait more than 39us
	_delay_us(40);
	
	
	/*Display clear 0b00000001		    -->Used to clear any thing on the display*/
	LCD_voidSendCmnd(0b00000001);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 ee       	ldi	r25, 0xE0	; 224
    220e:	af eb       	ldi	r26, 0xBF	; 191
    2210:	b4 e4       	ldi	r27, 0x44	; 68
    2212:	8d 8b       	std	Y+21, r24	; 0x15
    2214:	9e 8b       	std	Y+22, r25	; 0x16
    2216:	af 8b       	std	Y+23, r26	; 0x17
    2218:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    221a:	6d 89       	ldd	r22, Y+21	; 0x15
    221c:	7e 89       	ldd	r23, Y+22	; 0x16
    221e:	8f 89       	ldd	r24, Y+23	; 0x17
    2220:	98 8d       	ldd	r25, Y+24	; 0x18
    2222:	2b ea       	ldi	r18, 0xAB	; 171
    2224:	3a ea       	ldi	r19, 0xAA	; 170
    2226:	4a e2       	ldi	r20, 0x2A	; 42
    2228:	50 e4       	ldi	r21, 0x40	; 64
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	89 8b       	std	Y+17, r24	; 0x11
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	ab 8b       	std	Y+19, r26	; 0x13
    2238:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    223a:	69 89       	ldd	r22, Y+17	; 0x11
    223c:	7a 89       	ldd	r23, Y+18	; 0x12
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	1c f4       	brge	.+6      	; 0x2258 <LCD_voidInit+0x516>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	88 8b       	std	Y+16, r24	; 0x10
    2256:	91 c0       	rjmp	.+290    	; 0x237a <LCD_voidInit+0x638>
	else if (__tmp > 255)
    2258:	69 89       	ldd	r22, Y+17	; 0x11
    225a:	7a 89       	ldd	r23, Y+18	; 0x12
    225c:	8b 89       	ldd	r24, Y+19	; 0x13
    225e:	9c 89       	ldd	r25, Y+20	; 0x14
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	53 e4       	ldi	r21, 0x43	; 67
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	0c f0       	brlt	.+2      	; 0x2272 <LCD_voidInit+0x530>
    2270:	7b c0       	rjmp	.+246    	; 0x2368 <LCD_voidInit+0x626>
	{
		_delay_ms(__us / 1000.0);
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	54 e4       	ldi	r21, 0x44	; 68
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8c 87       	std	Y+12, r24	; 0x0c
    228c:	9d 87       	std	Y+13, r25	; 0x0d
    228e:	ae 87       	std	Y+14, r26	; 0x0e
    2290:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6c 85       	ldd	r22, Y+12	; 0x0c
    2294:	7d 85       	ldd	r23, Y+13	; 0x0d
    2296:	8e 85       	ldd	r24, Y+14	; 0x0e
    2298:	9f 85       	ldd	r25, Y+15	; 0x0f
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	88 87       	std	Y+8, r24	; 0x08
    22ac:	99 87       	std	Y+9, r25	; 0x09
    22ae:	aa 87       	std	Y+10, r26	; 0x0a
    22b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22b2:	68 85       	ldd	r22, Y+8	; 0x08
    22b4:	79 85       	ldd	r23, Y+9	; 0x09
    22b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_voidInit+0x592>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9f 83       	std	Y+7, r25	; 0x07
    22d0:	8e 83       	std	Y+6, r24	; 0x06
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_voidInit+0x610>
	else if (__tmp > 65535)
    22d4:	68 85       	ldd	r22, Y+8	; 0x08
    22d6:	79 85       	ldd	r23, Y+9	; 0x09
    22d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22da:	9b 85       	ldd	r25, Y+11	; 0x0b
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_voidInit+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9f 83       	std	Y+7, r25	; 0x07
    2312:	8e 83       	std	Y+6, r24	; 0x06
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_voidInit+0x5f2>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9d 83       	std	Y+5, r25	; 0x05
    231c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	9d 81       	ldd	r25, Y+5	; 0x05
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidInit+0x5e0>
    2326:	9d 83       	std	Y+5, r25	; 0x05
    2328:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8e 81       	ldd	r24, Y+6	; 0x06
    232c:	9f 81       	ldd	r25, Y+7	; 0x07
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9f 83       	std	Y+7, r25	; 0x07
    2332:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	9f 81       	ldd	r25, Y+7	; 0x07
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_voidInit+0x5d4>
    233c:	24 c0       	rjmp	.+72     	; 0x2386 <LCD_voidInit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	68 85       	ldd	r22, Y+8	; 0x08
    2340:	79 85       	ldd	r23, Y+9	; 0x09
    2342:	8a 85       	ldd	r24, Y+10	; 0x0a
    2344:	9b 85       	ldd	r25, Y+11	; 0x0b
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9f 83       	std	Y+7, r25	; 0x07
    2350:	8e 83       	std	Y+6, r24	; 0x06
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	9b 83       	std	Y+3, r25	; 0x03
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_voidInit+0x61c>
    2362:	9b 83       	std	Y+3, r25	; 0x03
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <LCD_voidInit+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2368:	69 89       	ldd	r22, Y+17	; 0x11
    236a:	7a 89       	ldd	r23, Y+18	; 0x12
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	88 8b       	std	Y+16, r24	; 0x10
    237a:	88 89       	ldd	r24, Y+16	; 0x10
    237c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	8a 95       	dec	r24
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_voidInit+0x63e>
    2384:	89 83       	std	Y+1, r24	; 0x01
												 S  : Shifts the entire display
													  S=1 	--> Shifts the desplay (To left --> if I/D = 1 (moves to right) // To right --> if I/D = 0 (moves to left))
													  S=0   --> Display does not shift
													  */
													  
	LCD_voidSendCmnd(0b00000110);			    ///I/D=1 -- S=0
    2386:	86 e0       	ldi	r24, 0x06	; 6
    2388:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
}
    238c:	ca 5a       	subi	r28, 0xAA	; 170
    238e:	df 4f       	sbci	r29, 0xFF	; 255
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <LCD_voidSendCmnd>:

/*************************************************************************************/

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
/**Function used to send command to the LCD**/
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	69 97       	sbiw	r28, 0x19	; 25
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	89 8f       	std	Y+25, r24	; 0x19
	/*RS = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RS_PIN , DIO_u8_LOW);			//Depending on which port and which pin we used for RS pin, we set the values of PORT & PIN in config file
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	67 e0       	ldi	r22, 0x07	; 7
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
	
	/*R/W = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RW_PIN , DIO_u8_LOW);			//Depending on which port and which pin we used for R/W pin, we set the values of PORT & PIN in config file
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	66 e0       	ldi	r22, 0x06	; 6
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
	
	/*Write cmnd*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd);								//Depending on which port we used for pins D0 - D7, we set the values of PORT in config file
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	69 8d       	ldd	r22, Y+25	; 0x19
    23d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <DIO_u8SetPortValue>
	
	/*E = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_HIGH);			//Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e8       	ldi	r26, 0x80	; 128
    23e6:	bf e3       	ldi	r27, 0x3F	; 63
    23e8:	8d 8b       	std	Y+21, r24	; 0x15
    23ea:	9e 8b       	std	Y+22, r25	; 0x16
    23ec:	af 8b       	std	Y+23, r26	; 0x17
    23ee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23f0:	6d 89       	ldd	r22, Y+21	; 0x15
    23f2:	7e 89       	ldd	r23, Y+22	; 0x16
    23f4:	8f 89       	ldd	r24, Y+23	; 0x17
    23f6:	98 8d       	ldd	r25, Y+24	; 0x18
    23f8:	2b ea       	ldi	r18, 0xAB	; 171
    23fa:	3a ea       	ldi	r19, 0xAA	; 170
    23fc:	4a e2       	ldi	r20, 0x2A	; 42
    23fe:	50 e4       	ldi	r21, 0x40	; 64
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	89 8b       	std	Y+17, r24	; 0x11
    240a:	9a 8b       	std	Y+18, r25	; 0x12
    240c:	ab 8b       	std	Y+19, r26	; 0x13
    240e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2410:	69 89       	ldd	r22, Y+17	; 0x11
    2412:	7a 89       	ldd	r23, Y+18	; 0x12
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	1c f4       	brge	.+6      	; 0x242e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	88 8b       	std	Y+16, r24	; 0x10
    242c:	91 c0       	rjmp	.+290    	; 0x2550 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    242e:	69 89       	ldd	r22, Y+17	; 0x11
    2430:	7a 89       	ldd	r23, Y+18	; 0x12
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	53 e4       	ldi	r21, 0x43	; 67
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	0c f0       	brlt	.+2      	; 0x2448 <LCD_voidSendCmnd+0xa4>
    2446:	7b c0       	rjmp	.+246    	; 0x253e <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8c 87       	std	Y+12, r24	; 0x0c
    2462:	9d 87       	std	Y+13, r25	; 0x0d
    2464:	ae 87       	std	Y+14, r26	; 0x0e
    2466:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6c 85       	ldd	r22, Y+12	; 0x0c
    246a:	7d 85       	ldd	r23, Y+13	; 0x0d
    246c:	8e 85       	ldd	r24, Y+14	; 0x0e
    246e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a ef       	ldi	r20, 0xFA	; 250
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	88 87       	std	Y+8, r24	; 0x08
    2482:	99 87       	std	Y+9, r25	; 0x09
    2484:	aa 87       	std	Y+10, r26	; 0x0a
    2486:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2488:	68 85       	ldd	r22, Y+8	; 0x08
    248a:	79 85       	ldd	r23, Y+9	; 0x09
    248c:	8a 85       	ldd	r24, Y+10	; 0x0a
    248e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    24aa:	68 85       	ldd	r22, Y+8	; 0x08
    24ac:	79 85       	ldd	r23, Y+9	; 0x09
    24ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    24c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9f 83       	std	Y+7, r25	; 0x07
    24e8:	8e 83       	std	Y+6, r24	; 0x06
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_voidSendCmnd+0x166>
    24ec:	88 ec       	ldi	r24, 0xC8	; 200
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9d 83       	std	Y+5, r25	; 0x05
    24f2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f4:	8c 81       	ldd	r24, Y+4	; 0x04
    24f6:	9d 81       	ldd	r25, Y+5	; 0x05
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_voidSendCmnd+0x154>
    24fc:	9d 83       	std	Y+5, r25	; 0x05
    24fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	9f 81       	ldd	r25, Y+7	; 0x07
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9f 83       	std	Y+7, r25	; 0x07
    2508:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8e 81       	ldd	r24, Y+6	; 0x06
    250c:	9f 81       	ldd	r25, Y+7	; 0x07
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_voidSendCmnd+0x148>
    2512:	24 c0       	rjmp	.+72     	; 0x255c <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	68 85       	ldd	r22, Y+8	; 0x08
    2516:	79 85       	ldd	r23, Y+9	; 0x09
    2518:	8a 85       	ldd	r24, Y+10	; 0x0a
    251a:	9b 85       	ldd	r25, Y+11	; 0x0b
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9f 83       	std	Y+7, r25	; 0x07
    2526:	8e 83       	std	Y+6, r24	; 0x06
    2528:	8e 81       	ldd	r24, Y+6	; 0x06
    252a:	9f 81       	ldd	r25, Y+7	; 0x07
    252c:	9b 83       	std	Y+3, r25	; 0x03
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	9b 81       	ldd	r25, Y+3	; 0x03
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_voidSendCmnd+0x190>
    2538:	9b 83       	std	Y+3, r25	; 0x03
    253a:	8a 83       	std	Y+2, r24	; 0x02
    253c:	0f c0       	rjmp	.+30     	; 0x255c <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    253e:	69 89       	ldd	r22, Y+17	; 0x11
    2540:	7a 89       	ldd	r23, Y+18	; 0x12
    2542:	8b 89       	ldd	r24, Y+19	; 0x13
    2544:	9c 89       	ldd	r25, Y+20	; 0x14
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	88 8b       	std	Y+16, r24	; 0x10
    2550:	88 89       	ldd	r24, Y+16	; 0x10
    2552:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	8a 95       	dec	r24
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_voidSendCmnd+0x1b2>
    255a:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_us(1);		///From LCD data sheet, E pulse width tw --> min = 230ns -->we can't use 0.23us(no fractions)
	
	/*E = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_LOW);				//Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
}
    2566:	69 96       	adiw	r28, 0x19	; 25
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <LCD_voidSendChar>:

/*************************************************************************************/

void LCD_voidSendChar(u8 Copy_u8Char)
/**Function used to send char to the LCD**/
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	69 97       	sbiw	r28, 0x19	; 25
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	89 8f       	std	Y+25, r24	; 0x19
	/*RS = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RS_PIN , DIO_u8_HIGH);		    //Depending on which port and which pin we used for RS pin, we set the values of PORT & PIN in config file
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	67 e0       	ldi	r22, 0x07	; 7
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
    
    /*R/W = 0*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RW_PIN , DIO_u8_LOW);		    //Depending on which port and which pin we used for R/W pin, we set the values of PORT & PIN in config file
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	66 e0       	ldi	r22, 0x06	; 6
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
    
    /*Write char*/
    DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char);							    //Takes the ASCII code of the char (by placing the char between '') and it looks up the equivalent address to that in the CGROM
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	69 8d       	ldd	r22, Y+25	; 0x19
    25a6:	0e 94 c2 09 	call	0x1384	; 0x1384 <DIO_u8SetPortValue>
    
    /*E = 1*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_HIGH);		    //Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	65 e0       	ldi	r22, 0x05	; 5
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e8       	ldi	r26, 0x80	; 128
    25ba:	bf e3       	ldi	r27, 0x3F	; 63
    25bc:	8d 8b       	std	Y+21, r24	; 0x15
    25be:	9e 8b       	std	Y+22, r25	; 0x16
    25c0:	af 8b       	std	Y+23, r26	; 0x17
    25c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25c4:	6d 89       	ldd	r22, Y+21	; 0x15
    25c6:	7e 89       	ldd	r23, Y+22	; 0x16
    25c8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ca:	98 8d       	ldd	r25, Y+24	; 0x18
    25cc:	2b ea       	ldi	r18, 0xAB	; 171
    25ce:	3a ea       	ldi	r19, 0xAA	; 170
    25d0:	4a e2       	ldi	r20, 0x2A	; 42
    25d2:	50 e4       	ldi	r21, 0x40	; 64
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	89 8b       	std	Y+17, r24	; 0x11
    25de:	9a 8b       	std	Y+18, r25	; 0x12
    25e0:	ab 8b       	std	Y+19, r26	; 0x13
    25e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25e4:	69 89       	ldd	r22, Y+17	; 0x11
    25e6:	7a 89       	ldd	r23, Y+18	; 0x12
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	1c f4       	brge	.+6      	; 0x2602 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	88 8b       	std	Y+16, r24	; 0x10
    2600:	91 c0       	rjmp	.+290    	; 0x2724 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2602:	69 89       	ldd	r22, Y+17	; 0x11
    2604:	7a 89       	ldd	r23, Y+18	; 0x12
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	53 e4       	ldi	r21, 0x43	; 67
    2612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	0c f0       	brlt	.+2      	; 0x261c <LCD_voidSendChar+0xa4>
    261a:	7b c0       	rjmp	.+246    	; 0x2712 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a e7       	ldi	r20, 0x7A	; 122
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8c 87       	std	Y+12, r24	; 0x0c
    2636:	9d 87       	std	Y+13, r25	; 0x0d
    2638:	ae 87       	std	Y+14, r26	; 0x0e
    263a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	6c 85       	ldd	r22, Y+12	; 0x0c
    263e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2640:	8e 85       	ldd	r24, Y+14	; 0x0e
    2642:	9f 85       	ldd	r25, Y+15	; 0x0f
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a ef       	ldi	r20, 0xFA	; 250
    264a:	54 e4       	ldi	r21, 0x44	; 68
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	88 87       	std	Y+8, r24	; 0x08
    2656:	99 87       	std	Y+9, r25	; 0x09
    2658:	aa 87       	std	Y+10, r26	; 0x0a
    265a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    265c:	68 85       	ldd	r22, Y+8	; 0x08
    265e:	79 85       	ldd	r23, Y+9	; 0x09
    2660:	8a 85       	ldd	r24, Y+10	; 0x0a
    2662:	9b 85       	ldd	r25, Y+11	; 0x0b
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	5f e3       	ldi	r21, 0x3F	; 63
    266c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	2c f4       	brge	.+10     	; 0x267e <LCD_voidSendChar+0x106>
		__ticks = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9f 83       	std	Y+7, r25	; 0x07
    267a:	8e 83       	std	Y+6, r24	; 0x06
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    267e:	68 85       	ldd	r22, Y+8	; 0x08
    2680:	79 85       	ldd	r23, Y+9	; 0x09
    2682:	8a 85       	ldd	r24, Y+10	; 0x0a
    2684:	9b 85       	ldd	r25, Y+11	; 0x0b
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	4c f5       	brge	.+82     	; 0x26e8 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	6c 85       	ldd	r22, Y+12	; 0x0c
    2698:	7d 85       	ldd	r23, Y+13	; 0x0d
    269a:	8e 85       	ldd	r24, Y+14	; 0x0e
    269c:	9f 85       	ldd	r25, Y+15	; 0x0f
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9f 83       	std	Y+7, r25	; 0x07
    26bc:	8e 83       	std	Y+6, r24	; 0x06
    26be:	0f c0       	rjmp	.+30     	; 0x26de <LCD_voidSendChar+0x166>
    26c0:	88 ec       	ldi	r24, 0xC8	; 200
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9d 83       	std	Y+5, r25	; 0x05
    26c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	9d 81       	ldd	r25, Y+5	; 0x05
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_voidSendChar+0x154>
    26d0:	9d 83       	std	Y+5, r25	; 0x05
    26d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8e 81       	ldd	r24, Y+6	; 0x06
    26d6:	9f 81       	ldd	r25, Y+7	; 0x07
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9f 83       	std	Y+7, r25	; 0x07
    26dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <LCD_voidSendChar+0x148>
    26e6:	24 c0       	rjmp	.+72     	; 0x2730 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	68 85       	ldd	r22, Y+8	; 0x08
    26ea:	79 85       	ldd	r23, Y+9	; 0x09
    26ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9f 83       	std	Y+7, r25	; 0x07
    26fa:	8e 83       	std	Y+6, r24	; 0x06
    26fc:	8e 81       	ldd	r24, Y+6	; 0x06
    26fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2700:	9b 83       	std	Y+3, r25	; 0x03
    2702:	8a 83       	std	Y+2, r24	; 0x02
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_voidSendChar+0x190>
    270c:	9b 83       	std	Y+3, r25	; 0x03
    270e:	8a 83       	std	Y+2, r24	; 0x02
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2712:	69 89       	ldd	r22, Y+17	; 0x11
    2714:	7a 89       	ldd	r23, Y+18	; 0x12
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	88 8b       	std	Y+16, r24	; 0x10
    2724:	88 89       	ldd	r24, Y+16	; 0x10
    2726:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	8a 95       	dec	r24
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_voidSendChar+0x1b2>
    272e:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_us(1);		///From LCD data sheet, E pulse width tw --> min = 230ns -->we can't use 0.23us(no fractions)		
    
    /*E = 0*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_LOW);	            //Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	65 e0       	ldi	r22, 0x05	; 5
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
} 	
    273a:	69 96       	adiw	r28, 0x19	; 25
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <LCD_voidSendString>:

/*************************************************************************************/

void LCD_voidSendString(u8 * Copy_pu8String)
/**Function used to send string to the LCD**/
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <LCD_voidSendString+0x6>
    2752:	0f 92       	push	r0
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; (*(Copy_pu8String+i))!='\0' ; i++)
    275c:	19 82       	std	Y+1, r1	; 0x01
    275e:	0e c0       	rjmp	.+28     	; 0x277c <LCD_voidSendString+0x30>
	{
		LCD_voidSendChar(*(Copy_pu8String+i));
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
/*************************************************************************************/

void LCD_voidSendString(u8 * Copy_pu8String)
/**Function used to send string to the LCD**/
{
	for(u8 i=0 ; (*(Copy_pu8String+i))!='\0' ; i++)
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	9b 81       	ldd	r25, Y+3	; 0x03
    2786:	fc 01       	movw	r30, r24
    2788:	e2 0f       	add	r30, r18
    278a:	f3 1f       	adc	r31, r19
    278c:	80 81       	ld	r24, Z
    278e:	88 23       	and	r24, r24
    2790:	39 f7       	brne	.-50     	; 0x2760 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(*(Copy_pu8String+i));
	}
} 
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <LCD_voidSendNum>:

/*************************************************************************************/

void LCD_voidSendNum(u32 Copy_u32Num)
/**Function used to send number to the LCD**/
{
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	e9 97       	sbiw	r28, 0x39	; 57
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	6e ab       	std	Y+54, r22	; 0x36
    27bc:	7f ab       	std	Y+55, r23	; 0x37
    27be:	88 af       	std	Y+56, r24	; 0x38
    27c0:	99 af       	std	Y+57, r25	; 0x39
	u32 Local_u32Divider = 10;		//u32 Local Variable - Used to get the digits of the number by finding the remainder on it
    27c2:	8a e0       	ldi	r24, 0x0A	; 10
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e0       	ldi	r26, 0x00	; 0
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	8a 87       	std	Y+10, r24	; 0x0a
    27cc:	9b 87       	std	Y+11, r25	; 0x0b
    27ce:	ac 87       	std	Y+12, r26	; 0x0c
    27d0:	bd 87       	std	Y+13, r27	; 0x0d
	u32 Local_u32Remainder ;		//u32 Local Variable - Used to get the remainder 
	u32 Local_u32Digit;				//u32 Local Variable - Used to hold the digits of the number
	
	u32 Local_u32DigitArr[10];		//u32 Local Array - Used to store the digits of the number
	u8 Local_u8_Counteri =1;		//u8 Local Variable - Used as a counter
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u32Num == 0)
    27d6:	8e a9       	ldd	r24, Y+54	; 0x36
    27d8:	9f a9       	ldd	r25, Y+55	; 0x37
    27da:	a8 ad       	ldd	r26, Y+56	; 0x38
    27dc:	b9 ad       	ldd	r27, Y+57	; 0x39
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	a1 05       	cpc	r26, r1
    27e2:	b1 05       	cpc	r27, r1
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <LCD_voidSendNum+0x4a>
    27e6:	73 c0       	rjmp	.+230    	; 0x28ce <LCD_voidSendNum+0x130>
	{
		LCD_voidSendChar(48);
    27e8:	80 e3       	ldi	r24, 0x30	; 48
    27ea:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
    27ee:	6f c0       	rjmp	.+222    	; 0x28ce <LCD_voidSendNum+0x130>
	}
	
	while(Copy_u32Num != 0)
	{
		Local_u32Remainder = Copy_u32Num % Local_u32Divider;			//The remainder is calculated for the multiples of ten tell the biggest digit
    27f0:	8e a9       	ldd	r24, Y+54	; 0x36
    27f2:	9f a9       	ldd	r25, Y+55	; 0x37
    27f4:	a8 ad       	ldd	r26, Y+56	; 0x38
    27f6:	b9 ad       	ldd	r27, Y+57	; 0x39
    27f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    27fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    27fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    27fe:	5d 85       	ldd	r21, Y+13	; 0x0d
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 29 25 	call	0x4a52	; 0x4a52 <__udivmodsi4>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8e 83       	std	Y+6, r24	; 0x06
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	a8 87       	std	Y+8, r26	; 0x08
    2812:	b9 87       	std	Y+9, r27	; 0x09
		Local_u32Digit = Local_u32Remainder/(Local_u32Divider/10);		//Finding each digit by dividing the resultant remainder by the divider/10
    2814:	8a 85       	ldd	r24, Y+10	; 0x0a
    2816:	9b 85       	ldd	r25, Y+11	; 0x0b
    2818:	ac 85       	ldd	r26, Y+12	; 0x0c
    281a:	bd 85       	ldd	r27, Y+13	; 0x0d
    281c:	2a e0       	ldi	r18, 0x0A	; 10
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 29 25 	call	0x4a52	; 0x4a52 <__udivmodsi4>
    282c:	da 01       	movw	r26, r20
    282e:	c9 01       	movw	r24, r18
    2830:	9c 01       	movw	r18, r24
    2832:	ad 01       	movw	r20, r26
    2834:	8e 81       	ldd	r24, Y+6	; 0x06
    2836:	9f 81       	ldd	r25, Y+7	; 0x07
    2838:	a8 85       	ldd	r26, Y+8	; 0x08
    283a:	b9 85       	ldd	r27, Y+9	; 0x09
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 29 25 	call	0x4a52	; 0x4a52 <__udivmodsi4>
    2844:	da 01       	movw	r26, r20
    2846:	c9 01       	movw	r24, r18
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	9b 83       	std	Y+3, r25	; 0x03
    284c:	ac 83       	std	Y+4, r26	; 0x04
    284e:	bd 83       	std	Y+5, r27	; 0x05
		
		Local_u32DigitArr[Local_u8_Counteri]= Local_u32Digit;			//Storing the digits in the array		
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	88 2f       	mov	r24, r24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 01       	movw	r18, r24
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	22 0f       	add	r18, r18
    285e:	33 1f       	adc	r19, r19
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	82 0f       	add	r24, r18
    2866:	93 1f       	adc	r25, r19
    2868:	fc 01       	movw	r30, r24
    286a:	3d 96       	adiw	r30, 0x0d	; 13
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	9b 81       	ldd	r25, Y+3	; 0x03
    2870:	ac 81       	ldd	r26, Y+4	; 0x04
    2872:	bd 81       	ldd	r27, Y+5	; 0x05
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8_Counteri++;
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	89 83       	std	Y+1, r24	; 0x01
		
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
    2882:	2e a9       	ldd	r18, Y+54	; 0x36
    2884:	3f a9       	ldd	r19, Y+55	; 0x37
    2886:	48 ad       	ldd	r20, Y+56	; 0x38
    2888:	59 ad       	ldd	r21, Y+57	; 0x39
    288a:	8e 81       	ldd	r24, Y+6	; 0x06
    288c:	9f 81       	ldd	r25, Y+7	; 0x07
    288e:	a8 85       	ldd	r26, Y+8	; 0x08
    2890:	b9 85       	ldd	r27, Y+9	; 0x09
    2892:	79 01       	movw	r14, r18
    2894:	8a 01       	movw	r16, r20
    2896:	e8 1a       	sub	r14, r24
    2898:	f9 0a       	sbc	r15, r25
    289a:	0a 0b       	sbc	r16, r26
    289c:	1b 0b       	sbc	r17, r27
    289e:	d8 01       	movw	r26, r16
    28a0:	c7 01       	movw	r24, r14
    28a2:	8e ab       	std	Y+54, r24	; 0x36
    28a4:	9f ab       	std	Y+55, r25	; 0x37
    28a6:	a8 af       	std	Y+56, r26	; 0x38
    28a8:	b9 af       	std	Y+57, r27	; 0x39
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
    28aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    28b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    28b2:	2a e0       	ldi	r18, 0x0A	; 10
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__mulsi3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8a 87       	std	Y+10, r24	; 0x0a
    28c8:	9b 87       	std	Y+11, r25	; 0x0b
    28ca:	ac 87       	std	Y+12, r26	; 0x0c
    28cc:	bd 87       	std	Y+13, r27	; 0x0d
	if(Copy_u32Num == 0)
	{
		LCD_voidSendChar(48);
	}
	
	while(Copy_u32Num != 0)
    28ce:	8e a9       	ldd	r24, Y+54	; 0x36
    28d0:	9f a9       	ldd	r25, Y+55	; 0x37
    28d2:	a8 ad       	ldd	r26, Y+56	; 0x38
    28d4:	b9 ad       	ldd	r27, Y+57	; 0x39
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	a1 05       	cpc	r26, r1
    28da:	b1 05       	cpc	r27, r1
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <LCD_voidSendNum+0x142>
    28de:	88 cf       	rjmp	.-240    	; 0x27f0 <LCD_voidSendNum+0x52>
		
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
	}
	
	Local_u8_Counteri--;
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	18 c0       	rjmp	.+48     	; 0x2918 <LCD_voidSendNum+0x17a>
	while(Local_u8_Counteri>0)											//Looping on the array to send the stored digits to the LCD
	{
		LCD_voidSendChar(Local_u32DigitArr[Local_u8_Counteri]+48);		//Sending the digits to LCD_voidSendChar() function. To calculate the ASCII for each digit we add the ASCII of zero = 48
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 01       	movw	r18, r24
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	ce 01       	movw	r24, r28
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	82 0f       	add	r24, r18
    28fe:	93 1f       	adc	r25, r19
    2900:	fc 01       	movw	r30, r24
    2902:	3d 96       	adiw	r30, 0x0d	; 13
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	a2 81       	ldd	r26, Z+2	; 0x02
    290a:	b3 81       	ldd	r27, Z+3	; 0x03
    290c:	80 5d       	subi	r24, 0xD0	; 208
    290e:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
		Local_u8_Counteri--;
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	81 50       	subi	r24, 0x01	; 1
    2916:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
	}
	
	Local_u8_Counteri--;
	while(Local_u8_Counteri>0)											//Looping on the array to send the stored digits to the LCD
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	88 23       	and	r24, r24
    291c:	29 f7       	brne	.-54     	; 0x28e8 <LCD_voidSendNum+0x14a>
	{
		LCD_voidSendChar(Local_u32DigitArr[Local_u8_Counteri]+48);		//Sending the digits to LCD_voidSendChar() function. To calculate the ASCII for each digit we add the ASCII of zero = 48
		Local_u8_Counteri--;
	}

}	
    291e:	e9 96       	adiw	r28, 0x39	; 57
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	ef 90       	pop	r14
    2936:	08 95       	ret

00002938 <LCD_u8GoToXY>:

/*************************************************************************************/

u8 LCD_u8GoToXY(u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <LCD_u8GoToXY+0x6>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <LCD_u8GoToXY+0x8>
    2940:	0f 92       	push	r0
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	8a 83       	std	Y+2, r24	; 0x02
    2948:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)							//Because each line has 40 characters available (0 - 40)
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	88 32       	cpi	r24, 0x28	; 40
    2952:	e0 f4       	brcc	.+56     	; 0x298c <LCD_u8GoToXY+0x54>
	{
		switch(Copy_u8LineNum)
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	3d 83       	std	Y+5, r19	; 0x05
    295c:	2c 83       	std	Y+4, r18	; 0x04
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	9d 81       	ldd	r25, Y+5	; 0x05
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	91 05       	cpc	r25, r1
    2966:	31 f0       	breq	.+12     	; 0x2974 <LCD_u8GoToXY+0x3c>
    2968:	2c 81       	ldd	r18, Y+4	; 0x04
    296a:	3d 81       	ldd	r19, Y+5	; 0x05
    296c:	22 30       	cpi	r18, 0x02	; 2
    296e:	31 05       	cpc	r19, r1
    2970:	31 f0       	breq	.+12     	; 0x297e <LCD_u8GoToXY+0x46>
    2972:	0a c0       	rjmp	.+20     	; 0x2988 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_ONE: LCD_voidSendCmnd(0x80 + Copy_u8Location);break;		//As the first line starts from address 0x80H --> 0b1 0000000
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	80 58       	subi	r24, 0x80	; 128
    2978:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    297c:	08 c0       	rjmp	.+16     	; 0x298e <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_TWO: LCD_voidSendCmnd(0xC0 + Copy_u8Location);break;		//As the second line starts from address 0xC0H --> 0b1 0000000 + 64(decimal) = 0b1 1000000
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	80 54       	subi	r24, 0x40	; 64
    2982:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    2986:	03 c0       	rjmp	.+6      	; 0x298e <LCD_u8GoToXY+0x56>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;			//In case of wrong line number
    2988:	19 82       	std	Y+1, r1	; 0x01
    298a:	01 c0       	rjmp	.+2      	; 0x298e <LCD_u8GoToXY+0x56>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;				//In case of wrong line location
    298c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
}									
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <LCD_voidClearScreen>:

/*************************************************************************************/

void LCD_voidClearScreen(void)
/**Function used to crear the display screen**/
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	2e 97       	sbiw	r28, 0x0e	; 14
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a0 e0       	ldi	r26, 0x00	; 0
    29c0:	b0 e4       	ldi	r27, 0x40	; 64
    29c2:	8b 87       	std	Y+11, r24	; 0x0b
    29c4:	9c 87       	std	Y+12, r25	; 0x0c
    29c6:	ad 87       	std	Y+13, r26	; 0x0d
    29c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    29cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a ef       	ldi	r20, 0xFA	; 250
    29d8:	54 e4       	ldi	r21, 0x44	; 68
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8f 83       	std	Y+7, r24	; 0x07
    29e4:	98 87       	std	Y+8, r25	; 0x08
    29e6:	a9 87       	std	Y+9, r26	; 0x09
    29e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	4c f5       	brge	.+82     	; 0x2a76 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e2       	ldi	r20, 0x20	; 32
    2a32:	51 e4       	ldi	r21, 0x41	; 65
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <LCD_voidClearScreen+0xcc>
    2a4e:	88 ec       	ldi	r24, 0xC8	; 200
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_voidClearScreen+0xba>
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <LCD_voidClearScreen+0xae>
    2a74:	14 c0       	rjmp	.+40     	; 0x2a9e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <LCD_voidClearScreen+0xf6>
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	//Wait more than 1.53ms
	_delay_ms(2);
}
    2a9e:	2e 96       	adiw	r28, 0x0e	; 14
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <LCD_u8CreateSpecialChar>:

/*************************************************************************************/

u8 LCD_u8CreateSpecialChar(u8 Copy_u8SpecialCharNum , u8 * Copy_pu8Pattern)
/**Function used to create a new special character**/
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	8a 87       	std	Y+10, r24	; 0x0a
    2ac6:	7c 87       	std	Y+12, r23	; 0x0c
    2ac8:	6b 87       	std	Y+11, r22	; 0x0b
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	89 87       	std	Y+9, r24	; 0x09
	if(Copy_u8SpecialCharNum <= 7)
    2ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad0:	88 30       	cpi	r24, 0x08	; 8
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <LCD_u8CreateSpecialChar+0x26>
    2ad4:	f1 c0       	rjmp	.+482    	; 0x2cb8 <LCD_u8CreateSpecialChar+0x208>
	{	
		switch(Copy_u8SpecialCharNum)
    2ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	3e 87       	std	Y+14, r19	; 0x0e
    2ade:	2d 87       	std	Y+13, r18	; 0x0d
    2ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae4:	83 30       	cpi	r24, 0x03	; 3
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <LCD_u8CreateSpecialChar+0x3c>
    2aea:	73 c0       	rjmp	.+230    	; 0x2bd2 <LCD_u8CreateSpecialChar+0x122>
    2aec:	2d 85       	ldd	r18, Y+13	; 0x0d
    2aee:	3e 85       	ldd	r19, Y+14	; 0x0e
    2af0:	24 30       	cpi	r18, 0x04	; 4
    2af2:	31 05       	cpc	r19, r1
    2af4:	84 f4       	brge	.+32     	; 0x2b16 <LCD_u8CreateSpecialChar+0x66>
    2af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	d9 f1       	breq	.+118    	; 0x2b76 <LCD_u8CreateSpecialChar+0xc6>
    2b00:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b02:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <LCD_u8CreateSpecialChar+0x5c>
    2b0a:	4c c0       	rjmp	.+152    	; 0x2ba4 <LCD_u8CreateSpecialChar+0xf4>
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	d1 f0       	breq	.+52     	; 0x2b48 <LCD_u8CreateSpecialChar+0x98>
    2b14:	d2 c0       	rjmp	.+420    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
    2b16:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b18:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b1a:	25 30       	cpi	r18, 0x05	; 5
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <LCD_u8CreateSpecialChar+0x72>
    2b20:	86 c0       	rjmp	.+268    	; 0x2c2e <LCD_u8CreateSpecialChar+0x17e>
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	85 30       	cpi	r24, 0x05	; 5
    2b28:	91 05       	cpc	r25, r1
    2b2a:	0c f4       	brge	.+2      	; 0x2b2e <LCD_u8CreateSpecialChar+0x7e>
    2b2c:	69 c0       	rjmp	.+210    	; 0x2c00 <LCD_u8CreateSpecialChar+0x150>
    2b2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b30:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b32:	26 30       	cpi	r18, 0x06	; 6
    2b34:	31 05       	cpc	r19, r1
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <LCD_u8CreateSpecialChar+0x8a>
    2b38:	91 c0       	rjmp	.+290    	; 0x2c5c <LCD_u8CreateSpecialChar+0x1ac>
    2b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3e:	87 30       	cpi	r24, 0x07	; 7
    2b40:	91 05       	cpc	r25, r1
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <LCD_u8CreateSpecialChar+0x96>
    2b44:	a2 c0       	rjmp	.+324    	; 0x2c8a <LCD_u8CreateSpecialChar+0x1da>
    2b46:	b9 c0       	rjmp	.+370    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
		{
			case LCD_u8_SPECIAL_CHAR0:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR0_Address);		//Set CGRAM Address to write the character
    2b48:	80 e4       	ldi	r24, 0x40	; 64
    2b4a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2b4e:	18 86       	std	Y+8, r1	; 0x08
    2b50:	0e c0       	rjmp	.+28     	; 0x2b6e <LCD_u8CreateSpecialChar+0xbe>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2b52:	88 85       	ldd	r24, Y+8	; 0x08
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	e2 0f       	add	r30, r18
    2b60:	f3 1f       	adc	r31, r19
    2b62:	80 81       	ld	r24, Z
    2b64:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	{	
		switch(Copy_u8SpecialCharNum)
		{
			case LCD_u8_SPECIAL_CHAR0:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR0_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2b68:	88 85       	ldd	r24, Y+8	; 0x08
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	88 87       	std	Y+8, r24	; 0x08
    2b6e:	88 85       	ldd	r24, Y+8	; 0x08
    2b70:	88 30       	cpi	r24, 0x08	; 8
    2b72:	78 f3       	brcs	.-34     	; 0x2b52 <LCD_u8CreateSpecialChar+0xa2>
    2b74:	a2 c0       	rjmp	.+324    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR1:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR1_Address);		//Set CGRAM Address to write the character
    2b76:	88 e4       	ldi	r24, 0x48	; 72
    2b78:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2b7c:	1f 82       	std	Y+7, r1	; 0x07
    2b7e:	0e c0       	rjmp	.+28     	; 0x2b9c <LCD_u8CreateSpecialChar+0xec>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b88:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e2 0f       	add	r30, r18
    2b8e:	f3 1f       	adc	r31, r19
    2b90:	80 81       	ld	r24, Z
    2b92:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR1:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR1_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2b96:	8f 81       	ldd	r24, Y+7	; 0x07
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	8f 83       	std	Y+7, r24	; 0x07
    2b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9e:	88 30       	cpi	r24, 0x08	; 8
    2ba0:	78 f3       	brcs	.-34     	; 0x2b80 <LCD_u8CreateSpecialChar+0xd0>
    2ba2:	8b c0       	rjmp	.+278    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR2:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR2_Address);		//Set CGRAM Address to write the character
    2ba4:	80 e5       	ldi	r24, 0x50	; 80
    2ba6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2baa:	1e 82       	std	Y+6, r1	; 0x06
    2bac:	0e c0       	rjmp	.+28     	; 0x2bca <LCD_u8CreateSpecialChar+0x11a>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2bae:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bb8:	fc 01       	movw	r30, r24
    2bba:	e2 0f       	add	r30, r18
    2bbc:	f3 1f       	adc	r31, r19
    2bbe:	80 81       	ld	r24, Z
    2bc0:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR2:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR2_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	8e 83       	std	Y+6, r24	; 0x06
    2bca:	8e 81       	ldd	r24, Y+6	; 0x06
    2bcc:	88 30       	cpi	r24, 0x08	; 8
    2bce:	78 f3       	brcs	.-34     	; 0x2bae <LCD_u8CreateSpecialChar+0xfe>
    2bd0:	74 c0       	rjmp	.+232    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR3:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR3_Address);		//Set CGRAM Address to write the character
    2bd2:	88 e5       	ldi	r24, 0x58	; 88
    2bd4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2bd8:	1d 82       	std	Y+5, r1	; 0x05
    2bda:	0e c0       	rjmp	.+28     	; 0x2bf8 <LCD_u8CreateSpecialChar+0x148>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2be6:	fc 01       	movw	r30, r24
    2be8:	e2 0f       	add	r30, r18
    2bea:	f3 1f       	adc	r31, r19
    2bec:	80 81       	ld	r24, Z
    2bee:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR3:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR3_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	88 30       	cpi	r24, 0x08	; 8
    2bfc:	78 f3       	brcs	.-34     	; 0x2bdc <LCD_u8CreateSpecialChar+0x12c>
    2bfe:	5d c0       	rjmp	.+186    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR4:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR4_Address);		//Set CGRAM Address to write the character
    2c00:	80 e6       	ldi	r24, 0x60	; 96
    2c02:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2c06:	1c 82       	std	Y+4, r1	; 0x04
    2c08:	0e c0       	rjmp	.+28     	; 0x2c26 <LCD_u8CreateSpecialChar+0x176>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c14:	fc 01       	movw	r30, r24
    2c16:	e2 0f       	add	r30, r18
    2c18:	f3 1f       	adc	r31, r19
    2c1a:	80 81       	ld	r24, Z
    2c1c:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR4:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR4_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	8f 5f       	subi	r24, 0xFF	; 255
    2c24:	8c 83       	std	Y+4, r24	; 0x04
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	88 30       	cpi	r24, 0x08	; 8
    2c2a:	78 f3       	brcs	.-34     	; 0x2c0a <LCD_u8CreateSpecialChar+0x15a>
    2c2c:	46 c0       	rjmp	.+140    	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR5:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR5_Address);		//Set CGRAM Address to write the character
    2c2e:	88 e6       	ldi	r24, 0x68	; 104
    2c30:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2c34:	1b 82       	std	Y+3, r1	; 0x03
    2c36:	0e c0       	rjmp	.+28     	; 0x2c54 <LCD_u8CreateSpecialChar+0x1a4>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c40:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c42:	fc 01       	movw	r30, r24
    2c44:	e2 0f       	add	r30, r18
    2c46:	f3 1f       	adc	r31, r19
    2c48:	80 81       	ld	r24, Z
    2c4a:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR5:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR5_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	8f 5f       	subi	r24, 0xFF	; 255
    2c52:	8b 83       	std	Y+3, r24	; 0x03
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	88 30       	cpi	r24, 0x08	; 8
    2c58:	78 f3       	brcs	.-34     	; 0x2c38 <LCD_u8CreateSpecialChar+0x188>
    2c5a:	2f c0       	rjmp	.+94     	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR6:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR6_Address);		//Set CGRAM Address to write the character
    2c5c:	80 e7       	ldi	r24, 0x70	; 112
    2c5e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2c62:	1a 82       	std	Y+2, r1	; 0x02
    2c64:	0e c0       	rjmp	.+28     	; 0x2c82 <LCD_u8CreateSpecialChar+0x1d2>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c70:	fc 01       	movw	r30, r24
    2c72:	e2 0f       	add	r30, r18
    2c74:	f3 1f       	adc	r31, r19
    2c76:	80 81       	ld	r24, Z
    2c78:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR6:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR6_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 30       	cpi	r24, 0x08	; 8
    2c86:	78 f3       	brcs	.-34     	; 0x2c66 <LCD_u8CreateSpecialChar+0x1b6>
    2c88:	18 c0       	rjmp	.+48     	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR7:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR7_Address);		//Set CGRAM Address to write the character
    2c8a:	88 e7       	ldi	r24, 0x78	; 120
    2c8c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2c90:	19 82       	std	Y+1, r1	; 0x01
    2c92:	0e c0       	rjmp	.+28     	; 0x2cb0 <LCD_u8CreateSpecialChar+0x200>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	80 81       	ld	r24, Z
    2ca6:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR7:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR7_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	88 30       	cpi	r24, 0x08	; 8
    2cb4:	78 f3       	brcs	.-34     	; 0x2c94 <LCD_u8CreateSpecialChar+0x1e4>
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <LCD_u8CreateSpecialChar+0x20a>

	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2cb8:	19 86       	std	Y+9, r1	; 0x09
	}

	return Local_u8ErrorState;
    2cba:	89 85       	ldd	r24, Y+9	; 0x09
}
    2cbc:	2e 96       	adiw	r28, 0x0e	; 14
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LCD_u8SendSpecialChar>:

/*************************************************************************************/

u8 LCD_u8SendSpecialChar(u8 Copy_u8SpecialCharNum , u8 Copy_u8LineNum , u8 Copy_u8Location)
/**Function used to send a special character to the LCD**/
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <LCD_u8SendSpecialChar+0x6>
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <LCD_u8SendSpecialChar+0x8>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	8a 83       	std	Y+2, r24	; 0x02
    2cdc:	6b 83       	std	Y+3, r22	; 0x03
    2cde:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SpecialCharNum <= 7 && ((Copy_u8LineNum == 1) || (Copy_u8LineNum == 2)) && Copy_u8Location <= 39)
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	88 30       	cpi	r24, 0x08	; 8
    2ce8:	88 f4       	brcc	.+34     	; 0x2d0c <LCD_u8SendSpecialChar+0x3e>
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	19 f0       	breq	.+6      	; 0x2cf6 <LCD_u8SendSpecialChar+0x28>
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	82 30       	cpi	r24, 0x02	; 2
    2cf4:	59 f4       	brne	.+22     	; 0x2d0c <LCD_u8SendSpecialChar+0x3e>
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	88 32       	cpi	r24, 0x28	; 40
    2cfa:	40 f4       	brcc	.+16     	; 0x2d0c <LCD_u8SendSpecialChar+0x3e>
	{
		LCD_u8GoToXY(Copy_u8LineNum , Copy_u8Location);
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	6c 81       	ldd	r22, Y+4	; 0x04
    2d00:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8SpecialCharNum);
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <LCD_u8SendSpecialChar+0x40>
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2d0c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <LCD_u8_MoveCursor>:

/*************************************************************************************/

void	LCD_u8_MoveCursor(u8 Copy_MovingDirection)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_MovingDirection == LCD_u8MoveLeft)
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	88 23       	and	r24, r24
    2d2e:	21 f4       	brne	.+8      	; 0x2d38 <LCD_u8_MoveCursor+0x1a>
	{
		/*Move cursor left cmnd*/
		LCD_voidSendCmnd(0b00010000);
    2d30:	80 e1       	ldi	r24, 0x10	; 16
    2d32:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    2d36:	06 c0       	rjmp	.+12     	; 0x2d44 <LCD_u8_MoveCursor+0x26>
	}
	else if(Copy_MovingDirection == LCD_u8MoveRight)
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	19 f4       	brne	.+6      	; 0x2d44 <LCD_u8_MoveCursor+0x26>
	{
		/*Move cursor right cmnd*/
		LCD_voidSendCmnd(0b00010100);
    2d3e:	84 e1       	ldi	r24, 0x14	; 20
    2d40:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
	}
}
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <LCD_u8_MoveScreen>:

/*************************************************************************************/

void	LCD_u8_MoveScreen(u8 Copy_MovingDirection)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	0f 92       	push	r0
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_MovingDirection == LCD_u8MoveLeft)
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	88 23       	and	r24, r24
    2d5c:	21 f4       	brne	.+8      	; 0x2d66 <LCD_u8_MoveScreen+0x1a>
	{
		/*Move cursor left cmnd*/
		LCD_voidSendCmnd(0b00011000);
    2d5e:	88 e1       	ldi	r24, 0x18	; 24
    2d60:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <LCD_u8_MoveScreen+0x26>
	}
	else if(Copy_MovingDirection == LCD_u8MoveRight)
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	19 f4       	brne	.+6      	; 0x2d72 <LCD_u8_MoveScreen+0x26>
	{
		/*Move cursor right cmnd*/
		LCD_voidSendCmnd(0b00011100);
    2d6c:	8c e1       	ldi	r24, 0x1C	; 28
    2d6e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCmnd>
	}
}
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <LCD_voidGetAC_Location>:

/*************************************************************************************/

u8   LCD_voidGetAC_Location(u8 * Copy_u8ACValue)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <LCD_voidGetAC_Location+0x6>
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9b 83       	std	Y+3, r25	; 0x03
    2d88:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	//AC contents are output to D0 - D7 when RS = 0 and a read operation is performed

	if(Copy_u8ACValue != NULL)
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	9b 81       	ldd	r25, Y+3	; 0x03
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	79 f0       	breq	.+30     	; 0x2db4 <LCD_voidGetAC_Location+0x3a>
	{
		/*RS = 0*/
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RS_PIN , DIO_u8_LOW);
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	67 e0       	ldi	r22, 0x07	; 7
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>

		/*R/W = 1*/
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RW_PIN , DIO_u8_LOW);
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	66 e0       	ldi	r22, 0x06	; 6
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>

		/*Read AC value*/
		*Copy_u8ACValue = LCD_u8_DATA_PORT;
    2daa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dac:	fb 81       	ldd	r31, Y+3	; 0x03
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	80 83       	st	Z, r24
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <LCD_voidGetAC_Location+0x3c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2db4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <TIMER0_u8SetCallBack_OV>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_u8SetCallBack_OV(u16 Copy_u16CounterValue , void (*Copy_pf)(void))				//We've to make them only one Call back function
/**Call Back function for Normal Mode**/
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <TIMER0_u8SetCallBack_OV+0x6>
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <TIMER0_u8SetCallBack_OV+0x8>
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	9b 83       	std	Y+3, r25	; 0x03
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	7d 83       	std	Y+5, r23	; 0x05
    2dd8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2dde:	8c 81       	ldd	r24, Y+4	; 0x04
    2de0:	9d 81       	ldd	r25, Y+5	; 0x05
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f0       	breq	.+26     	; 0x2e00 <TIMER0_u8SetCallBack_OV+0x3c>
	{
		TIMER0_pfOV = Copy_pf;
    2de6:	8c 81       	ldd	r24, Y+4	; 0x04
    2de8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dea:	90 93 f5 00 	sts	0x00F5, r25
    2dee:	80 93 f4 00 	sts	0x00F4, r24
		TIMER0_u16OV_CounterValue = Copy_u16CounterValue;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	90 93 1e 01 	sts	0x011E, r25
    2dfa:	80 93 1d 01 	sts	0x011D, r24
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <TIMER0_u8SetCallBack_OV+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e00:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <TIMER0_u8SetCallBack_CTC>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_u8SetCallBack_CTC(u16 Copy_u16CounterValue , void (*Copy_pf)(void))
/**Call Back function for CTC Mode**/
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <TIMER0_u8SetCallBack_CTC+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <TIMER0_u8SetCallBack_CTC+0x8>
    2e1c:	0f 92       	push	r0
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	9b 83       	std	Y+3, r25	; 0x03
    2e24:	8a 83       	std	Y+2, r24	; 0x02
    2e26:	7d 83       	std	Y+5, r23	; 0x05
    2e28:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e30:	9d 81       	ldd	r25, Y+5	; 0x05
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f0       	breq	.+26     	; 0x2e50 <TIMER0_u8SetCallBack_CTC+0x3c>
	{
		TIMER0_pfCTC = Copy_pf;
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	90 93 f7 00 	sts	0x00F7, r25
    2e3e:	80 93 f6 00 	sts	0x00F6, r24
		TIMER0_u16CTC_CounterValue = Copy_u16CounterValue;
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	90 93 21 01 	sts	0x0121, r25
    2e4a:	80 93 20 01 	sts	0x0120, r24
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <TIMER0_u8SetCallBack_CTC+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e50:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <TIMER0_voidSetCompareMatchValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER0_voidSetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCR value*/
	TIMER0_u8_OCR0_REG = Copy_u8OCR0Value;
    2e70:	ec e5       	ldi	r30, 0x5C	; 92
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	80 83       	st	Z, r24
}
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <TIMER0_voidSetPReloadValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER0_voidSetPReloadValue(u8 Copy_u8PreloadValue)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	0f 92       	push	r0
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	89 83       	std	Y+1, r24	; 0x01
	/*Set preload value*/
	TIMER0_u8_TCNT0_REG = Copy_u8PreloadValue;
    2e8c:	e2 e5       	ldi	r30, 0x52	; 82
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	80 83       	st	Z, r24
	/*pass preolad value to OV ISR function*/
	TIMER0_u8PreloadValue = Copy_u8PreloadValue;
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	80 93 1f 01 	sts	0x011F, r24
}
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <TIMER0_u8GetCounterValue>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER0_u8GetCounterValue(u8 * Copy_pu8CounterValue)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <TIMER0_u8GetCounterValue+0x6>
    2ea8:	0f 92       	push	r0
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	9b 83       	std	Y+3, r25	; 0x03
    2eb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8CounterValue != NULL)
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	39 f0       	breq	.+14     	; 0x2ecc <TIMER0_u8GetCounterValue+0x2a>
	{
		*Copy_pu8CounterValue = TIMER0_u8_TCNT0_REG;
    2ebe:	e2 e5       	ldi	r30, 0x52	; 82
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec8:	80 83       	st	Z, r24
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <TIMER0_u8GetCounterValue+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ecc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <TIMER0_voidInit>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_voidInit(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	/*Wave Generation Mode Selection*/
	#if TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_NORMAL_MODE				//00
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM01_BIT);
    2eea:	a3 e5       	ldi	r26, 0x53	; 83
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e3 e5       	ldi	r30, 0x53	; 83
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	87 7f       	andi	r24, 0xF7	; 247
    2ef6:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM00_BIT);
    2ef8:	a3 e5       	ldi	r26, 0x53	; 83
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e3 e5       	ldi	r30, 0x53	; 83
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	8f 7b       	andi	r24, 0xBF	; 191
    2f04:	8c 93       	st	X, r24
	switch(TIMER0_u8_INITIAL_COMPARE_MATCH_MODE)
	{
		case TIMER0_u8_INITIAL_NON_PWM_NORMAL_PORT_OPERATION_DIS_OC0:
			if((TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_NORMAL_MODE) || (TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_CTC))
			{
				CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_COM01_BIT);
    2f06:	a3 e5       	ldi	r26, 0x53	; 83
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e3 e5       	ldi	r30, 0x53	; 83
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8f 7d       	andi	r24, 0xDF	; 223
    2f12:	8c 93       	st	X, r24
				CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_COM00_BIT);
    2f14:	a3 e5       	ldi	r26, 0x53	; 83
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e3 e5       	ldi	r30, 0x53	; 83
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	8f 7e       	andi	r24, 0xEF	; 239
    2f20:	8c 93       	st	X, r24
	}
	
	
	/*Interrupt Flag Selection*/
	#if  TIMER0_u8_INITIAL_INTERRUPT_FLAG == TIMER0_u8_INITIAL_OVERFLOW_FLAG
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_OCIE0_BIT);
    2f22:	a9 e5       	ldi	r26, 0x59	; 89
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e9 e5       	ldi	r30, 0x59	; 89
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8d 7f       	andi	r24, 0xFD	; 253
    2f2e:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_TOIE0_BIT);
    2f30:	a9 e5       	ldi	r26, 0x59	; 89
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e9 e5       	ldi	r30, 0x59	; 89
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	81 60       	ori	r24, 0x01	; 1
    2f3c:	8c 93       	st	X, r24
	#elif TIMER0_u8_INITIAL_CLOCK_SELECTION == TIMER0_u8_INITIAL_NO_PRESCALLING							//001
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);					
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);					
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);					
	#elif TIMER0_u8_INITIAL_CLOCK_SELECTION == TIMER0_u8_INITIAL_PRESCALER_8							//010
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);					
    2f3e:	a3 e5       	ldi	r26, 0x53	; 83
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e3 e5       	ldi	r30, 0x53	; 83
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	8b 7f       	andi	r24, 0xFB	; 251
    2f4a:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);					
    2f4c:	a3 e5       	ldi	r26, 0x53	; 83
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e3 e5       	ldi	r30, 0x53	; 83
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	82 60       	ori	r24, 0x02	; 2
    2f58:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);					
    2f5a:	a3 e5       	ldi	r26, 0x53	; 83
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e3 e5       	ldi	r30, 0x53	; 83
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8e 7f       	andi	r24, 0xFE	; 254
    2f66:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);
	#endif
	
	return Local_u8ErrorState;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6a:	0f 90       	pop	r0
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <TIMER0_voidStopTIMER0>:

///-------------------------------------------------------------------------------------------------------------------------
void TIMER0_voidStopTIMER0(void)
{
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
	/*Disable Timer interrupt*/
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_OCIE0_BIT);
    2f7a:	a9 e5       	ldi	r26, 0x59	; 89
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e9 e5       	ldi	r30, 0x59	; 89
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8d 7f       	andi	r24, 0xFD	; 253
    2f86:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_TOIE0_BIT);
    2f88:	a9 e5       	ldi	r26, 0x59	; 89
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e9 e5       	ldi	r30, 0x59	; 89
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8e 7f       	andi	r24, 0xFE	; 254
    2f94:	8c 93       	st	X, r24
}
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <TIMER0_voidEnableTIMER0>:

///-------------------------------------------------------------------------------------------------------------------------
void TIMER0_voidEnableTIMER0(void)
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
	/*Enable Timer interrupt OV*/
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_OCIE0_BIT);
    2fa4:	a9 e5       	ldi	r26, 0x59	; 89
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e9 e5       	ldi	r30, 0x59	; 89
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	8d 7f       	andi	r24, 0xFD	; 253
    2fb0:	8c 93       	st	X, r24
	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_TOIE0_BIT);
    2fb2:	a9 e5       	ldi	r26, 0x59	; 89
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e9 e5       	ldi	r30, 0x59	; 89
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	81 60       	ori	r24, 0x01	; 1
    2fbe:	8c 93       	st	X, r24
}
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <__vector_11>:

///-------------------------------------------------------------------------------------------------------------------------
/*Prototype for ISR function of Timer0 OV*/
void __vector_11(void)			__attribute__((signal));
void __vector_11(void)
{
    2fc6:	1f 92       	push	r1
    2fc8:	0f 92       	push	r0
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	0f 92       	push	r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	2f 93       	push	r18
    2fd2:	3f 93       	push	r19
    2fd4:	4f 93       	push	r20
    2fd6:	5f 93       	push	r21
    2fd8:	6f 93       	push	r22
    2fda:	7f 93       	push	r23
    2fdc:	8f 93       	push	r24
    2fde:	9f 93       	push	r25
    2fe0:	af 93       	push	r26
    2fe2:	bf 93       	push	r27
    2fe4:	ef 93       	push	r30
    2fe6:	ff 93       	push	r31
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    2ff0:	80 91 f8 00 	lds	r24, 0x00F8
    2ff4:	90 91 f9 00 	lds	r25, 0x00F9
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	90 93 f9 00 	sts	0x00F9, r25
    2ffe:	80 93 f8 00 	sts	0x00F8, r24
	if(Local_u16CounterOVF == TIMER0_u16OV_CounterValue)
    3002:	20 91 f8 00 	lds	r18, 0x00F8
    3006:	30 91 f9 00 	lds	r19, 0x00F9
    300a:	80 91 1d 01 	lds	r24, 0x011D
    300e:	90 91 1e 01 	lds	r25, 0x011E
    3012:	28 17       	cp	r18, r24
    3014:	39 07       	cpc	r19, r25
    3016:	a1 f4       	brne	.+40     	; 0x3040 <__vector_11+0x7a>
	{

		/*Update Preload Value*/
		TIMER0_u8_TCNT0_REG = TIMER0_u8PreloadValue;
    3018:	e2 e5       	ldi	r30, 0x52	; 82
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 91 1f 01 	lds	r24, 0x011F
    3020:	80 83       	st	Z, r24

		/*Update OV Counter*/
		Local_u16CounterOVF = 0;
    3022:	10 92 f9 00 	sts	0x00F9, r1
    3026:	10 92 f8 00 	sts	0x00F8, r1
		
		/*Call the application function*/
		if(TIMER0_pfOV != NULL)
    302a:	80 91 f4 00 	lds	r24, 0x00F4
    302e:	90 91 f5 00 	lds	r25, 0x00F5
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	29 f0       	breq	.+10     	; 0x3040 <__vector_11+0x7a>
		{
			/*Dereferencing of the pointer*/
			TIMER0_pfOV();
    3036:	e0 91 f4 00 	lds	r30, 0x00F4
    303a:	f0 91 f5 00 	lds	r31, 0x00F5
    303e:	09 95       	icall
		}
	}
}
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	ff 91       	pop	r31
    3046:	ef 91       	pop	r30
    3048:	bf 91       	pop	r27
    304a:	af 91       	pop	r26
    304c:	9f 91       	pop	r25
    304e:	8f 91       	pop	r24
    3050:	7f 91       	pop	r23
    3052:	6f 91       	pop	r22
    3054:	5f 91       	pop	r21
    3056:	4f 91       	pop	r20
    3058:	3f 91       	pop	r19
    305a:	2f 91       	pop	r18
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_10>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer0 Compare Match*/
void __vector_10(void)			__attribute__((signal));
void __vector_10(void)
{
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	2f 93       	push	r18
    3072:	3f 93       	push	r19
    3074:	4f 93       	push	r20
    3076:	5f 93       	push	r21
    3078:	6f 93       	push	r22
    307a:	7f 93       	push	r23
    307c:	8f 93       	push	r24
    307e:	9f 93       	push	r25
    3080:	af 93       	push	r26
    3082:	bf 93       	push	r27
    3084:	ef 93       	push	r30
    3086:	ff 93       	push	r31
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3090:	80 91 fa 00 	lds	r24, 0x00FA
    3094:	90 91 fb 00 	lds	r25, 0x00FB
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	90 93 fb 00 	sts	0x00FB, r25
    309e:	80 93 fa 00 	sts	0x00FA, r24
	if(Local_u16CounterCTC == TIMER0_u16CTC_CounterValue)
    30a2:	20 91 fa 00 	lds	r18, 0x00FA
    30a6:	30 91 fb 00 	lds	r19, 0x00FB
    30aa:	80 91 20 01 	lds	r24, 0x0120
    30ae:	90 91 21 01 	lds	r25, 0x0121
    30b2:	28 17       	cp	r18, r24
    30b4:	39 07       	cpc	r19, r25
    30b6:	79 f4       	brne	.+30     	; 0x30d6 <__vector_10+0x70>
	{
		/*Update OV Counter*/
		Local_u16CounterCTC = 0;
    30b8:	10 92 fb 00 	sts	0x00FB, r1
    30bc:	10 92 fa 00 	sts	0x00FA, r1
		
		/*Call the application function*/
		if(TIMER0_pfCTC != NULL)
    30c0:	80 91 f6 00 	lds	r24, 0x00F6
    30c4:	90 91 f7 00 	lds	r25, 0x00F7
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	29 f0       	breq	.+10     	; 0x30d6 <__vector_10+0x70>
		{
			/*Dereferencing of the pointer*/
			TIMER0_pfCTC();
    30cc:	e0 91 f6 00 	lds	r30, 0x00F6
    30d0:	f0 91 f7 00 	lds	r31, 0x00F7
    30d4:	09 95       	icall
		}
	}
}
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	ff 91       	pop	r31
    30dc:	ef 91       	pop	r30
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <TIMER1_u8SetCallBack_OV>:
volatile static u16 TIMER1_u16OnPeriod = 0;
volatile static u16 TIMER1_u16OffPeriod = 0;


u8   TIMER1_u8SetCallBack_OV		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	27 97       	sbiw	r28, 0x07	; 7
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	6a 83       	std	Y+2, r22	; 0x02
    3112:	7b 83       	std	Y+3, r23	; 0x03
    3114:	8c 83       	std	Y+4, r24	; 0x04
    3116:	9d 83       	std	Y+5, r25	; 0x05
    3118:	5f 83       	std	Y+7, r21	; 0x07
    311a:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3120:	8e 81       	ldd	r24, Y+6	; 0x06
    3122:	9f 81       	ldd	r25, Y+7	; 0x07
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	99 f0       	breq	.+38     	; 0x314e <TIMER1_u8SetCallBack_OV+0x52>
	{
		TIMER1_pfOV = Copy_pf;
    3128:	8e 81       	ldd	r24, Y+6	; 0x06
    312a:	9f 81       	ldd	r25, Y+7	; 0x07
    312c:	90 93 fd 00 	sts	0x00FD, r25
    3130:	80 93 fc 00 	sts	0x00FC, r24
		TIMER1_u32OV_CounterValue = Copy_u32CounterValue;
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	ac 81       	ldd	r26, Y+4	; 0x04
    313a:	bd 81       	ldd	r27, Y+5	; 0x05
    313c:	80 93 22 01 	sts	0x0122, r24
    3140:	90 93 23 01 	sts	0x0123, r25
    3144:	a0 93 24 01 	sts	0x0124, r26
    3148:	b0 93 25 01 	sts	0x0125, r27
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <TIMER1_u8SetCallBack_OV+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    314e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
}
    3152:	27 96       	adiw	r28, 0x07	; 7
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <TIMER1_u8SetCallBack_CTC_A>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8SetCallBack_CTC_A		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	27 97       	sbiw	r28, 0x07	; 7
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	6a 83       	std	Y+2, r22	; 0x02
    317a:	7b 83       	std	Y+3, r23	; 0x03
    317c:	8c 83       	std	Y+4, r24	; 0x04
    317e:	9d 83       	std	Y+5, r25	; 0x05
    3180:	5f 83       	std	Y+7, r21	; 0x07
    3182:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3188:	8e 81       	ldd	r24, Y+6	; 0x06
    318a:	9f 81       	ldd	r25, Y+7	; 0x07
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	99 f0       	breq	.+38     	; 0x31b6 <TIMER1_u8SetCallBack_CTC_A+0x52>
	{
		TIMER1_pfCTCA = Copy_pf;
    3190:	8e 81       	ldd	r24, Y+6	; 0x06
    3192:	9f 81       	ldd	r25, Y+7	; 0x07
    3194:	90 93 ff 00 	sts	0x00FF, r25
    3198:	80 93 fe 00 	sts	0x00FE, r24
		TIMER1_u32CTCA_CounterValue = Copy_u32CounterValue;
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	ac 81       	ldd	r26, Y+4	; 0x04
    31a2:	bd 81       	ldd	r27, Y+5	; 0x05
    31a4:	80 93 28 01 	sts	0x0128, r24
    31a8:	90 93 29 01 	sts	0x0129, r25
    31ac:	a0 93 2a 01 	sts	0x012A, r26
    31b0:	b0 93 2b 01 	sts	0x012B, r27
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <TIMER1_u8SetCallBack_CTC_A+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    31b6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    31ba:	27 96       	adiw	r28, 0x07	; 7
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <TIMER1_u8SetCallBack_CTC_B>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8SetCallBack_CTC_B		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	27 97       	sbiw	r28, 0x07	; 7
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	6a 83       	std	Y+2, r22	; 0x02
    31e2:	7b 83       	std	Y+3, r23	; 0x03
    31e4:	8c 83       	std	Y+4, r24	; 0x04
    31e6:	9d 83       	std	Y+5, r25	; 0x05
    31e8:	5f 83       	std	Y+7, r21	; 0x07
    31ea:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	99 f0       	breq	.+38     	; 0x321e <TIMER1_u8SetCallBack_CTC_B+0x52>
	{
		TIMER1_pfCTCB = Copy_pf;
    31f8:	8e 81       	ldd	r24, Y+6	; 0x06
    31fa:	9f 81       	ldd	r25, Y+7	; 0x07
    31fc:	90 93 01 01 	sts	0x0101, r25
    3200:	80 93 00 01 	sts	0x0100, r24
		TIMER1_u32CTCB_CounterValue = Copy_u32CounterValue;
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	9b 81       	ldd	r25, Y+3	; 0x03
    3208:	ac 81       	ldd	r26, Y+4	; 0x04
    320a:	bd 81       	ldd	r27, Y+5	; 0x05
    320c:	80 93 2c 01 	sts	0x012C, r24
    3210:	90 93 2d 01 	sts	0x012D, r25
    3214:	a0 93 2e 01 	sts	0x012E, r26
    3218:	b0 93 2f 01 	sts	0x012F, r27
    321c:	01 c0       	rjmp	.+2      	; 0x3220 <TIMER1_u8SetCallBack_CTC_B+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    321e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3220:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3222:	27 96       	adiw	r28, 0x07	; 7
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <TIMER1_voidSetCompareMatchValue_A>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetCompareMatchValue_A(u16 Copy_u16OCR1AValue)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <TIMER1_voidSetCompareMatchValue_A+0x6>
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCRA value*/
	TIMER1_u16_OCR1ALH_REG = Copy_u16OCR1AValue;
    3242:	ea e4       	ldi	r30, 0x4A	; 74
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	80 83       	st	Z, r24
	
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <TIMER1_voidSetCompareMatchValue_B>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetCompareMatchValue_B(u16 Copy_u16OCR1BValue)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <TIMER1_voidSetCompareMatchValue_B+0x6>
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCRB value*/
	TIMER1_u16_OCR1BLH_REG = Copy_u16OCR1BValue;
    3266:	e8 e4       	ldi	r30, 0x48	; 72
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
	
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <TIMER1_voidSetPReloadValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetPReloadValue		  (u16 Copy_u16PreloadValue)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <TIMER1_voidSetPReloadValue+0x6>
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
	/*Set Preload Value*/
	TIMER1_u16_TCNT1LH_REG = Copy_u16PreloadValue;
    328a:	ec e4       	ldi	r30, 0x4C	; 76
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
	
	/*Send it to global variable*/
	TIMER1_u16PreloadValue = Copy_u16PreloadValue;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	90 93 27 01 	sts	0x0127, r25
    329e:	80 93 26 01 	sts	0x0126, r24
	
}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <TIMER1_voidSetInputCaptureValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetInputCaptureValue   (u16 Copy_u16InputCaptureValue)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <TIMER1_voidSetInputCaptureValue+0x6>
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
	/*Set ICR1 value */
	TIMER1_u16_ICR1LH_REG = Copy_u16InputCaptureValue;
    32ba:	e6 e4       	ldi	r30, 0x46	; 70
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <TIMER1_u8GetCounterValue>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetCounterValue(u16 * Copy_pu16CounterValue)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <TIMER1_u8GetCounterValue+0x6>
    32d6:	0f 92       	push	r0
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	9b 83       	std	Y+3, r25	; 0x03
    32de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16CounterValue != NULL)
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	49 f0       	breq	.+18     	; 0x32fe <TIMER1_u8GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TIMER1_u16_TCNT1LH_REG;
    32ec:	ec e4       	ldi	r30, 0x4C	; 76
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	ea 81       	ldd	r30, Y+2	; 0x02
    32f6:	fb 81       	ldd	r31, Y+3	; 0x03
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
    32fc:	01 c0       	rjmp	.+2      	; 0x3300 <TIMER1_u8GetCounterValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    32fe:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3300:	89 81       	ldd	r24, Y+1	; 0x01
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <TIMER1_voidHW_ICUInit>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidHW_ICUInit(void)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
	/*Select Trigger source for ICU interrupt as raising edge*/
	SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);		//Will be changed in ISR function
    3316:	ae e4       	ldi	r26, 0x4E	; 78
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	ee e4       	ldi	r30, 0x4E	; 78
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	80 64       	ori	r24, 0x40	; 64
    3322:	8c 93       	st	X, r24

	/*INPUT_CAPTURE_INTERRUPT_ENABLE*/
	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
    3324:	a9 e5       	ldi	r26, 0x59	; 89
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e9 e5       	ldi	r30, 0x59	; 89
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	80 62       	ori	r24, 0x20	; 32
    3330:	8c 93       	st	X, r24
}
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <TIMER1_u8GetPWMOnPeriod>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetPWMOnPeriod		   (u16 * Copy_pu16OnTime)
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	00 d0       	rcall	.+0      	; 0x333e <TIMER1_u8GetPWMOnPeriod+0x6>
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	9b 83       	std	Y+3, r25	; 0x03
    3346:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16OnTime != NULL)
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	49 f0       	breq	.+18     	; 0x3366 <TIMER1_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnTime = TIMER1_u16OnPeriod;
    3354:	80 91 02 01 	lds	r24, 0x0102
    3358:	90 91 03 01 	lds	r25, 0x0103
    335c:	ea 81       	ldd	r30, Y+2	; 0x02
    335e:	fb 81       	ldd	r31, Y+3	; 0x03
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <TIMER1_u8GetPWMOnPeriod+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3366:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <TIMER1_u8GetPWMTotalPeriod>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetPWMTotalPeriod		   (u32 * Copy_pu32TotalTime)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	00 d0       	rcall	.+0      	; 0x337c <TIMER1_u8GetPWMTotalPeriod+0x6>
    337c:	0f 92       	push	r0
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	9b 83       	std	Y+3, r25	; 0x03
    3384:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu32TotalTime != NULL)
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	9b 81       	ldd	r25, Y+3	; 0x03
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	a1 f0       	breq	.+40     	; 0x33ba <TIMER1_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalTime = TIMER1_u16OnPeriod + TIMER1_u16OffPeriod;
    3392:	20 91 02 01 	lds	r18, 0x0102
    3396:	30 91 03 01 	lds	r19, 0x0103
    339a:	80 91 04 01 	lds	r24, 0x0104
    339e:	90 91 05 01 	lds	r25, 0x0105
    33a2:	82 0f       	add	r24, r18
    33a4:	93 1f       	adc	r25, r19
    33a6:	cc 01       	movw	r24, r24
    33a8:	a0 e0       	ldi	r26, 0x00	; 0
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	ea 81       	ldd	r30, Y+2	; 0x02
    33ae:	fb 81       	ldd	r31, Y+3	; 0x03
    33b0:	80 83       	st	Z, r24
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	a2 83       	std	Z+2, r26	; 0x02
    33b6:	b3 83       	std	Z+3, r27	; 0x03
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <TIMER1_u8GetPWMTotalPeriod+0x46>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    33ba:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <TIMER1_u8GerDutyCycle>:

///-------------------------------------------------------------------------------------------------------------------------

u8	 TIMER1_u8GerDutyCycle			   (u8 * Copy_pu8DutyCycle)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <TIMER1_u8GerDutyCycle+0x6>
    33d0:	0f 92       	push	r0
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9b 83       	std	Y+3, r25	; 0x03
    33d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	9b 81       	ldd	r25, Y+3	; 0x03
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	31 f1       	breq	.+76     	; 0x3432 <TIMER1_u8GerDutyCycle+0x68>
	{
		*Copy_pu8DutyCycle = (u8)(TIMER1_u16OnPeriod * 100UL)/(TIMER1_u16OnPeriod + TIMER1_u16OffPeriod);
    33e6:	80 91 02 01 	lds	r24, 0x0102
    33ea:	90 91 03 01 	lds	r25, 0x0103
    33ee:	cc 01       	movw	r24, r24
    33f0:	a0 e0       	ldi	r26, 0x00	; 0
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	24 e6       	ldi	r18, 0x64	; 100
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__mulsi3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	48 2f       	mov	r20, r24
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	20 91 02 01 	lds	r18, 0x0102
    3410:	30 91 03 01 	lds	r19, 0x0103
    3414:	80 91 04 01 	lds	r24, 0x0104
    3418:	90 91 05 01 	lds	r25, 0x0105
    341c:	28 0f       	add	r18, r24
    341e:	39 1f       	adc	r19, r25
    3420:	ca 01       	movw	r24, r20
    3422:	b9 01       	movw	r22, r18
    3424:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <__udivmodhi4>
    3428:	cb 01       	movw	r24, r22
    342a:	ea 81       	ldd	r30, Y+2	; 0x02
    342c:	fb 81       	ldd	r31, Y+3	; 0x03
    342e:	80 83       	st	Z, r24
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <TIMER1_u8GerDutyCycle+0x6a>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3432:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    3434:	89 81       	ldd	r24, Y+1	; 0x01
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <TIMER1_voidInit>:

///-------------------------------------------------------------------------------------------------------------------------
u8   TIMER1_voidInit(void)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	0f 92       	push	r0
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM10_BIT);	
		CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM11_BIT);	
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM12_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM13_BIT);																											
	#elif TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_ICR1                           //1110
		CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM10_BIT);	
    3450:	af e4       	ldi	r26, 0x4F	; 79
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ef e4       	ldi	r30, 0x4F	; 79
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	8e 7f       	andi	r24, 0xFE	; 254
    345c:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM11_BIT);	
    345e:	af e4       	ldi	r26, 0x4F	; 79
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ef e4       	ldi	r30, 0x4F	; 79
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	82 60       	ori	r24, 0x02	; 2
    346a:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM12_BIT);
    346c:	ae e4       	ldi	r26, 0x4E	; 78
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	ee e4       	ldi	r30, 0x4E	; 78
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	88 60       	ori	r24, 0x08	; 8
    3478:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM13_BIT);																											
    347a:	ae e4       	ldi	r26, 0x4E	; 78
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ee e4       	ldi	r30, 0x4E	; 78
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	80 61       	ori	r24, 0x10	; 16
    3486:	8c 93       	st	X, r24
			}
			break;
		case TIMER1_u16_INITIAL_FAST_PWM_CLR_OC1A_ON_COMPARE_MATCH_SET_OC1A_AT_TOP:
			if((TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_8BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_9BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_10BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_ICR1) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_OCR1A))
			{
				SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1A1_BIT);
    3488:	af e4       	ldi	r26, 0x4F	; 79
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	ef e4       	ldi	r30, 0x4F	; 79
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	80 68       	ori	r24, 0x80	; 128
    3494:	8c 93       	st	X, r24
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1A0_BIT);
    3496:	af e4       	ldi	r26, 0x4F	; 79
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	ef e4       	ldi	r30, 0x4F	; 79
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	8f 7b       	andi	r24, 0xBF	; 191
    34a2:	8c 93       	st	X, r24
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1B1_BIT);
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1B0_BIT);
			}
			else
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    34a4:	19 82       	std	Y+1, r1	; 0x01
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TOIE1_BIT);
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1B_BIT);
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1A_BIT);
	//	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
	#elif  TIMER1_u8_INITIAL_INTERRUPT_ENABLE == TIMER1_u16_INITIAL_NO_ENABLED_INTERRUPTS
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TOIE1_BIT);
    34a6:	a9 e5       	ldi	r26, 0x59	; 89
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e9 e5       	ldi	r30, 0x59	; 89
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8b 7f       	andi	r24, 0xFB	; 251
    34b2:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1B_BIT);
    34b4:	a9 e5       	ldi	r26, 0x59	; 89
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	87 7f       	andi	r24, 0xF7	; 247
    34c0:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1A_BIT);
    34c2:	a9 e5       	ldi	r26, 0x59	; 89
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e9 e5       	ldi	r30, 0x59	; 89
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	8f 7e       	andi	r24, 0xEF	; 239
    34ce:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
    34d0:	a9 e5       	ldi	r26, 0x59	; 89
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	e9 e5       	ldi	r30, 0x59	; 89
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	8f 7d       	andi	r24, 0xDF	; 223
    34dc:	8c 93       	st	X, r24
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_NO_PRESCALLING							//001
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);					
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);					
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);					
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_PRESCALER_8								//010
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);					
    34de:	ae e4       	ldi	r26, 0x4E	; 78
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	ee e4       	ldi	r30, 0x4E	; 78
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	8b 7f       	andi	r24, 0xFB	; 251
    34ea:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);					
    34ec:	ae e4       	ldi	r26, 0x4E	; 78
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	ee e4       	ldi	r30, 0x4E	; 78
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	82 60       	ori	r24, 0x02	; 2
    34f8:	8c 93       	st	X, r24
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);					
    34fa:	ae e4       	ldi	r26, 0x4E	; 78
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	ee e4       	ldi	r30, 0x4E	; 78
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	8e 7f       	andi	r24, 0xFE	; 254
    3506:	8c 93       	st	X, r24
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_EXTERNAL_CLOCK_SOURCE_RISING_EDGE		//111
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);
	#endif
		return Local_u8ErrorState;
    3508:	89 81       	ldd	r24, Y+1	; 0x01
}
    350a:	0f 90       	pop	r0
    350c:	cf 91       	pop	r28
    350e:	df 91       	pop	r29
    3510:	08 95       	ret

00003512 <__vector_9>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 OV*/
void __vector_9(void)			__attribute__((signal));
void __vector_9(void)
{
    3512:	1f 92       	push	r1
    3514:	0f 92       	push	r0
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	0f 92       	push	r0
    351a:	11 24       	eor	r1, r1
    351c:	2f 93       	push	r18
    351e:	3f 93       	push	r19
    3520:	4f 93       	push	r20
    3522:	5f 93       	push	r21
    3524:	6f 93       	push	r22
    3526:	7f 93       	push	r23
    3528:	8f 93       	push	r24
    352a:	9f 93       	push	r25
    352c:	af 93       	push	r26
    352e:	bf 93       	push	r27
    3530:	ef 93       	push	r30
    3532:	ff 93       	push	r31
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterOVF = 0;
	Local_u32CounterOVF++;
    353c:	80 91 06 01 	lds	r24, 0x0106
    3540:	90 91 07 01 	lds	r25, 0x0107
    3544:	a0 91 08 01 	lds	r26, 0x0108
    3548:	b0 91 09 01 	lds	r27, 0x0109
    354c:	01 96       	adiw	r24, 0x01	; 1
    354e:	a1 1d       	adc	r26, r1
    3550:	b1 1d       	adc	r27, r1
    3552:	80 93 06 01 	sts	0x0106, r24
    3556:	90 93 07 01 	sts	0x0107, r25
    355a:	a0 93 08 01 	sts	0x0108, r26
    355e:	b0 93 09 01 	sts	0x0109, r27
	if(Local_u32CounterOVF == TIMER1_u32OV_CounterValue)
    3562:	20 91 06 01 	lds	r18, 0x0106
    3566:	30 91 07 01 	lds	r19, 0x0107
    356a:	40 91 08 01 	lds	r20, 0x0108
    356e:	50 91 09 01 	lds	r21, 0x0109
    3572:	80 91 22 01 	lds	r24, 0x0122
    3576:	90 91 23 01 	lds	r25, 0x0123
    357a:	a0 91 24 01 	lds	r26, 0x0124
    357e:	b0 91 25 01 	lds	r27, 0x0125
    3582:	28 17       	cp	r18, r24
    3584:	39 07       	cpc	r19, r25
    3586:	4a 07       	cpc	r20, r26
    3588:	5b 07       	cpc	r21, r27
    358a:	d9 f4       	brne	.+54     	; 0x35c2 <__vector_9+0xb0>
	{

		/*Update Preload Value*/
		TIMER1_u16_TCNT1LH_REG = TIMER1_u16PreloadValue;
    358c:	ec e4       	ldi	r30, 0x4C	; 76
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 91 26 01 	lds	r24, 0x0126
    3594:	90 91 27 01 	lds	r25, 0x0127
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	80 83       	st	Z, r24

		/*Update OV Counter*/
		Local_u32CounterOVF = 0;
    359c:	10 92 06 01 	sts	0x0106, r1
    35a0:	10 92 07 01 	sts	0x0107, r1
    35a4:	10 92 08 01 	sts	0x0108, r1
    35a8:	10 92 09 01 	sts	0x0109, r1
		
		/*Call the application function*/
		if(TIMER1_pfOV != NULL)
    35ac:	80 91 fc 00 	lds	r24, 0x00FC
    35b0:	90 91 fd 00 	lds	r25, 0x00FD
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	29 f0       	breq	.+10     	; 0x35c2 <__vector_9+0xb0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfOV();
    35b8:	e0 91 fc 00 	lds	r30, 0x00FC
    35bc:	f0 91 fd 00 	lds	r31, 0x00FD
    35c0:	09 95       	icall
		}
	}
}
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	ff 91       	pop	r31
    35c8:	ef 91       	pop	r30
    35ca:	bf 91       	pop	r27
    35cc:	af 91       	pop	r26
    35ce:	9f 91       	pop	r25
    35d0:	8f 91       	pop	r24
    35d2:	7f 91       	pop	r23
    35d4:	6f 91       	pop	r22
    35d6:	5f 91       	pop	r21
    35d8:	4f 91       	pop	r20
    35da:	3f 91       	pop	r19
    35dc:	2f 91       	pop	r18
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <__vector_7>:
//-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 CTC A*/
void __vector_7(void)			__attribute__((signal));
void __vector_7(void)
{
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	2f 93       	push	r18
    35f4:	3f 93       	push	r19
    35f6:	4f 93       	push	r20
    35f8:	5f 93       	push	r21
    35fa:	6f 93       	push	r22
    35fc:	7f 93       	push	r23
    35fe:	8f 93       	push	r24
    3600:	9f 93       	push	r25
    3602:	af 93       	push	r26
    3604:	bf 93       	push	r27
    3606:	ef 93       	push	r30
    3608:	ff 93       	push	r31
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterCTCA = 0;
	Local_u32CounterCTCA++;
    3612:	80 91 0a 01 	lds	r24, 0x010A
    3616:	90 91 0b 01 	lds	r25, 0x010B
    361a:	a0 91 0c 01 	lds	r26, 0x010C
    361e:	b0 91 0d 01 	lds	r27, 0x010D
    3622:	01 96       	adiw	r24, 0x01	; 1
    3624:	a1 1d       	adc	r26, r1
    3626:	b1 1d       	adc	r27, r1
    3628:	80 93 0a 01 	sts	0x010A, r24
    362c:	90 93 0b 01 	sts	0x010B, r25
    3630:	a0 93 0c 01 	sts	0x010C, r26
    3634:	b0 93 0d 01 	sts	0x010D, r27
	if(Local_u32CounterCTCA == TIMER1_u32CTCA_CounterValue)
    3638:	20 91 0a 01 	lds	r18, 0x010A
    363c:	30 91 0b 01 	lds	r19, 0x010B
    3640:	40 91 0c 01 	lds	r20, 0x010C
    3644:	50 91 0d 01 	lds	r21, 0x010D
    3648:	80 91 28 01 	lds	r24, 0x0128
    364c:	90 91 29 01 	lds	r25, 0x0129
    3650:	a0 91 2a 01 	lds	r26, 0x012A
    3654:	b0 91 2b 01 	lds	r27, 0x012B
    3658:	28 17       	cp	r18, r24
    365a:	39 07       	cpc	r19, r25
    365c:	4a 07       	cpc	r20, r26
    365e:	5b 07       	cpc	r21, r27
    3660:	99 f4       	brne	.+38     	; 0x3688 <__vector_7+0xa0>
	{
		/*Update OV Counter*/
		Local_u32CounterCTCA = 0;
    3662:	10 92 0a 01 	sts	0x010A, r1
    3666:	10 92 0b 01 	sts	0x010B, r1
    366a:	10 92 0c 01 	sts	0x010C, r1
    366e:	10 92 0d 01 	sts	0x010D, r1
		
		/*Call the application function*/
		if(TIMER1_pfCTCA != NULL)
    3672:	80 91 fe 00 	lds	r24, 0x00FE
    3676:	90 91 ff 00 	lds	r25, 0x00FF
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	29 f0       	breq	.+10     	; 0x3688 <__vector_7+0xa0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfCTCA();
    367e:	e0 91 fe 00 	lds	r30, 0x00FE
    3682:	f0 91 ff 00 	lds	r31, 0x00FF
    3686:	09 95       	icall
		}
	}
	
}
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	ff 91       	pop	r31
    368e:	ef 91       	pop	r30
    3690:	bf 91       	pop	r27
    3692:	af 91       	pop	r26
    3694:	9f 91       	pop	r25
    3696:	8f 91       	pop	r24
    3698:	7f 91       	pop	r23
    369a:	6f 91       	pop	r22
    369c:	5f 91       	pop	r21
    369e:	4f 91       	pop	r20
    36a0:	3f 91       	pop	r19
    36a2:	2f 91       	pop	r18
    36a4:	0f 90       	pop	r0
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	0f 90       	pop	r0
    36aa:	1f 90       	pop	r1
    36ac:	18 95       	reti

000036ae <__vector_8>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 CTC B*/
void __vector_8(void)			__attribute__((signal));
void __vector_8(void)
{
    36ae:	1f 92       	push	r1
    36b0:	0f 92       	push	r0
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	0f 92       	push	r0
    36b6:	11 24       	eor	r1, r1
    36b8:	2f 93       	push	r18
    36ba:	3f 93       	push	r19
    36bc:	4f 93       	push	r20
    36be:	5f 93       	push	r21
    36c0:	6f 93       	push	r22
    36c2:	7f 93       	push	r23
    36c4:	8f 93       	push	r24
    36c6:	9f 93       	push	r25
    36c8:	af 93       	push	r26
    36ca:	bf 93       	push	r27
    36cc:	ef 93       	push	r30
    36ce:	ff 93       	push	r31
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterCTCB = 0;
	Local_u32CounterCTCB++;
    36d8:	80 91 0e 01 	lds	r24, 0x010E
    36dc:	90 91 0f 01 	lds	r25, 0x010F
    36e0:	a0 91 10 01 	lds	r26, 0x0110
    36e4:	b0 91 11 01 	lds	r27, 0x0111
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	a1 1d       	adc	r26, r1
    36ec:	b1 1d       	adc	r27, r1
    36ee:	80 93 0e 01 	sts	0x010E, r24
    36f2:	90 93 0f 01 	sts	0x010F, r25
    36f6:	a0 93 10 01 	sts	0x0110, r26
    36fa:	b0 93 11 01 	sts	0x0111, r27
	if(Local_u32CounterCTCB == TIMER1_u32CTCB_CounterValue)
    36fe:	20 91 0e 01 	lds	r18, 0x010E
    3702:	30 91 0f 01 	lds	r19, 0x010F
    3706:	40 91 10 01 	lds	r20, 0x0110
    370a:	50 91 11 01 	lds	r21, 0x0111
    370e:	80 91 2c 01 	lds	r24, 0x012C
    3712:	90 91 2d 01 	lds	r25, 0x012D
    3716:	a0 91 2e 01 	lds	r26, 0x012E
    371a:	b0 91 2f 01 	lds	r27, 0x012F
    371e:	28 17       	cp	r18, r24
    3720:	39 07       	cpc	r19, r25
    3722:	4a 07       	cpc	r20, r26
    3724:	5b 07       	cpc	r21, r27
    3726:	99 f4       	brne	.+38     	; 0x374e <__vector_8+0xa0>
	{
		/*Update OV Counter*/
		Local_u32CounterCTCB = 0;
    3728:	10 92 0e 01 	sts	0x010E, r1
    372c:	10 92 0f 01 	sts	0x010F, r1
    3730:	10 92 10 01 	sts	0x0110, r1
    3734:	10 92 11 01 	sts	0x0111, r1
		
		/*Call the application function*/
		if(TIMER1_pfCTCB != NULL)
    3738:	80 91 00 01 	lds	r24, 0x0100
    373c:	90 91 01 01 	lds	r25, 0x0101
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	29 f0       	breq	.+10     	; 0x374e <__vector_8+0xa0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfCTCB();
    3744:	e0 91 00 01 	lds	r30, 0x0100
    3748:	f0 91 01 01 	lds	r31, 0x0101
    374c:	09 95       	icall
		}
	}
}
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	ff 91       	pop	r31
    3754:	ef 91       	pop	r30
    3756:	bf 91       	pop	r27
    3758:	af 91       	pop	r26
    375a:	9f 91       	pop	r25
    375c:	8f 91       	pop	r24
    375e:	7f 91       	pop	r23
    3760:	6f 91       	pop	r22
    3762:	5f 91       	pop	r21
    3764:	4f 91       	pop	r20
    3766:	3f 91       	pop	r19
    3768:	2f 91       	pop	r18
    376a:	0f 90       	pop	r0
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	0f 90       	pop	r0
    3770:	1f 90       	pop	r1
    3772:	18 95       	reti

00003774 <__vector_6>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 ISR mode*/
void __vector_6(void)			__attribute__((signal));
void __vector_6(void)
{
    3774:	1f 92       	push	r1
    3776:	0f 92       	push	r0
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	0f 92       	push	r0
    377c:	11 24       	eor	r1, r1
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
    378a:	ef 93       	push	r30
    378c:	ff 93       	push	r31
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	00 d0       	rcall	.+0      	; 0x3794 <__vector_6+0x20>
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TIMER1_u16_ICR1LH_REG;
    3798:	e6 e4       	ldi	r30, 0x46	; 70
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	
	if(Local_u8Flag == 0)		/*Raising Edge*/
    37a4:	80 91 14 01 	lds	r24, 0x0114
    37a8:	88 23       	and	r24, r24
    37aa:	b9 f4       	brne	.+46     	; 0x37da <__vector_6+0x66>
	{
		/*Calculate the off period*/
		TIMER1_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    37ac:	20 91 12 01 	lds	r18, 0x0112
    37b0:	30 91 13 01 	lds	r19, 0x0113
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	82 1b       	sub	r24, r18
    37ba:	93 0b       	sbc	r25, r19
    37bc:	90 93 05 01 	sts	0x0105, r25
    37c0:	80 93 04 01 	sts	0x0104, r24
		/*Change Trigger source to falling edge*/
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);
    37c4:	ae e4       	ldi	r26, 0x4E	; 78
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	ee e4       	ldi	r30, 0x4E	; 78
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	8f 7b       	andi	r24, 0xBF	; 191
    37d0:	8c 93       	st	X, r24
		/*Change the flag*/
		Local_u8Flag = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 14 01 	sts	0x0114, r24
    37d8:	15 c0       	rjmp	.+42     	; 0x3804 <__vector_6+0x90>
	}
	else						/*Falling Edge*/
	{
		/*Calculate the on period*/
		TIMER1_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    37da:	20 91 12 01 	lds	r18, 0x0112
    37de:	30 91 13 01 	lds	r19, 0x0113
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	9a 81       	ldd	r25, Y+2	; 0x02
    37e6:	82 1b       	sub	r24, r18
    37e8:	93 0b       	sbc	r25, r19
    37ea:	90 93 03 01 	sts	0x0103, r25
    37ee:	80 93 02 01 	sts	0x0102, r24
		/*Change Trigger source to raising edge*/
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);
    37f2:	ae e4       	ldi	r26, 0x4E	; 78
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	ee e4       	ldi	r30, 0x4E	; 78
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	80 64       	ori	r24, 0x40	; 64
    37fe:	8c 93       	st	X, r24
		/*Cahnge the flag*/
		Local_u8Flag = 0;
    3800:	10 92 14 01 	sts	0x0114, r1
	}
	Local_u16OldValue = Local_u16TimerValue;				 //Get the value that is stored in ICR1 register
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	90 93 13 01 	sts	0x0113, r25
    380c:	80 93 12 01 	sts	0x0112, r24
}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	ff 91       	pop	r31
    381a:	ef 91       	pop	r30
    381c:	bf 91       	pop	r27
    381e:	af 91       	pop	r26
    3820:	9f 91       	pop	r25
    3822:	8f 91       	pop	r24
    3824:	3f 91       	pop	r19
    3826:	2f 91       	pop	r18
    3828:	0f 90       	pop	r0
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	0f 90       	pop	r0
    382e:	1f 90       	pop	r1
    3830:	18 95       	reti

00003832 <TIMER2_u8SetCallBack_OV>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER2_u8SetCallBack_OV(u16 Copy_u16CounterValue , void (*Copy_pf)(void))				//We've to make them only one Call back function
/**Call Back function for Normal Mode**/
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	00 d0       	rcall	.+0      	; 0x3838 <TIMER2_u8SetCallBack_OV+0x6>
    3838:	00 d0       	rcall	.+0      	; 0x383a <TIMER2_u8SetCallBack_OV+0x8>
    383a:	0f 92       	push	r0
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	9b 83       	std	Y+3, r25	; 0x03
    3842:	8a 83       	std	Y+2, r24	; 0x02
    3844:	7d 83       	std	Y+5, r23	; 0x05
    3846:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    384c:	8c 81       	ldd	r24, Y+4	; 0x04
    384e:	9d 81       	ldd	r25, Y+5	; 0x05
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	69 f0       	breq	.+26     	; 0x386e <TIMER2_u8SetCallBack_OV+0x3c>
	{
		TIMER2_pfOV = Copy_pf;
    3854:	8c 81       	ldd	r24, Y+4	; 0x04
    3856:	9d 81       	ldd	r25, Y+5	; 0x05
    3858:	90 93 16 01 	sts	0x0116, r25
    385c:	80 93 15 01 	sts	0x0115, r24
		TIMER2_u16OV_CounterValue = Copy_u16CounterValue;
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	9b 81       	ldd	r25, Y+3	; 0x03
    3864:	90 93 31 01 	sts	0x0131, r25
    3868:	80 93 30 01 	sts	0x0130, r24
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <TIMER2_u8SetCallBack_OV+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    386e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3870:	89 81       	ldd	r24, Y+1	; 0x01
}
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <TIMER2_u8SetCallBack_CTC>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER2_u8SetCallBack_CTC(u16 Copy_u16CounterValue , void (*Copy_pf)(void))
/**Call Back function for CTC Mode**/
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	00 d0       	rcall	.+0      	; 0x3888 <TIMER2_u8SetCallBack_CTC+0x6>
    3888:	00 d0       	rcall	.+0      	; 0x388a <TIMER2_u8SetCallBack_CTC+0x8>
    388a:	0f 92       	push	r0
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	9b 83       	std	Y+3, r25	; 0x03
    3892:	8a 83       	std	Y+2, r24	; 0x02
    3894:	7d 83       	std	Y+5, r23	; 0x05
    3896:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    389c:	8c 81       	ldd	r24, Y+4	; 0x04
    389e:	9d 81       	ldd	r25, Y+5	; 0x05
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	69 f0       	breq	.+26     	; 0x38be <TIMER2_u8SetCallBack_CTC+0x3c>
	{
		TIMER2_pfCTC = Copy_pf;
    38a4:	8c 81       	ldd	r24, Y+4	; 0x04
    38a6:	9d 81       	ldd	r25, Y+5	; 0x05
    38a8:	90 93 18 01 	sts	0x0118, r25
    38ac:	80 93 17 01 	sts	0x0117, r24
		TIMER2_u16CTC_CounterValue = Copy_u16CounterValue;
    38b0:	8a 81       	ldd	r24, Y+2	; 0x02
    38b2:	9b 81       	ldd	r25, Y+3	; 0x03
    38b4:	90 93 34 01 	sts	0x0134, r25
    38b8:	80 93 33 01 	sts	0x0133, r24
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <TIMER2_u8SetCallBack_CTC+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    38be:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	08 95       	ret

000038d2 <TIMER2_voidSetCompareMatchValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER2_voidSetCompareMatchValue(u8 Copy_u8OCR2Value)
{
    38d2:	df 93       	push	r29
    38d4:	cf 93       	push	r28
    38d6:	0f 92       	push	r0
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCR value*/
	TIMER2_u8_OCR2_REG = Copy_u8OCR2Value;
    38de:	e3 e4       	ldi	r30, 0x43	; 67
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	80 83       	st	Z, r24
}
    38e6:	0f 90       	pop	r0
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <TIMER2_voidSetPReloadValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER2_voidSetPReloadValue(u8 Copy_u8PreloadValue)
{
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	0f 92       	push	r0
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	89 83       	std	Y+1, r24	; 0x01
	/*Set preload value*/
	TIMER2_u8_TCNT2_REG = Copy_u8PreloadValue;
    38fa:	e4 e4       	ldi	r30, 0x44	; 68
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	80 83       	st	Z, r24
	/*pass preolad value to OV ISR function*/
	TIMER2_u8PreloadValue = Copy_u8PreloadValue;
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	80 93 32 01 	sts	0x0132, r24
}
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <TIMER2_u8GetCounterValue>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER2_u8GetCounterValue(u8 * Copy_pu8CounterValue)
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	00 d0       	rcall	.+0      	; 0x3916 <TIMER2_u8GetCounterValue+0x6>
    3916:	0f 92       	push	r0
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	9b 83       	std	Y+3, r25	; 0x03
    391e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8CounterValue != NULL)
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	9b 81       	ldd	r25, Y+3	; 0x03
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	39 f0       	breq	.+14     	; 0x393a <TIMER2_u8GetCounterValue+0x2a>
	{
		*Copy_pu8CounterValue = TIMER2_u8_TCNT2_REG;
    392c:	e4 e4       	ldi	r30, 0x44	; 68
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	ea 81       	ldd	r30, Y+2	; 0x02
    3934:	fb 81       	ldd	r31, Y+3	; 0x03
    3936:	80 83       	st	Z, r24
    3938:	01 c0       	rjmp	.+2      	; 0x393c <TIMER2_u8GetCounterValue+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    393a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    393c:	89 81       	ldd	r24, Y+1	; 0x01
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <TIMER2_voidInit>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER2_voidInit(void)
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	0f 92       	push	r0
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	89 83       	std	Y+1, r24	; 0x01
	/*Wave Generation Mode Selection*/
	#if TIMER2_u8_INITIAL_WAVE_GENERATION_MODE == TIMER2_u8_INITIAL_NORMAL_MODE				//00
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_WGM21_BIT);
    3958:	a5 e4       	ldi	r26, 0x45	; 69
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e5 e4       	ldi	r30, 0x45	; 69
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	87 7f       	andi	r24, 0xF7	; 247
    3964:	8c 93       	st	X, r24
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_WGM20_BIT);
    3966:	a5 e4       	ldi	r26, 0x45	; 69
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e5 e4       	ldi	r30, 0x45	; 69
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	8f 7b       	andi	r24, 0xBF	; 191
    3972:	8c 93       	st	X, r24
	switch(TIMER2_u8_INITIAL_COMPARE_MATCH_MODE)
	{
		case TIMER2_u8_INITIAL_NON_PWM_NORMAL_PORT_OPERATION_DIS_OC2:
			if((TIMER2_u8_INITIAL_WAVE_GENERATION_MODE == TIMER2_u8_INITIAL_NORMAL_MODE) || (TIMER2_u8_INITIAL_WAVE_GENERATION_MODE == TIMER2_u8_INITIAL_CTC))
			{
				CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_COM21_BIT);
    3974:	a5 e4       	ldi	r26, 0x45	; 69
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	e5 e4       	ldi	r30, 0x45	; 69
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	8f 7d       	andi	r24, 0xDF	; 223
    3980:	8c 93       	st	X, r24
				CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_COM20_BIT);
    3982:	a5 e4       	ldi	r26, 0x45	; 69
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e5 e4       	ldi	r30, 0x45	; 69
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	8f 7e       	andi	r24, 0xEF	; 239
    398e:	8c 93       	st	X, r24
	}
	
	
	/*Interrupt Flag Selection*/
	#if  TIMER2_u8_INITIAL_INTERRUPT_FLAG == TIMER2_u8_INITIAL_OVERFLOW_FLAG
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_OCIE2_BIT);
    3990:	a9 e5       	ldi	r26, 0x59	; 89
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e9 e5       	ldi	r30, 0x59	; 89
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	8f 77       	andi	r24, 0x7F	; 127
    399c:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_TOIE2_BIT);
    399e:	a9 e5       	ldi	r26, 0x59	; 89
    39a0:	b0 e0       	ldi	r27, 0x00	; 0
    39a2:	e9 e5       	ldi	r30, 0x59	; 89
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	80 64       	ori	r24, 0x40	; 64
    39aa:	8c 93       	st	X, r24
	#elif TIMER2_u8_INITIAL_CLOCK_SELECTION == TIMER2_u8_INITIAL_NO_PRESCALLING							//001
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS22_BIT);					
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS21_BIT);					
		SET_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS20_BIT);					
	#elif TIMER2_u8_INITIAL_CLOCK_SELECTION == TIMER2_u8_INITIAL_PRESCALER_8							//010
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS22_BIT);					
    39ac:	a5 e4       	ldi	r26, 0x45	; 69
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e5 e4       	ldi	r30, 0x45	; 69
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	8b 7f       	andi	r24, 0xFB	; 251
    39b8:	8c 93       	st	X, r24
		SET_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS21_BIT);					
    39ba:	a5 e4       	ldi	r26, 0x45	; 69
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e5 e4       	ldi	r30, 0x45	; 69
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	82 60       	ori	r24, 0x02	; 2
    39c6:	8c 93       	st	X, r24
		CLR_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS20_BIT);					
    39c8:	a5 e4       	ldi	r26, 0x45	; 69
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e5 e4       	ldi	r30, 0x45	; 69
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	8e 7f       	andi	r24, 0xFE	; 254
    39d4:	8c 93       	st	X, r24
		SET_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS22_BIT);
		SET_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS21_BIT);
		SET_BIT(TIMER2_u8_TCCR2_REG , TIMER2_TCCR2_CS20_BIT);
	#endif
	
	return Local_u8ErrorState;
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39d8:	0f 90       	pop	r0
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <TIMER2_voidStopTIMER2>:

///-------------------------------------------------------------------------------------------------------------------------
void TIMER2_voidStopTIMER2(void)
{
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
	/*Disable Timer interrupt*/
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_OCIE2_BIT);
    39e8:	a9 e5       	ldi	r26, 0x59	; 89
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	e9 e5       	ldi	r30, 0x59	; 89
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	8f 77       	andi	r24, 0x7F	; 127
    39f4:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_TOIE2_BIT);
    39f6:	a9 e5       	ldi	r26, 0x59	; 89
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	e9 e5       	ldi	r30, 0x59	; 89
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	8f 7b       	andi	r24, 0xBF	; 191
    3a02:	8c 93       	st	X, r24
}
    3a04:	cf 91       	pop	r28
    3a06:	df 91       	pop	r29
    3a08:	08 95       	ret

00003a0a <TIMER2_voidEnableTIMER2>:

///-------------------------------------------------------------------------------------------------------------------------
void TIMER2_voidEnableTIMER2(void)
{
    3a0a:	df 93       	push	r29
    3a0c:	cf 93       	push	r28
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
	/*Enable Timer interrupt OV*/
	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_OCIE2_BIT);
    3a12:	a9 e5       	ldi	r26, 0x59	; 89
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	e9 e5       	ldi	r30, 0x59	; 89
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	8f 77       	andi	r24, 0x7F	; 127
    3a1e:	8c 93       	st	X, r24
	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER2_TIMSK_TOIE2_BIT);
    3a20:	a9 e5       	ldi	r26, 0x59	; 89
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	e9 e5       	ldi	r30, 0x59	; 89
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	80 64       	ori	r24, 0x40	; 64
    3a2c:	8c 93       	st	X, r24
}
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	08 95       	ret

00003a34 <__vector_5>:

///-------------------------------------------------------------------------------------------------------------------------
/*Prototype for ISR function of Timer2 OV*/
void __vector_5(void)			__attribute__((signal));
void __vector_5(void)
{
    3a34:	1f 92       	push	r1
    3a36:	0f 92       	push	r0
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	0f 92       	push	r0
    3a3c:	11 24       	eor	r1, r1
    3a3e:	2f 93       	push	r18
    3a40:	3f 93       	push	r19
    3a42:	4f 93       	push	r20
    3a44:	5f 93       	push	r21
    3a46:	6f 93       	push	r22
    3a48:	7f 93       	push	r23
    3a4a:	8f 93       	push	r24
    3a4c:	9f 93       	push	r25
    3a4e:	af 93       	push	r26
    3a50:	bf 93       	push	r27
    3a52:	ef 93       	push	r30
    3a54:	ff 93       	push	r31
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    3a5e:	80 91 19 01 	lds	r24, 0x0119
    3a62:	90 91 1a 01 	lds	r25, 0x011A
    3a66:	01 96       	adiw	r24, 0x01	; 1
    3a68:	90 93 1a 01 	sts	0x011A, r25
    3a6c:	80 93 19 01 	sts	0x0119, r24
	if(Local_u16CounterOVF == TIMER2_u16OV_CounterValue)
    3a70:	20 91 19 01 	lds	r18, 0x0119
    3a74:	30 91 1a 01 	lds	r19, 0x011A
    3a78:	80 91 30 01 	lds	r24, 0x0130
    3a7c:	90 91 31 01 	lds	r25, 0x0131
    3a80:	28 17       	cp	r18, r24
    3a82:	39 07       	cpc	r19, r25
    3a84:	a1 f4       	brne	.+40     	; 0x3aae <__vector_5+0x7a>
	{

		/*Update Preload Value*/
		TIMER2_u8_TCNT2_REG = TIMER2_u8PreloadValue;
    3a86:	e4 e4       	ldi	r30, 0x44	; 68
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 91 32 01 	lds	r24, 0x0132
    3a8e:	80 83       	st	Z, r24

		/*Update OV Counter*/
		Local_u16CounterOVF = 0;
    3a90:	10 92 1a 01 	sts	0x011A, r1
    3a94:	10 92 19 01 	sts	0x0119, r1
		
		/*Call the application function*/
		if(TIMER2_pfOV != NULL)
    3a98:	80 91 15 01 	lds	r24, 0x0115
    3a9c:	90 91 16 01 	lds	r25, 0x0116
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	29 f0       	breq	.+10     	; 0x3aae <__vector_5+0x7a>
		{
			/*Dereferencing of the pointer*/
			TIMER2_pfOV();
    3aa4:	e0 91 15 01 	lds	r30, 0x0115
    3aa8:	f0 91 16 01 	lds	r31, 0x0116
    3aac:	09 95       	icall
		}
	}
}
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	ff 91       	pop	r31
    3ab4:	ef 91       	pop	r30
    3ab6:	bf 91       	pop	r27
    3ab8:	af 91       	pop	r26
    3aba:	9f 91       	pop	r25
    3abc:	8f 91       	pop	r24
    3abe:	7f 91       	pop	r23
    3ac0:	6f 91       	pop	r22
    3ac2:	5f 91       	pop	r21
    3ac4:	4f 91       	pop	r20
    3ac6:	3f 91       	pop	r19
    3ac8:	2f 91       	pop	r18
    3aca:	0f 90       	pop	r0
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	0f 90       	pop	r0
    3ad0:	1f 90       	pop	r1
    3ad2:	18 95       	reti

00003ad4 <__vector_4>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer2 Compare Match*/
void __vector_4(void)			__attribute__((signal));
void __vector_4(void)
{
    3ad4:	1f 92       	push	r1
    3ad6:	0f 92       	push	r0
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	0f 92       	push	r0
    3adc:	11 24       	eor	r1, r1
    3ade:	2f 93       	push	r18
    3ae0:	3f 93       	push	r19
    3ae2:	4f 93       	push	r20
    3ae4:	5f 93       	push	r21
    3ae6:	6f 93       	push	r22
    3ae8:	7f 93       	push	r23
    3aea:	8f 93       	push	r24
    3aec:	9f 93       	push	r25
    3aee:	af 93       	push	r26
    3af0:	bf 93       	push	r27
    3af2:	ef 93       	push	r30
    3af4:	ff 93       	push	r31
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3afe:	80 91 1b 01 	lds	r24, 0x011B
    3b02:	90 91 1c 01 	lds	r25, 0x011C
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	90 93 1c 01 	sts	0x011C, r25
    3b0c:	80 93 1b 01 	sts	0x011B, r24
	if(Local_u16CounterCTC == TIMER2_u16CTC_CounterValue)
    3b10:	20 91 1b 01 	lds	r18, 0x011B
    3b14:	30 91 1c 01 	lds	r19, 0x011C
    3b18:	80 91 33 01 	lds	r24, 0x0133
    3b1c:	90 91 34 01 	lds	r25, 0x0134
    3b20:	28 17       	cp	r18, r24
    3b22:	39 07       	cpc	r19, r25
    3b24:	79 f4       	brne	.+30     	; 0x3b44 <__vector_4+0x70>
	{
		/*Update OV Counter*/
		Local_u16CounterCTC = 0;
    3b26:	10 92 1c 01 	sts	0x011C, r1
    3b2a:	10 92 1b 01 	sts	0x011B, r1
		
		/*Call the application function*/
		if(TIMER2_pfCTC != NULL)
    3b2e:	80 91 17 01 	lds	r24, 0x0117
    3b32:	90 91 18 01 	lds	r25, 0x0118
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	29 f0       	breq	.+10     	; 0x3b44 <__vector_4+0x70>
		{
			/*Dereferencing of the pointer*/
			TIMER2_pfCTC();
    3b3a:	e0 91 17 01 	lds	r30, 0x0117
    3b3e:	f0 91 18 01 	lds	r31, 0x0118
    3b42:	09 95       	icall
		}
	}
}
    3b44:	cf 91       	pop	r28
    3b46:	df 91       	pop	r29
    3b48:	ff 91       	pop	r31
    3b4a:	ef 91       	pop	r30
    3b4c:	bf 91       	pop	r27
    3b4e:	af 91       	pop	r26
    3b50:	9f 91       	pop	r25
    3b52:	8f 91       	pop	r24
    3b54:	7f 91       	pop	r23
    3b56:	6f 91       	pop	r22
    3b58:	5f 91       	pop	r21
    3b5a:	4f 91       	pop	r20
    3b5c:	3f 91       	pop	r19
    3b5e:	2f 91       	pop	r18
    3b60:	0f 90       	pop	r0
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	0f 90       	pop	r0
    3b66:	1f 90       	pop	r1
    3b68:	18 95       	reti

00003b6a <main>:
volatile static u8 App_u8TimerHours;		//Global variable of u8 to store the Timer application's hours



int main(void)
{
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	c4 54       	subi	r28, 0x44	; 68
    3b74:	d0 40       	sbci	r29, 0x00	; 0
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
/*--------------------Local Variables--------------------*/
	u8 Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;		//Local u8 variable, used to get the pressed key from the keypad
    3b80:	8f ef       	ldi	r24, 0xFF	; 255
    3b82:	8f 87       	std	Y+15, r24	; 0x0f

	//Strings used in the welcome screen
	u8 Local_u8LCDString0[] = "....Welcome....";
    3b84:	ce 01       	movw	r24, r28
    3b86:	40 96       	adiw	r24, 0x10	; 16
    3b88:	9f ab       	std	Y+55, r25	; 0x37
    3b8a:	8e ab       	std	Y+54, r24	; 0x36
    3b8c:	e0 e6       	ldi	r30, 0x60	; 96
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	f9 af       	std	Y+57, r31	; 0x39
    3b92:	e8 af       	std	Y+56, r30	; 0x38
    3b94:	f0 e1       	ldi	r31, 0x10	; 16
    3b96:	fa af       	std	Y+58, r31	; 0x3a
    3b98:	e8 ad       	ldd	r30, Y+56	; 0x38
    3b9a:	f9 ad       	ldd	r31, Y+57	; 0x39
    3b9c:	00 80       	ld	r0, Z
    3b9e:	88 ad       	ldd	r24, Y+56	; 0x38
    3ba0:	99 ad       	ldd	r25, Y+57	; 0x39
    3ba2:	01 96       	adiw	r24, 0x01	; 1
    3ba4:	99 af       	std	Y+57, r25	; 0x39
    3ba6:	88 af       	std	Y+56, r24	; 0x38
    3ba8:	ee a9       	ldd	r30, Y+54	; 0x36
    3baa:	ff a9       	ldd	r31, Y+55	; 0x37
    3bac:	00 82       	st	Z, r0
    3bae:	8e a9       	ldd	r24, Y+54	; 0x36
    3bb0:	9f a9       	ldd	r25, Y+55	; 0x37
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	9f ab       	std	Y+55, r25	; 0x37
    3bb6:	8e ab       	std	Y+54, r24	; 0x36
    3bb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bba:	91 50       	subi	r25, 0x01	; 1
    3bbc:	9a af       	std	Y+58, r25	; 0x3a
    3bbe:	ea ad       	ldd	r30, Y+58	; 0x3a
    3bc0:	ee 23       	and	r30, r30
    3bc2:	51 f7       	brne	.-44     	; 0x3b98 <main+0x2e>
	u8 Local_u8LCDString1[] = "(1)Stopwatch";
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	80 96       	adiw	r24, 0x20	; 32
    3bc8:	9c af       	std	Y+60, r25	; 0x3c
    3bca:	8b af       	std	Y+59, r24	; 0x3b
    3bcc:	e0 e7       	ldi	r30, 0x70	; 112
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	fe af       	std	Y+62, r31	; 0x3e
    3bd2:	ed af       	std	Y+61, r30	; 0x3d
    3bd4:	fd e0       	ldi	r31, 0x0D	; 13
    3bd6:	ff af       	std	Y+63, r31	; 0x3f
    3bd8:	ed ad       	ldd	r30, Y+61	; 0x3d
    3bda:	fe ad       	ldd	r31, Y+62	; 0x3e
    3bdc:	00 80       	ld	r0, Z
    3bde:	8d ad       	ldd	r24, Y+61	; 0x3d
    3be0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	9e af       	std	Y+62, r25	; 0x3e
    3be6:	8d af       	std	Y+61, r24	; 0x3d
    3be8:	eb ad       	ldd	r30, Y+59	; 0x3b
    3bea:	fc ad       	ldd	r31, Y+60	; 0x3c
    3bec:	00 82       	st	Z, r0
    3bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bf2:	01 96       	adiw	r24, 0x01	; 1
    3bf4:	9c af       	std	Y+60, r25	; 0x3c
    3bf6:	8b af       	std	Y+59, r24	; 0x3b
    3bf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bfa:	91 50       	subi	r25, 0x01	; 1
    3bfc:	9f af       	std	Y+63, r25	; 0x3f
    3bfe:	ef ad       	ldd	r30, Y+63	; 0x3f
    3c00:	ee 23       	and	r30, r30
    3c02:	51 f7       	brne	.-44     	; 0x3bd8 <main+0x6e>
	u8 Local_u8LCDString2[] = "(2)Timer";
    3c04:	ce 01       	movw	r24, r28
    3c06:	8d 96       	adiw	r24, 0x2d	; 45
    3c08:	22 96       	adiw	r28, 0x02	; 2
    3c0a:	9f af       	std	Y+63, r25	; 0x3f
    3c0c:	8e af       	std	Y+62, r24	; 0x3e
    3c0e:	22 97       	sbiw	r28, 0x02	; 2
    3c10:	ed e7       	ldi	r30, 0x7D	; 125
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	24 96       	adiw	r28, 0x04	; 4
    3c16:	ff af       	std	Y+63, r31	; 0x3f
    3c18:	ee af       	std	Y+62, r30	; 0x3e
    3c1a:	24 97       	sbiw	r28, 0x04	; 4
    3c1c:	f9 e0       	ldi	r31, 0x09	; 9
    3c1e:	25 96       	adiw	r28, 0x05	; 5
    3c20:	ff af       	std	Y+63, r31	; 0x3f
    3c22:	25 97       	sbiw	r28, 0x05	; 5
    3c24:	24 96       	adiw	r28, 0x04	; 4
    3c26:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c28:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c2a:	24 97       	sbiw	r28, 0x04	; 4
    3c2c:	00 80       	ld	r0, Z
    3c2e:	24 96       	adiw	r28, 0x04	; 4
    3c30:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c32:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c34:	24 97       	sbiw	r28, 0x04	; 4
    3c36:	01 96       	adiw	r24, 0x01	; 1
    3c38:	24 96       	adiw	r28, 0x04	; 4
    3c3a:	9f af       	std	Y+63, r25	; 0x3f
    3c3c:	8e af       	std	Y+62, r24	; 0x3e
    3c3e:	24 97       	sbiw	r28, 0x04	; 4
    3c40:	22 96       	adiw	r28, 0x02	; 2
    3c42:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c44:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c46:	22 97       	sbiw	r28, 0x02	; 2
    3c48:	00 82       	st	Z, r0
    3c4a:	22 96       	adiw	r28, 0x02	; 2
    3c4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c50:	22 97       	sbiw	r28, 0x02	; 2
    3c52:	01 96       	adiw	r24, 0x01	; 1
    3c54:	22 96       	adiw	r28, 0x02	; 2
    3c56:	9f af       	std	Y+63, r25	; 0x3f
    3c58:	8e af       	std	Y+62, r24	; 0x3e
    3c5a:	22 97       	sbiw	r28, 0x02	; 2
    3c5c:	25 96       	adiw	r28, 0x05	; 5
    3c5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c60:	25 97       	sbiw	r28, 0x05	; 5
    3c62:	91 50       	subi	r25, 0x01	; 1
    3c64:	25 96       	adiw	r28, 0x05	; 5
    3c66:	9f af       	std	Y+63, r25	; 0x3f
    3c68:	25 97       	sbiw	r28, 0x05	; 5
    3c6a:	25 96       	adiw	r28, 0x05	; 5
    3c6c:	ef ad       	ldd	r30, Y+63	; 0x3f
    3c6e:	25 97       	sbiw	r28, 0x05	; 5
    3c70:	ee 23       	and	r30, r30
    3c72:	c1 f6       	brne	.-80     	; 0x3c24 <main+0xba>

/*--------------------Peripherals initializations--------------------*/
	/*initiate DIO*/
	DIO_voidInit();
    3c74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	/*initiate LCD*/
	LCD_voidInit();
    3c78:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <LCD_voidInit>
	/*EXTI set Callback*/
	EXTI_u8SetCallBack(EXTI_u8_INTERRUPT0 , &App_voidStopTimer0_EXTI);
    3c7c:	28 e7       	ldi	r18, 0x78	; 120
    3c7e:	32 e2       	ldi	r19, 0x22	; 34
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	b9 01       	movw	r22, r18
    3c84:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(EXTI_u8_INTERRUPT2 , &App_voidTurnOnTimer0_EXTI2);
    3c88:	25 eb       	ldi	r18, 0xB5	; 181
    3c8a:	32 e2       	ldi	r19, 0x22	; 34
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	b9 01       	movw	r22, r18
    3c90:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <EXTI_u8SetCallBack>
	/*Enable EXTI0*/
	EXTI_u8InterruptEnable(EXTI_u8_INTERRUPT0 , EXTI_u8_FALLING_EDGE);
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	62 e0       	ldi	r22, 0x02	; 2
    3c98:	0e 94 14 0b 	call	0x1628	; 0x1628 <EXTI_u8InterruptEnable>
	EXTI_u8InterruptEnable(EXTI_u8_INTERRUPT2 , EXTI_u8_FALLING_EDGE);
    3c9c:	82 e0       	ldi	r24, 0x02	; 2
    3c9e:	62 e0       	ldi	r22, 0x02	; 2
    3ca0:	0e 94 14 0b 	call	0x1628	; 0x1628 <EXTI_u8InterruptEnable>
	/*Enable General interrupt*/
	GI_voidEnable();
    3ca4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GI_voidEnable>
	 *Tick time = 1usec
	 *time of overflow = 256usec
	 *#of overflows to overflow at 1sec = 1*10**6/256 = 3906.25
	 *Overflows = 3907
	 *preload = 256 - 0.25 * 256 = 192*/
	TIMER0_u8SetCallBack_OV(3907 , &App_voidStopwatchOVFunction);		//Number of overflows = 3907
    3ca8:	29 eb       	ldi	r18, 0xB9	; 185
    3caa:	31 e2       	ldi	r19, 0x21	; 33
    3cac:	83 e4       	ldi	r24, 0x43	; 67
    3cae:	9f e0       	ldi	r25, 0x0F	; 15
    3cb0:	b9 01       	movw	r22, r18
    3cb2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <TIMER0_u8SetCallBack_OV>
	TIMER0_voidSetPReloadValue(192);									//OCR0 value = 192
    3cb6:	80 ec       	ldi	r24, 0xC0	; 192
    3cb8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <TIMER0_voidSetPReloadValue>

	/*Setup TIMER2 for Timer application (OVF every 1sec)*/
	TIMER2_u8SetCallBack_OV(3907 , &App_voidTimerOVFunction);		    //Number of overflows = 3907
    3cbc:	2c e8       	ldi	r18, 0x8C	; 140
    3cbe:	33 e2       	ldi	r19, 0x23	; 35
    3cc0:	83 e4       	ldi	r24, 0x43	; 67
    3cc2:	9f e0       	ldi	r25, 0x0F	; 15
    3cc4:	b9 01       	movw	r22, r18
    3cc6:	0e 94 19 1c 	call	0x3832	; 0x3832 <TIMER2_u8SetCallBack_OV>
	TIMER2_voidSetPReloadValue(192);									//OCR0 value = 192
    3cca:	80 ec       	ldi	r24, 0xC0	; 192
    3ccc:	0e 94 77 1c 	call	0x38ee	; 0x38ee <TIMER2_voidSetPReloadValue>

/*--------------------Welcome Screen--------------------*/
	LCD_voidSendString(Local_u8LCDString0);			//Send welcome message to LCD for 2 seconds
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	40 96       	adiw	r24, 0x10	; 16
    3cd4:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	aa ef       	ldi	r26, 0xFA	; 250
    3cde:	b4 e4       	ldi	r27, 0x44	; 68
    3ce0:	8b 87       	std	Y+11, r24	; 0x0b
    3ce2:	9c 87       	std	Y+12, r25	; 0x0c
    3ce4:	ad 87       	std	Y+13, r26	; 0x0d
    3ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	4a ef       	ldi	r20, 0xFA	; 250
    3cf6:	54 e4       	ldi	r21, 0x44	; 68
    3cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8f 83       	std	Y+7, r24	; 0x07
    3d02:	98 87       	std	Y+8, r25	; 0x08
    3d04:	a9 87       	std	Y+9, r26	; 0x09
    3d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d08:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0a:	78 85       	ldd	r23, Y+8	; 0x08
    3d0c:	89 85       	ldd	r24, Y+9	; 0x09
    3d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	5f e3       	ldi	r21, 0x3F	; 63
    3d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	2c f4       	brge	.+10     	; 0x3d2a <main+0x1c0>
		__ticks = 1;
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9e 83       	std	Y+6, r25	; 0x06
    3d26:	8d 83       	std	Y+5, r24	; 0x05
    3d28:	3f c0       	rjmp	.+126    	; 0x3da8 <main+0x23e>
	else if (__tmp > 65535)
    3d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2c:	78 85       	ldd	r23, Y+8	; 0x08
    3d2e:	89 85       	ldd	r24, Y+9	; 0x09
    3d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	3f ef       	ldi	r19, 0xFF	; 255
    3d36:	4f e7       	ldi	r20, 0x7F	; 127
    3d38:	57 e4       	ldi	r21, 0x47	; 71
    3d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3e:	18 16       	cp	r1, r24
    3d40:	4c f5       	brge	.+82     	; 0x3d94 <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e2       	ldi	r20, 0x20	; 32
    3d50:	51 e4       	ldi	r21, 0x41	; 65
    3d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	bc 01       	movw	r22, r24
    3d5c:	cd 01       	movw	r24, r26
    3d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	8d 83       	std	Y+5, r24	; 0x05
    3d6a:	0f c0       	rjmp	.+30     	; 0x3d8a <main+0x220>
    3d6c:	88 ec       	ldi	r24, 0xC8	; 200
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9c 83       	std	Y+4, r25	; 0x04
    3d72:	8b 83       	std	Y+3, r24	; 0x03
    3d74:	8b 81       	ldd	r24, Y+3	; 0x03
    3d76:	9c 81       	ldd	r25, Y+4	; 0x04
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	f1 f7       	brne	.-4      	; 0x3d78 <main+0x20e>
    3d7c:	9c 83       	std	Y+4, r25	; 0x04
    3d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	9e 83       	std	Y+6, r25	; 0x06
    3d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	69 f7       	brne	.-38     	; 0x3d6c <main+0x202>
    3d92:	14 c0       	rjmp	.+40     	; 0x3dbc <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d94:	6f 81       	ldd	r22, Y+7	; 0x07
    3d96:	78 85       	ldd	r23, Y+8	; 0x08
    3d98:	89 85       	ldd	r24, Y+9	; 0x09
    3d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	9e 83       	std	Y+6, r25	; 0x06
    3da6:	8d 83       	std	Y+5, r24	; 0x05
    3da8:	8d 81       	ldd	r24, Y+5	; 0x05
    3daa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dac:	9a 83       	std	Y+2, r25	; 0x02
    3dae:	89 83       	std	Y+1, r24	; 0x01
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	9a 81       	ldd	r25, Y+2	; 0x02
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <main+0x24a>
    3db8:	9a 83       	std	Y+2, r25	; 0x02
    3dba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_voidClearScreen();
    3dbc:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <LCD_voidClearScreen>

/*--------------------Choose Stopwatch/Timer screen--------------------*/
	//Display the applications options on LCD to be chosen from
	LCD_u8GoToXY(LCD_u8_LINE_ONE , 0);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8LCDString1);			//Press '1' to choose stopwatch application
    3dc8:	ce 01       	movw	r24, r28
    3dca:	80 96       	adiw	r24, 0x20	; 32
    3dcc:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8LCDString2);			//Press '0' to choose timer application
    3dd8:	ce 01       	movw	r24, r28
    3dda:	8d 96       	adiw	r24, 0x2d	; 45
    3ddc:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>

	while(1)
	{
		//Pull on KPD value
		KPD_u8GetPressedKey(&Local_u8PressedKey);
    3de0:	ce 01       	movw	r24, r28
    3de2:	0f 96       	adiw	r24, 0x0f	; 15
    3de4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <KPD_u8GetPressedKey>
		//Decide depending on the input
		if(Local_u8PressedKey != KPD_u8_KEY_NOT_PRESSED)
    3de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dea:	8f 3f       	cpi	r24, 0xFF	; 255
    3dec:	c9 f3       	breq	.-14     	; 0x3de0 <main+0x276>
		{
			if(Local_u8PressedKey == '1')	    	//'1' for stopwatch application
    3dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df0:	81 33       	cpi	r24, 0x31	; 49
    3df2:	29 f4       	brne	.+10     	; 0x3dfe <main+0x294>
			{
				Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	8f 87       	std	Y+15, r24	; 0x0f
				App_voidStopWatch();
    3df8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <App_voidStopWatch>
    3dfc:	f1 cf       	rjmp	.-30     	; 0x3de0 <main+0x276>
			}
			else if(Local_u8PressedKey == '2')		//'2' for timer application
    3dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e00:	82 33       	cpi	r24, 0x32	; 50
    3e02:	71 f7       	brne	.-36     	; 0x3de0 <main+0x276>
			{
				Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;
    3e04:	8f ef       	ldi	r24, 0xFF	; 255
    3e06:	8f 87       	std	Y+15, r24	; 0x0f
				App_voidTimer();
    3e08:	0e 94 77 1f 	call	0x3eee	; 0x3eee <App_voidTimer>
    3e0c:	e9 cf       	rjmp	.-46     	; 0x3de0 <main+0x276>

00003e0e <App_voidStartScreen>:
}


void App_voidStartScreen(void)
/*A function to set the starting screen in both applications*/
{
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
	//Creating the theme od the watch by placing zeros at specific locations
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 2);
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	62 e0       	ldi	r22, 0x02	; 2
    3e1a:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendChar('0');
    3e1e:	80 e3       	ldi	r24, 0x30	; 48
    3e20:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_voidSendChar('0');
    3e24:	80 e3       	ldi	r24, 0x30	; 48
    3e26:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 5);
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	65 e0       	ldi	r22, 0x05	; 5
    3e2e:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendChar(':');
    3e32:	8a e3       	ldi	r24, 0x3A	; 58
    3e34:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	67 e0       	ldi	r22, 0x07	; 7
    3e3c:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendChar('0');
    3e40:	80 e3       	ldi	r24, 0x30	; 48
    3e42:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_voidSendChar('0');
    3e46:	80 e3       	ldi	r24, 0x30	; 48
    3e48:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 10);
    3e4c:	82 e0       	ldi	r24, 0x02	; 2
    3e4e:	6a e0       	ldi	r22, 0x0A	; 10
    3e50:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendChar(':');
    3e54:	8a e3       	ldi	r24, 0x3A	; 58
    3e56:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_u8GoToXY(LCD_u8_LINE_TWO , 12);
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	6c e0       	ldi	r22, 0x0C	; 12
    3e5e:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendChar('0');
    3e62:	80 e3       	ldi	r24, 0x30	; 48
    3e64:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
	LCD_voidSendChar('0');
    3e68:	80 e3       	ldi	r24, 0x30	; 48
    3e6a:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_voidSendChar>
}
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	08 95       	ret

00003e74 <App_voidStopWatch>:


void App_voidStopWatch(void)
/*Stopwatch application function*/
{
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	2f 97       	sbiw	r28, 0x0f	; 15
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ArrStopwatch[] = "Stopwatch";		//An array of u8 to Write the choice on screen
    3e88:	ce 01       	movw	r24, r28
    3e8a:	01 96       	adiw	r24, 0x01	; 1
    3e8c:	9c 87       	std	Y+12, r25	; 0x0c
    3e8e:	8b 87       	std	Y+11, r24	; 0x0b
    3e90:	e6 e8       	ldi	r30, 0x86	; 134
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	fe 87       	std	Y+14, r31	; 0x0e
    3e96:	ed 87       	std	Y+13, r30	; 0x0d
    3e98:	fa e0       	ldi	r31, 0x0A	; 10
    3e9a:	ff 87       	std	Y+15, r31	; 0x0f
    3e9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ea0:	00 80       	ld	r0, Z
    3ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea6:	01 96       	adiw	r24, 0x01	; 1
    3ea8:	9e 87       	std	Y+14, r25	; 0x0e
    3eaa:	8d 87       	std	Y+13, r24	; 0x0d
    3eac:	eb 85       	ldd	r30, Y+11	; 0x0b
    3eae:	fc 85       	ldd	r31, Y+12	; 0x0c
    3eb0:	00 82       	st	Z, r0
    3eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3eb6:	01 96       	adiw	r24, 0x01	; 1
    3eb8:	9c 87       	std	Y+12, r25	; 0x0c
    3eba:	8b 87       	std	Y+11, r24	; 0x0b
    3ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ebe:	91 50       	subi	r25, 0x01	; 1
    3ec0:	9f 87       	std	Y+15, r25	; 0x0f
    3ec2:	ef 85       	ldd	r30, Y+15	; 0x0f
    3ec4:	ee 23       	and	r30, r30
    3ec6:	51 f7       	brne	.-44     	; 0x3e9c <App_voidStopWatch+0x28>
	LCD_voidClearScreen();							//Clear screen
    3ec8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <LCD_voidClearScreen>
	LCD_voidSendString(Local_u8ArrStopwatch);		//write the stopwatch keyword on screen
    3ecc:	ce 01       	movw	r24, r28
    3ece:	01 96       	adiw	r24, 0x01	; 1
    3ed0:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
	App_voidStartScreen();							//calling the start screen function to set the format of clock
    3ed4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <App_voidStartScreen>
	TIMER0_voidInit();								//Initiate Timer0 which controls stopwatch application
    3ed8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TIMER0_voidInit>
}
    3edc:	2f 96       	adiw	r28, 0x0f	; 15
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	08 95       	ret

00003eee <App_voidTimer>:


void App_voidTimer(void)
/*Timer application function*/
{
    3eee:	df 93       	push	r29
    3ef0:	cf 93       	push	r28
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	e7 97       	sbiw	r28, 0x37	; 55
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ScreenKey = KPD_u8_KEY_NOT_PRESSED;	//Reset the value of the pressed key
    3f02:	8f ef       	ldi	r24, 0xFF	; 255
    3f04:	8f 87       	std	Y+15, r24	; 0x0f
	volatile u8 Local_u8Position = 14;				//The initial location of the cursor
    3f06:	8e e0       	ldi	r24, 0x0E	; 14
    3f08:	88 8b       	std	Y+16, r24	; 0x10

	u8 Local_u8ArrTimer[] = "Timer";				//An array of u8 to Write the choice on screen
    3f0a:	9e 01       	movw	r18, r28
    3f0c:	2f 5e       	subi	r18, 0xEF	; 239
    3f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f10:	3a a7       	std	Y+42, r19	; 0x2a
    3f12:	29 a7       	std	Y+41, r18	; 0x29
    3f14:	80 e9       	ldi	r24, 0x90	; 144
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	9c a7       	std	Y+44, r25	; 0x2c
    3f1a:	8b a7       	std	Y+43, r24	; 0x2b
    3f1c:	96 e0       	ldi	r25, 0x06	; 6
    3f1e:	9d a7       	std	Y+45, r25	; 0x2d
    3f20:	eb a5       	ldd	r30, Y+43	; 0x2b
    3f22:	fc a5       	ldd	r31, Y+44	; 0x2c
    3f24:	00 80       	ld	r0, Z
    3f26:	2b a5       	ldd	r18, Y+43	; 0x2b
    3f28:	3c a5       	ldd	r19, Y+44	; 0x2c
    3f2a:	2f 5f       	subi	r18, 0xFF	; 255
    3f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2e:	3c a7       	std	Y+44, r19	; 0x2c
    3f30:	2b a7       	std	Y+43, r18	; 0x2b
    3f32:	e9 a5       	ldd	r30, Y+41	; 0x29
    3f34:	fa a5       	ldd	r31, Y+42	; 0x2a
    3f36:	00 82       	st	Z, r0
    3f38:	29 a5       	ldd	r18, Y+41	; 0x29
    3f3a:	3a a5       	ldd	r19, Y+42	; 0x2a
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	3a a7       	std	Y+42, r19	; 0x2a
    3f42:	29 a7       	std	Y+41, r18	; 0x29
    3f44:	3d a5       	ldd	r19, Y+45	; 0x2d
    3f46:	31 50       	subi	r19, 0x01	; 1
    3f48:	3d a7       	std	Y+45, r19	; 0x2d
    3f4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f4c:	88 23       	and	r24, r24
    3f4e:	41 f7       	brne	.-48     	; 0x3f20 <App_voidTimer+0x32>
	LCD_voidClearScreen();							//Clear screen
    3f50:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <LCD_voidClearScreen>
	LCD_voidSendString(Local_u8ArrTimer);			//Write the timer keyword on screen
    3f54:	ce 01       	movw	r24, r28
    3f56:	41 96       	adiw	r24, 0x11	; 17
    3f58:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
	App_voidStartScreen();							//Calling the start screen function to set the format of clock
    3f5c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <App_voidStartScreen>
    3f60:	92 c0       	rjmp	.+292    	; 0x4086 <App_voidTimer+0x198>

	while(Local_u8ScreenKey != 'S')					//While start button isn't pressed...
	{
		while(Local_u8ScreenKey == KPD_u8_KEY_NOT_PRESSED)	//Pull on the value of the pressed key
		{
			KPD_u8GetPressedKey(&Local_u8ScreenKey);
    3f62:	ce 01       	movw	r24, r28
    3f64:	0f 96       	adiw	r24, 0x0f	; 15
    3f66:	0e 94 67 0d 	call	0x1ace	; 0x1ace <KPD_u8GetPressedKey>
	LCD_voidSendString(Local_u8ArrTimer);			//Write the timer keyword on screen
	App_voidStartScreen();							//Calling the start screen function to set the format of clock

	while(Local_u8ScreenKey != 'S')					//While start button isn't pressed...
	{
		while(Local_u8ScreenKey == KPD_u8_KEY_NOT_PRESSED)	//Pull on the value of the pressed key
    3f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f6e:	c9 f3       	breq	.-14     	; 0x3f62 <App_voidTimer+0x74>
		{
			KPD_u8GetPressedKey(&Local_u8ScreenKey);
		}

		if(Local_u8ScreenKey == 'R')				//If 'R' is pressed, we move the cursor to right
    3f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f72:	82 35       	cpi	r24, 0x52	; 82
    3f74:	49 f4       	brne	.+18     	; 0x3f88 <App_voidTimer+0x9a>
		{
			LCD_u8_MoveCursor(LCD_u8MoveRight);
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_u8_MoveCursor>
			Local_u8ScreenKey = KPD_u8_KEY_NOT_PRESSED; //Reset the value of the pressed key to get the next key
    3f7c:	8f ef       	ldi	r24, 0xFF	; 255
    3f7e:	8f 87       	std	Y+15, r24	; 0x0f
			Local_u8Position++;							//Increase location by 1
    3f80:	88 89       	ldd	r24, Y+16	; 0x10
    3f82:	8f 5f       	subi	r24, 0xFF	; 255
    3f84:	88 8b       	std	Y+16, r24	; 0x10
    3f86:	7f c0       	rjmp	.+254    	; 0x4086 <App_voidTimer+0x198>
		}

		else if(Local_u8ScreenKey == 'L')			//If 'L' is pressed, we move the cursor to left
    3f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8a:	8c 34       	cpi	r24, 0x4C	; 76
    3f8c:	49 f4       	brne	.+18     	; 0x3fa0 <App_voidTimer+0xb2>
		{
			LCD_u8_MoveCursor(LCD_u8MoveLeft);
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_u8_MoveCursor>
			Local_u8ScreenKey = KPD_u8_KEY_NOT_PRESSED; //Reset the value of the pressed key to get the next key
    3f94:	8f ef       	ldi	r24, 0xFF	; 255
    3f96:	8f 87       	std	Y+15, r24	; 0x0f
			Local_u8Position--;							//Decrease location by 1
    3f98:	88 89       	ldd	r24, Y+16	; 0x10
    3f9a:	81 50       	subi	r24, 0x01	; 1
    3f9c:	88 8b       	std	Y+16, r24	; 0x10
    3f9e:	73 c0       	rjmp	.+230    	; 0x4086 <App_voidTimer+0x198>
		}
		else if((Local_u8ScreenKey >= '0') && (Local_u8ScreenKey <= '9'))	//if the pressed key is a number from 0-9
    3fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa2:	80 33       	cpi	r24, 0x30	; 48
    3fa4:	08 f4       	brcc	.+2      	; 0x3fa8 <App_voidTimer+0xba>
    3fa6:	6f c0       	rjmp	.+222    	; 0x4086 <App_voidTimer+0x198>
    3fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3faa:	8a 33       	cpi	r24, 0x3A	; 58
    3fac:	08 f0       	brcs	.+2      	; 0x3fb0 <App_voidTimer+0xc2>
    3fae:	6b c0       	rjmp	.+214    	; 0x4086 <App_voidTimer+0x198>
		{
			//Specifying the allowed locations to be used for writing time values
			//Locations 2,3 HOURS / Locations 7,8 MINUTES / Locations 12,13 SECONDS
			if((Local_u8Position == 2)||(Local_u8Position == 3)||(Local_u8Position == 7)||(Local_u8Position == 8)||(Local_u8Position == 12)||(Local_u8Position == 13))
    3fb0:	88 89       	ldd	r24, Y+16	; 0x10
    3fb2:	82 30       	cpi	r24, 0x02	; 2
    3fb4:	81 f0       	breq	.+32     	; 0x3fd6 <App_voidTimer+0xe8>
    3fb6:	88 89       	ldd	r24, Y+16	; 0x10
    3fb8:	83 30       	cpi	r24, 0x03	; 3
    3fba:	69 f0       	breq	.+26     	; 0x3fd6 <App_voidTimer+0xe8>
    3fbc:	88 89       	ldd	r24, Y+16	; 0x10
    3fbe:	87 30       	cpi	r24, 0x07	; 7
    3fc0:	51 f0       	breq	.+20     	; 0x3fd6 <App_voidTimer+0xe8>
    3fc2:	88 89       	ldd	r24, Y+16	; 0x10
    3fc4:	88 30       	cpi	r24, 0x08	; 8
    3fc6:	39 f0       	breq	.+14     	; 0x3fd6 <App_voidTimer+0xe8>
    3fc8:	88 89       	ldd	r24, Y+16	; 0x10
    3fca:	8c 30       	cpi	r24, 0x0C	; 12
    3fcc:	21 f0       	breq	.+8      	; 0x3fd6 <App_voidTimer+0xe8>
    3fce:	88 89       	ldd	r24, Y+16	; 0x10
    3fd0:	8d 30       	cpi	r24, 0x0D	; 13
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <App_voidTimer+0xe8>
    3fd4:	56 c0       	rjmp	.+172    	; 0x4082 <App_voidTimer+0x194>
			{
				LCD_voidSendNum(Local_u8ScreenKey - 48);		//Write the pressed number on screen - sub 48 to get int value fron ASCII
    3fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd8:	88 2f       	mov	r24, r24
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	c0 97       	sbiw	r24, 0x30	; 48
    3fde:	aa 27       	eor	r26, r26
    3fe0:	97 fd       	sbrc	r25, 7
    3fe2:	a0 95       	com	r26
    3fe4:	ba 2f       	mov	r27, r26
    3fe6:	bc 01       	movw	r22, r24
    3fe8:	cd 01       	movw	r24, r26
    3fea:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
				//LCD_voidSendNum(Local_u8Position);

				//Store the entered values for seconds/ minutes and hours in the time array based on the location
				switch(Local_u8Position)
    3fee:	88 89       	ldd	r24, Y+16	; 0x10
    3ff0:	e8 2f       	mov	r30, r24
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	f8 a7       	std	Y+40, r31	; 0x28
    3ff6:	ef a3       	std	Y+39, r30	; 0x27
    3ff8:	2f a1       	ldd	r18, Y+39	; 0x27
    3ffa:	38 a5       	ldd	r19, Y+40	; 0x28
    3ffc:	27 30       	cpi	r18, 0x07	; 7
    3ffe:	31 05       	cpc	r19, r1
    4000:	51 f1       	breq	.+84     	; 0x4056 <App_voidTimer+0x168>
    4002:	8f a1       	ldd	r24, Y+39	; 0x27
    4004:	98 a5       	ldd	r25, Y+40	; 0x28
    4006:	88 30       	cpi	r24, 0x08	; 8
    4008:	91 05       	cpc	r25, r1
    400a:	5c f4       	brge	.+22     	; 0x4022 <App_voidTimer+0x134>
    400c:	ef a1       	ldd	r30, Y+39	; 0x27
    400e:	f8 a5       	ldd	r31, Y+40	; 0x28
    4010:	e2 30       	cpi	r30, 0x02	; 2
    4012:	f1 05       	cpc	r31, r1
    4014:	b1 f0       	breq	.+44     	; 0x4042 <App_voidTimer+0x154>
    4016:	2f a1       	ldd	r18, Y+39	; 0x27
    4018:	38 a5       	ldd	r19, Y+40	; 0x28
    401a:	23 30       	cpi	r18, 0x03	; 3
    401c:	31 05       	cpc	r19, r1
    401e:	b1 f0       	breq	.+44     	; 0x404c <App_voidTimer+0x15e>
    4020:	2d c0       	rjmp	.+90     	; 0x407c <App_voidTimer+0x18e>
    4022:	8f a1       	ldd	r24, Y+39	; 0x27
    4024:	98 a5       	ldd	r25, Y+40	; 0x28
    4026:	8c 30       	cpi	r24, 0x0C	; 12
    4028:	91 05       	cpc	r25, r1
    402a:	f9 f0       	breq	.+62     	; 0x406a <App_voidTimer+0x17c>
    402c:	ef a1       	ldd	r30, Y+39	; 0x27
    402e:	f8 a5       	ldd	r31, Y+40	; 0x28
    4030:	ed 30       	cpi	r30, 0x0D	; 13
    4032:	f1 05       	cpc	r31, r1
    4034:	f9 f0       	breq	.+62     	; 0x4074 <App_voidTimer+0x186>
    4036:	2f a1       	ldd	r18, Y+39	; 0x27
    4038:	38 a5       	ldd	r19, Y+40	; 0x28
    403a:	28 30       	cpi	r18, 0x08	; 8
    403c:	31 05       	cpc	r19, r1
    403e:	81 f0       	breq	.+32     	; 0x4060 <App_voidTimer+0x172>
    4040:	1d c0       	rjmp	.+58     	; 0x407c <App_voidTimer+0x18e>
				{
				case 2:												//Hours
					App_u8TimeArr[0] = Local_u8ScreenKey - 48;
    4042:	8f 85       	ldd	r24, Y+15	; 0x0f
    4044:	80 53       	subi	r24, 0x30	; 48
    4046:	80 93 35 01 	sts	0x0135, r24
    404a:	18 c0       	rjmp	.+48     	; 0x407c <App_voidTimer+0x18e>
					break;

				case 3:
					App_u8TimeArr[1] = Local_u8ScreenKey - 48;
    404c:	8f 85       	ldd	r24, Y+15	; 0x0f
    404e:	80 53       	subi	r24, 0x30	; 48
    4050:	80 93 36 01 	sts	0x0136, r24
    4054:	13 c0       	rjmp	.+38     	; 0x407c <App_voidTimer+0x18e>
					break;

				case 7:												//Minutes
					App_u8TimeArr[2] = Local_u8ScreenKey - 48;
    4056:	8f 85       	ldd	r24, Y+15	; 0x0f
    4058:	80 53       	subi	r24, 0x30	; 48
    405a:	80 93 37 01 	sts	0x0137, r24
    405e:	0e c0       	rjmp	.+28     	; 0x407c <App_voidTimer+0x18e>
					break;

				case 8:
					App_u8TimeArr[3] = Local_u8ScreenKey - 48;
    4060:	8f 85       	ldd	r24, Y+15	; 0x0f
    4062:	80 53       	subi	r24, 0x30	; 48
    4064:	80 93 38 01 	sts	0x0138, r24
    4068:	09 c0       	rjmp	.+18     	; 0x407c <App_voidTimer+0x18e>
					break;

				case 12:											//Seconds
					App_u8TimeArr[4] = Local_u8ScreenKey - 48;
    406a:	8f 85       	ldd	r24, Y+15	; 0x0f
    406c:	80 53       	subi	r24, 0x30	; 48
    406e:	80 93 39 01 	sts	0x0139, r24
    4072:	04 c0       	rjmp	.+8      	; 0x407c <App_voidTimer+0x18e>
					break;

				case 13:
					App_u8TimeArr[5] = Local_u8ScreenKey - 48;
    4074:	8f 85       	ldd	r24, Y+15	; 0x0f
    4076:	80 53       	subi	r24, 0x30	; 48
    4078:	80 93 3a 01 	sts	0x013A, r24
					break;
				}

				Local_u8Position++;
    407c:	88 89       	ldd	r24, Y+16	; 0x10
    407e:	8f 5f       	subi	r24, 0xFF	; 255
    4080:	88 8b       	std	Y+16, r24	; 0x10
			}
			Local_u8ScreenKey = KPD_u8_KEY_NOT_PRESSED;
    4082:	8f ef       	ldi	r24, 0xFF	; 255
    4084:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8ArrTimer[] = "Timer";				//An array of u8 to Write the choice on screen
	LCD_voidClearScreen();							//Clear screen
	LCD_voidSendString(Local_u8ArrTimer);			//Write the timer keyword on screen
	App_voidStartScreen();							//Calling the start screen function to set the format of clock

	while(Local_u8ScreenKey != 'S')					//While start button isn't pressed...
    4086:	8f 85       	ldd	r24, Y+15	; 0x0f
    4088:	83 35       	cpi	r24, 0x53	; 83
    408a:	09 f0       	breq	.+2      	; 0x408e <App_voidTimer+0x1a0>
    408c:	6e cf       	rjmp	.-292    	; 0x3f6a <App_voidTimer+0x7c>

		}
	}
	/*When 'S' is pressed*/
	//Calculate the values of entered seconds, minutes and hours
	App_u8TimerHours   = App_u8TimeArr[0] * 10 + App_u8TimeArr[1];
    408e:	80 91 35 01 	lds	r24, 0x0135
    4092:	88 2f       	mov	r24, r24
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	9c 01       	movw	r18, r24
    4098:	22 0f       	add	r18, r18
    409a:	33 1f       	adc	r19, r19
    409c:	c9 01       	movw	r24, r18
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	88 0f       	add	r24, r24
    40a4:	99 1f       	adc	r25, r25
    40a6:	82 0f       	add	r24, r18
    40a8:	93 1f       	adc	r25, r19
    40aa:	98 2f       	mov	r25, r24
    40ac:	80 91 36 01 	lds	r24, 0x0136
    40b0:	89 0f       	add	r24, r25
    40b2:	80 93 40 01 	sts	0x0140, r24
	App_u8TimerMinutes = App_u8TimeArr[2] * 10 + App_u8TimeArr[3];
    40b6:	80 91 37 01 	lds	r24, 0x0137
    40ba:	88 2f       	mov	r24, r24
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9c 01       	movw	r18, r24
    40c0:	22 0f       	add	r18, r18
    40c2:	33 1f       	adc	r19, r19
    40c4:	c9 01       	movw	r24, r18
    40c6:	88 0f       	add	r24, r24
    40c8:	99 1f       	adc	r25, r25
    40ca:	88 0f       	add	r24, r24
    40cc:	99 1f       	adc	r25, r25
    40ce:	82 0f       	add	r24, r18
    40d0:	93 1f       	adc	r25, r19
    40d2:	98 2f       	mov	r25, r24
    40d4:	80 91 38 01 	lds	r24, 0x0138
    40d8:	89 0f       	add	r24, r25
    40da:	80 93 3f 01 	sts	0x013F, r24
	App_u8TimerSeconds = App_u8TimeArr[4] * 10 + App_u8TimeArr[5];
    40de:	80 91 39 01 	lds	r24, 0x0139
    40e2:	88 2f       	mov	r24, r24
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	9c 01       	movw	r18, r24
    40e8:	22 0f       	add	r18, r18
    40ea:	33 1f       	adc	r19, r19
    40ec:	c9 01       	movw	r24, r18
    40ee:	88 0f       	add	r24, r24
    40f0:	99 1f       	adc	r25, r25
    40f2:	88 0f       	add	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	82 0f       	add	r24, r18
    40f8:	93 1f       	adc	r25, r19
    40fa:	98 2f       	mov	r25, r24
    40fc:	80 91 3a 01 	lds	r24, 0x013A
    4100:	89 0f       	add	r24, r25
    4102:	80 93 3e 01 	sts	0x013E, r24


	//If conditions to specify the location of entered values
	//Hours
	if(App_u8TimerHours > 9)
    4106:	80 91 40 01 	lds	r24, 0x0140
    410a:	8a 30       	cpi	r24, 0x0A	; 10
    410c:	78 f0       	brcs	.+30     	; 0x412c <App_voidTimer+0x23e>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 2);
    410e:	82 e0       	ldi	r24, 0x02	; 2
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerHours);
    4116:	80 91 40 01 	lds	r24, 0x0140
    411a:	88 2f       	mov	r24, r24
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a0 e0       	ldi	r26, 0x00	; 0
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    412a:	0e c0       	rjmp	.+28     	; 0x4148 <App_voidTimer+0x25a>
	}
	else
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 3);
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	63 e0       	ldi	r22, 0x03	; 3
    4130:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerHours);
    4134:	80 91 40 01 	lds	r24, 0x0140
    4138:	88 2f       	mov	r24, r24
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a0 e0       	ldi	r26, 0x00	; 0
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	bc 01       	movw	r22, r24
    4142:	cd 01       	movw	r24, r26
    4144:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
	}

	//-----
	//Minutes
	if(App_u8TimerMinutes > 9)
    4148:	80 91 3f 01 	lds	r24, 0x013F
    414c:	8a 30       	cpi	r24, 0x0A	; 10
    414e:	78 f0       	brcs	.+30     	; 0x416e <App_voidTimer+0x280>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	67 e0       	ldi	r22, 0x07	; 7
    4154:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerMinutes);
    4158:	80 91 3f 01 	lds	r24, 0x013F
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	a0 e0       	ldi	r26, 0x00	; 0
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    416c:	0e c0       	rjmp	.+28     	; 0x418a <App_voidTimer+0x29c>
	}
	else
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 8);
    416e:	82 e0       	ldi	r24, 0x02	; 2
    4170:	68 e0       	ldi	r22, 0x08	; 8
    4172:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerMinutes);
    4176:	80 91 3f 01 	lds	r24, 0x013F
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	a0 e0       	ldi	r26, 0x00	; 0
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
	}

	//-----
	//Seconds
	if(App_u8TimerSeconds > 9)
    418a:	80 91 3e 01 	lds	r24, 0x013E
    418e:	8a 30       	cpi	r24, 0x0A	; 10
    4190:	78 f0       	brcs	.+30     	; 0x41b0 <App_voidTimer+0x2c2>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 12);
    4192:	82 e0       	ldi	r24, 0x02	; 2
    4194:	6c e0       	ldi	r22, 0x0C	; 12
    4196:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerSeconds);
    419a:	80 91 3e 01 	lds	r24, 0x013E
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	a0 e0       	ldi	r26, 0x00	; 0
    41a4:	b0 e0       	ldi	r27, 0x00	; 0
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    41ae:	0e c0       	rjmp	.+28     	; 0x41cc <App_voidTimer+0x2de>
	}
	else
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 13);
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	6d e0       	ldi	r22, 0x0D	; 13
    41b4:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(App_u8TimerSeconds);
    41b8:	80 91 3e 01 	lds	r24, 0x013E
    41bc:	88 2f       	mov	r24, r24
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	a0 e0       	ldi	r26, 0x00	; 0
    41c2:	b0 e0       	ldi	r27, 0x00	; 0
    41c4:	bc 01       	movw	r22, r24
    41c6:	cd 01       	movw	r24, r26
    41c8:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
	}

	u8 Local_u8StartArr[] = "Start..";					//An array of u8 to inform the start of timer
    41cc:	ce 01       	movw	r24, r28
    41ce:	47 96       	adiw	r24, 0x17	; 23
    41d0:	9f a7       	std	Y+47, r25	; 0x2f
    41d2:	8e a7       	std	Y+46, r24	; 0x2e
    41d4:	e6 e9       	ldi	r30, 0x96	; 150
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	f9 ab       	std	Y+49, r31	; 0x31
    41da:	e8 ab       	std	Y+48, r30	; 0x30
    41dc:	f8 e0       	ldi	r31, 0x08	; 8
    41de:	fa ab       	std	Y+50, r31	; 0x32
    41e0:	e8 a9       	ldd	r30, Y+48	; 0x30
    41e2:	f9 a9       	ldd	r31, Y+49	; 0x31
    41e4:	00 80       	ld	r0, Z
    41e6:	28 a9       	ldd	r18, Y+48	; 0x30
    41e8:	39 a9       	ldd	r19, Y+49	; 0x31
    41ea:	2f 5f       	subi	r18, 0xFF	; 255
    41ec:	3f 4f       	sbci	r19, 0xFF	; 255
    41ee:	39 ab       	std	Y+49, r19	; 0x31
    41f0:	28 ab       	std	Y+48, r18	; 0x30
    41f2:	ee a5       	ldd	r30, Y+46	; 0x2e
    41f4:	ff a5       	ldd	r31, Y+47	; 0x2f
    41f6:	00 82       	st	Z, r0
    41f8:	2e a5       	ldd	r18, Y+46	; 0x2e
    41fa:	3f a5       	ldd	r19, Y+47	; 0x2f
    41fc:	2f 5f       	subi	r18, 0xFF	; 255
    41fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4200:	3f a7       	std	Y+47, r19	; 0x2f
    4202:	2e a7       	std	Y+46, r18	; 0x2e
    4204:	3a a9       	ldd	r19, Y+50	; 0x32
    4206:	31 50       	subi	r19, 0x01	; 1
    4208:	3a ab       	std	Y+50, r19	; 0x32
    420a:	8a a9       	ldd	r24, Y+50	; 0x32
    420c:	88 23       	and	r24, r24
    420e:	41 f7       	brne	.-48     	; 0x41e0 <App_voidTimer+0x2f2>
	u8 Local_u8Clear[] = "       ";
    4210:	fe 01       	movw	r30, r28
    4212:	7f 96       	adiw	r30, 0x1f	; 31
    4214:	fc ab       	std	Y+52, r31	; 0x34
    4216:	eb ab       	std	Y+51, r30	; 0x33
    4218:	2e e9       	ldi	r18, 0x9E	; 158
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	3e ab       	std	Y+54, r19	; 0x36
    421e:	2d ab       	std	Y+53, r18	; 0x35
    4220:	38 e0       	ldi	r19, 0x08	; 8
    4222:	3f ab       	std	Y+55, r19	; 0x37
    4224:	ed a9       	ldd	r30, Y+53	; 0x35
    4226:	fe a9       	ldd	r31, Y+54	; 0x36
    4228:	00 80       	ld	r0, Z
    422a:	2d a9       	ldd	r18, Y+53	; 0x35
    422c:	3e a9       	ldd	r19, Y+54	; 0x36
    422e:	2f 5f       	subi	r18, 0xFF	; 255
    4230:	3f 4f       	sbci	r19, 0xFF	; 255
    4232:	3e ab       	std	Y+54, r19	; 0x36
    4234:	2d ab       	std	Y+53, r18	; 0x35
    4236:	eb a9       	ldd	r30, Y+51	; 0x33
    4238:	fc a9       	ldd	r31, Y+52	; 0x34
    423a:	00 82       	st	Z, r0
    423c:	2b a9       	ldd	r18, Y+51	; 0x33
    423e:	3c a9       	ldd	r19, Y+52	; 0x34
    4240:	2f 5f       	subi	r18, 0xFF	; 255
    4242:	3f 4f       	sbci	r19, 0xFF	; 255
    4244:	3c ab       	std	Y+52, r19	; 0x34
    4246:	2b ab       	std	Y+51, r18	; 0x33
    4248:	3f a9       	ldd	r19, Y+55	; 0x37
    424a:	31 50       	subi	r19, 0x01	; 1
    424c:	3f ab       	std	Y+55, r19	; 0x37
    424e:	8f a9       	ldd	r24, Y+55	; 0x37
    4250:	88 23       	and	r24, r24
    4252:	41 f7       	brne	.-48     	; 0x4224 <App_voidTimer+0x336>

	TIMER0_voidEnableTIMER0();							//Initiate Timer1 which controls timer application
    4254:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <TIMER0_voidEnableTIMER0>

	LCD_u8GoToXY(LCD_u8_LINE_ONE , 9);					//Send "Start" keyword to screen
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	69 e0       	ldi	r22, 0x09	; 9
    425c:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8StartArr);
    4260:	ce 01       	movw	r24, r28
    4262:	47 96       	adiw	r24, 0x17	; 23
    4264:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	aa ef       	ldi	r26, 0xFA	; 250
    426e:	b3 e4       	ldi	r27, 0x43	; 67
    4270:	8b 87       	std	Y+11, r24	; 0x0b
    4272:	9c 87       	std	Y+12, r25	; 0x0c
    4274:	ad 87       	std	Y+13, r26	; 0x0d
    4276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4278:	6b 85       	ldd	r22, Y+11	; 0x0b
    427a:	7c 85       	ldd	r23, Y+12	; 0x0c
    427c:	8d 85       	ldd	r24, Y+13	; 0x0d
    427e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	4a ef       	ldi	r20, 0xFA	; 250
    4286:	54 e4       	ldi	r21, 0x44	; 68
    4288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	8f 83       	std	Y+7, r24	; 0x07
    4292:	98 87       	std	Y+8, r25	; 0x08
    4294:	a9 87       	std	Y+9, r26	; 0x09
    4296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4298:	6f 81       	ldd	r22, Y+7	; 0x07
    429a:	78 85       	ldd	r23, Y+8	; 0x08
    429c:	89 85       	ldd	r24, Y+9	; 0x09
    429e:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e8       	ldi	r20, 0x80	; 128
    42a6:	5f e3       	ldi	r21, 0x3F	; 63
    42a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ac:	88 23       	and	r24, r24
    42ae:	2c f4       	brge	.+10     	; 0x42ba <App_voidTimer+0x3cc>
		__ticks = 1;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	9e 83       	std	Y+6, r25	; 0x06
    42b6:	8d 83       	std	Y+5, r24	; 0x05
    42b8:	3f c0       	rjmp	.+126    	; 0x4338 <App_voidTimer+0x44a>
	else if (__tmp > 65535)
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	3f ef       	ldi	r19, 0xFF	; 255
    42c6:	4f e7       	ldi	r20, 0x7F	; 127
    42c8:	57 e4       	ldi	r21, 0x47	; 71
    42ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ce:	18 16       	cp	r1, r24
    42d0:	4c f5       	brge	.+82     	; 0x4324 <App_voidTimer+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e2       	ldi	r20, 0x20	; 32
    42e0:	51 e4       	ldi	r21, 0x41	; 65
    42e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	bc 01       	movw	r22, r24
    42ec:	cd 01       	movw	r24, r26
    42ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	9e 83       	std	Y+6, r25	; 0x06
    42f8:	8d 83       	std	Y+5, r24	; 0x05
    42fa:	0f c0       	rjmp	.+30     	; 0x431a <App_voidTimer+0x42c>
    42fc:	88 ec       	ldi	r24, 0xC8	; 200
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	8b 83       	std	Y+3, r24	; 0x03
    4304:	8b 81       	ldd	r24, Y+3	; 0x03
    4306:	9c 81       	ldd	r25, Y+4	; 0x04
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <App_voidTimer+0x41a>
    430c:	9c 83       	std	Y+4, r25	; 0x04
    430e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4310:	8d 81       	ldd	r24, Y+5	; 0x05
    4312:	9e 81       	ldd	r25, Y+6	; 0x06
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	9e 83       	std	Y+6, r25	; 0x06
    4318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    431a:	8d 81       	ldd	r24, Y+5	; 0x05
    431c:	9e 81       	ldd	r25, Y+6	; 0x06
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	69 f7       	brne	.-38     	; 0x42fc <App_voidTimer+0x40e>
    4322:	14 c0       	rjmp	.+40     	; 0x434c <App_voidTimer+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4324:	6f 81       	ldd	r22, Y+7	; 0x07
    4326:	78 85       	ldd	r23, Y+8	; 0x08
    4328:	89 85       	ldd	r24, Y+9	; 0x09
    432a:	9a 85       	ldd	r25, Y+10	; 0x0a
    432c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	9e 83       	std	Y+6, r25	; 0x06
    4336:	8d 83       	std	Y+5, r24	; 0x05
    4338:	8d 81       	ldd	r24, Y+5	; 0x05
    433a:	9e 81       	ldd	r25, Y+6	; 0x06
    433c:	9a 83       	std	Y+2, r25	; 0x02
    433e:	89 83       	std	Y+1, r24	; 0x01
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	9a 81       	ldd	r25, Y+2	; 0x02
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	f1 f7       	brne	.-4      	; 0x4344 <App_voidTimer+0x456>
    4348:	9a 83       	std	Y+2, r25	; 0x02
    434a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);										//Delay for 500msec
	LCD_u8GoToXY(LCD_u8_LINE_ONE , 9);
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	69 e0       	ldi	r22, 0x09	; 9
    4350:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8Clear);					//Erase "Start" keyword
    4354:	ce 01       	movw	r24, r28
    4356:	4f 96       	adiw	r24, 0x1f	; 31
    4358:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
	TIMER2_voidInit();
    435c:	0e 94 a5 1c 	call	0x394a	; 0x394a <TIMER2_voidInit>
}
    4360:	e7 96       	adiw	r28, 0x37	; 55
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <App_voidStopwatchOVFunction>:


void App_voidStopwatchOVFunction(void)
/*TIMER0 ISR function, used with stopwatch application to count up time*/
{
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 0;			//A local variable of u8 to control the timing for seconds
	static u8 Local_u8MinCounter = 0;		//A local variable of u8 to control the timing for minutes
	static u8 Local_u8HourCounter = 0;		//A local variable of u8 to control the timing for hours

	Local_u8Counter++;						//Increase seconds counter with each overflow which happens every 1sec
    437a:	80 91 3d 01 	lds	r24, 0x013D
    437e:	8f 5f       	subi	r24, 0xFF	; 255
    4380:	80 93 3d 01 	sts	0x013D, r24

	/*If condition to check the location of the seconds count on the screen format*/
	if(Local_u8Counter < 10)
    4384:	80 91 3d 01 	lds	r24, 0x013D
    4388:	8a 30       	cpi	r24, 0x0A	; 10
    438a:	78 f4       	brcc	.+30     	; 0x43aa <App_voidStopwatchOVFunction+0x38>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 13);
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	6d e0       	ldi	r22, 0x0D	; 13
    4390:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(Local_u8Counter);
    4394:	80 91 3d 01 	lds	r24, 0x013D
    4398:	88 2f       	mov	r24, r24
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	a0 e0       	ldi	r26, 0x00	; 0
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	bc 01       	movw	r22, r24
    43a2:	cd 01       	movw	r24, r26
    43a4:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    43a8:	a0 c0       	rjmp	.+320    	; 0x44ea <App_voidStopwatchOVFunction+0x178>
	}
	else if((Local_u8Counter > 9) && (Local_u8Counter < 60))
    43aa:	80 91 3d 01 	lds	r24, 0x013D
    43ae:	8a 30       	cpi	r24, 0x0A	; 10
    43b0:	98 f0       	brcs	.+38     	; 0x43d8 <App_voidStopwatchOVFunction+0x66>
    43b2:	80 91 3d 01 	lds	r24, 0x013D
    43b6:	8c 33       	cpi	r24, 0x3C	; 60
    43b8:	78 f4       	brcc	.+30     	; 0x43d8 <App_voidStopwatchOVFunction+0x66>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 12);
    43ba:	82 e0       	ldi	r24, 0x02	; 2
    43bc:	6c e0       	ldi	r22, 0x0C	; 12
    43be:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(Local_u8Counter);
    43c2:	80 91 3d 01 	lds	r24, 0x013D
    43c6:	88 2f       	mov	r24, r24
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	a0 e0       	ldi	r26, 0x00	; 0
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	bc 01       	movw	r22, r24
    43d0:	cd 01       	movw	r24, r26
    43d2:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    43d6:	89 c0       	rjmp	.+274    	; 0x44ea <App_voidStopwatchOVFunction+0x178>
	}
	else									//If the number of seconds exceeded 60sec, the screen will move to minutes field
	{
		Local_u8MinCounter++;				//Increase minutes counter each time this condition is achieved
    43d8:	80 91 3c 01 	lds	r24, 0x013C
    43dc:	8f 5f       	subi	r24, 0xFF	; 255
    43de:	80 93 3c 01 	sts	0x013C, r24
		Local_u8Counter = 0;				//Reset the counter of seconds again
    43e2:	10 92 3d 01 	sts	0x013D, r1

		LCD_u8GoToXY(LCD_u8_LINE_TWO , 12); //Write 0s in seconds fields when this conditions is achieved
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	6c e0       	ldi	r22, 0x0C	; 12
    43ea:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(0);
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 13);
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	6d e0       	ldi	r22, 0x0D	; 13
    43fe:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
		LCD_voidSendNum(0);
    4402:	60 e0       	ldi	r22, 0x00	; 0
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>

		/*If condition to check the location of the minutes count on the screen format*/
		if(Local_u8MinCounter < 10)
    440e:	80 91 3c 01 	lds	r24, 0x013C
    4412:	8a 30       	cpi	r24, 0x0A	; 10
    4414:	78 f4       	brcc	.+30     	; 0x4434 <App_voidStopwatchOVFunction+0xc2>
		{
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 8);
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	68 e0       	ldi	r22, 0x08	; 8
    441a:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(Local_u8MinCounter);
    441e:	80 91 3c 01 	lds	r24, 0x013C
    4422:	88 2f       	mov	r24, r24
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	a0 e0       	ldi	r26, 0x00	; 0
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4432:	5b c0       	rjmp	.+182    	; 0x44ea <App_voidStopwatchOVFunction+0x178>
		}
		else if((Local_u8MinCounter > 9) && (Local_u8MinCounter < 60))
    4434:	80 91 3c 01 	lds	r24, 0x013C
    4438:	8a 30       	cpi	r24, 0x0A	; 10
    443a:	98 f0       	brcs	.+38     	; 0x4462 <App_voidStopwatchOVFunction+0xf0>
    443c:	80 91 3c 01 	lds	r24, 0x013C
    4440:	8c 33       	cpi	r24, 0x3C	; 60
    4442:	78 f4       	brcc	.+30     	; 0x4462 <App_voidStopwatchOVFunction+0xf0>
		{
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);
    4444:	82 e0       	ldi	r24, 0x02	; 2
    4446:	67 e0       	ldi	r22, 0x07	; 7
    4448:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(Local_u8MinCounter);
    444c:	80 91 3c 01 	lds	r24, 0x013C
    4450:	88 2f       	mov	r24, r24
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	a0 e0       	ldi	r26, 0x00	; 0
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	bc 01       	movw	r22, r24
    445a:	cd 01       	movw	r24, r26
    445c:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4460:	44 c0       	rjmp	.+136    	; 0x44ea <App_voidStopwatchOVFunction+0x178>
		}
		else								//If the number of minutes exceeded 60min, the screen will move to hours field
		{
			Local_u8HourCounter++;			//Increase hours counter each time this condition is achieved
    4462:	80 91 3b 01 	lds	r24, 0x013B
    4466:	8f 5f       	subi	r24, 0xFF	; 255
    4468:	80 93 3b 01 	sts	0x013B, r24
			Local_u8MinCounter = 0;			//Reset the counter of minutes again
    446c:	10 92 3c 01 	sts	0x013C, r1

			LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);	//Write 0s in minutes fields when this conditions is achieved
    4470:	82 e0       	ldi	r24, 0x02	; 2
    4472:	67 e0       	ldi	r22, 0x07	; 7
    4474:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(0);
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 8);
    4484:	82 e0       	ldi	r24, 0x02	; 2
    4486:	68 e0       	ldi	r22, 0x08	; 8
    4488:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(0);
    448c:	60 e0       	ldi	r22, 0x00	; 0
    448e:	70 e0       	ldi	r23, 0x00	; 0
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>

			/*If condition to check the location of the hours count on the screen format*/
			if(Local_u8HourCounter < 10)
    4498:	80 91 3b 01 	lds	r24, 0x013B
    449c:	8a 30       	cpi	r24, 0x0A	; 10
    449e:	78 f4       	brcc	.+30     	; 0x44be <App_voidStopwatchOVFunction+0x14c>
			{
				LCD_u8GoToXY(LCD_u8_LINE_TWO , 3);
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	63 e0       	ldi	r22, 0x03	; 3
    44a4:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
				LCD_voidSendNum(Local_u8HourCounter);
    44a8:	80 91 3b 01 	lds	r24, 0x013B
    44ac:	88 2f       	mov	r24, r24
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	a0 e0       	ldi	r26, 0x00	; 0
    44b2:	b0 e0       	ldi	r27, 0x00	; 0
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    44bc:	16 c0       	rjmp	.+44     	; 0x44ea <App_voidStopwatchOVFunction+0x178>
			}
			else if((Local_u8HourCounter > 9) && (Local_u8HourCounter < 100))
    44be:	80 91 3b 01 	lds	r24, 0x013B
    44c2:	8a 30       	cpi	r24, 0x0A	; 10
    44c4:	90 f0       	brcs	.+36     	; 0x44ea <App_voidStopwatchOVFunction+0x178>
    44c6:	80 91 3b 01 	lds	r24, 0x013B
    44ca:	84 36       	cpi	r24, 0x64	; 100
    44cc:	70 f4       	brcc	.+28     	; 0x44ea <App_voidStopwatchOVFunction+0x178>
			{
				LCD_u8GoToXY(LCD_u8_LINE_TWO , 2);
    44ce:	82 e0       	ldi	r24, 0x02	; 2
    44d0:	62 e0       	ldi	r22, 0x02	; 2
    44d2:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
				LCD_voidSendNum(Local_u8HourCounter);
    44d6:	80 91 3b 01 	lds	r24, 0x013B
    44da:	88 2f       	mov	r24, r24
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	a0 e0       	ldi	r26, 0x00	; 0
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
			}
		}
	}
}
    44ea:	cf 91       	pop	r28
    44ec:	df 91       	pop	r29
    44ee:	08 95       	ret

000044f0 <App_voidStopTimer0_EXTI>:


void App_voidStopTimer0_EXTI(void)
/*EXTI0 ISR function, used to pause the stopwatch*/
{
    44f0:	df 93       	push	r29
    44f2:	cf 93       	push	r28
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	2b 97       	sbiw	r28, 0x0b	; 11
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	f8 94       	cli
    44fe:	de bf       	out	0x3e, r29	; 62
    4500:	0f be       	out	0x3f, r0	; 63
    4502:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PauseArr[] = "Pause";			//An array of u8 to hold a "Pause" message
    4504:	ce 01       	movw	r24, r28
    4506:	01 96       	adiw	r24, 0x01	; 1
    4508:	98 87       	std	Y+8, r25	; 0x08
    450a:	8f 83       	std	Y+7, r24	; 0x07
    450c:	e6 ea       	ldi	r30, 0xA6	; 166
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	fa 87       	std	Y+10, r31	; 0x0a
    4512:	e9 87       	std	Y+9, r30	; 0x09
    4514:	f6 e0       	ldi	r31, 0x06	; 6
    4516:	fb 87       	std	Y+11, r31	; 0x0b
    4518:	e9 85       	ldd	r30, Y+9	; 0x09
    451a:	fa 85       	ldd	r31, Y+10	; 0x0a
    451c:	00 80       	ld	r0, Z
    451e:	89 85       	ldd	r24, Y+9	; 0x09
    4520:	9a 85       	ldd	r25, Y+10	; 0x0a
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	9a 87       	std	Y+10, r25	; 0x0a
    4526:	89 87       	std	Y+9, r24	; 0x09
    4528:	ef 81       	ldd	r30, Y+7	; 0x07
    452a:	f8 85       	ldd	r31, Y+8	; 0x08
    452c:	00 82       	st	Z, r0
    452e:	8f 81       	ldd	r24, Y+7	; 0x07
    4530:	98 85       	ldd	r25, Y+8	; 0x08
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	98 87       	std	Y+8, r25	; 0x08
    4536:	8f 83       	std	Y+7, r24	; 0x07
    4538:	9b 85       	ldd	r25, Y+11	; 0x0b
    453a:	91 50       	subi	r25, 0x01	; 1
    453c:	9b 87       	std	Y+11, r25	; 0x0b
    453e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4540:	ee 23       	and	r30, r30
    4542:	51 f7       	brne	.-44     	; 0x4518 <App_voidStopTimer0_EXTI+0x28>
	TIMER0_voidStopTIMER0();					//Stop timer0 interrupt
    4544:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <TIMER0_voidStopTIMER0>

	LCD_u8GoToXY(LCD_u8_LINE_ONE , 11);			//send "Pause" message
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	6b e0       	ldi	r22, 0x0B	; 11
    454c:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8PauseArr);
    4550:	ce 01       	movw	r24, r28
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
}
    4558:	2b 96       	adiw	r28, 0x0b	; 11
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	f8 94       	cli
    455e:	de bf       	out	0x3e, r29	; 62
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	cd bf       	out	0x3d, r28	; 61
    4564:	cf 91       	pop	r28
    4566:	df 91       	pop	r29
    4568:	08 95       	ret

0000456a <App_voidTurnOnTimer0_EXTI2>:


void App_voidTurnOnTimer0_EXTI2(void)
/*EXTI2 ISR function, used to resume the stopwatch*/
{
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	a6 97       	sbiw	r28, 0x26	; 38
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PauseArr[] = "Resume";			//An array of u8 to hold a "Resume" message
    457e:	ce 01       	movw	r24, r28
    4580:	0f 96       	adiw	r24, 0x0f	; 15
    4582:	9e 8f       	std	Y+30, r25	; 0x1e
    4584:	8d 8f       	std	Y+29, r24	; 0x1d
    4586:	ec ea       	ldi	r30, 0xAC	; 172
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	f8 a3       	std	Y+32, r31	; 0x20
    458c:	ef 8f       	std	Y+31, r30	; 0x1f
    458e:	f7 e0       	ldi	r31, 0x07	; 7
    4590:	f9 a3       	std	Y+33, r31	; 0x21
    4592:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4594:	f8 a1       	ldd	r31, Y+32	; 0x20
    4596:	00 80       	ld	r0, Z
    4598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    459a:	98 a1       	ldd	r25, Y+32	; 0x20
    459c:	01 96       	adiw	r24, 0x01	; 1
    459e:	98 a3       	std	Y+32, r25	; 0x20
    45a0:	8f 8f       	std	Y+31, r24	; 0x1f
    45a2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    45a4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    45a6:	00 82       	st	Z, r0
    45a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45ac:	01 96       	adiw	r24, 0x01	; 1
    45ae:	9e 8f       	std	Y+30, r25	; 0x1e
    45b0:	8d 8f       	std	Y+29, r24	; 0x1d
    45b2:	99 a1       	ldd	r25, Y+33	; 0x21
    45b4:	91 50       	subi	r25, 0x01	; 1
    45b6:	99 a3       	std	Y+33, r25	; 0x21
    45b8:	e9 a1       	ldd	r30, Y+33	; 0x21
    45ba:	ee 23       	and	r30, r30
    45bc:	51 f7       	brne	.-44     	; 0x4592 <App_voidTurnOnTimer0_EXTI2+0x28>
	u8 Local_u8Clear[] = "      ";
    45be:	ce 01       	movw	r24, r28
    45c0:	46 96       	adiw	r24, 0x16	; 22
    45c2:	9b a3       	std	Y+35, r25	; 0x23
    45c4:	8a a3       	std	Y+34, r24	; 0x22
    45c6:	e3 eb       	ldi	r30, 0xB3	; 179
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	fd a3       	std	Y+37, r31	; 0x25
    45cc:	ec a3       	std	Y+36, r30	; 0x24
    45ce:	f7 e0       	ldi	r31, 0x07	; 7
    45d0:	fe a3       	std	Y+38, r31	; 0x26
    45d2:	ec a1       	ldd	r30, Y+36	; 0x24
    45d4:	fd a1       	ldd	r31, Y+37	; 0x25
    45d6:	00 80       	ld	r0, Z
    45d8:	8c a1       	ldd	r24, Y+36	; 0x24
    45da:	9d a1       	ldd	r25, Y+37	; 0x25
    45dc:	01 96       	adiw	r24, 0x01	; 1
    45de:	9d a3       	std	Y+37, r25	; 0x25
    45e0:	8c a3       	std	Y+36, r24	; 0x24
    45e2:	ea a1       	ldd	r30, Y+34	; 0x22
    45e4:	fb a1       	ldd	r31, Y+35	; 0x23
    45e6:	00 82       	st	Z, r0
    45e8:	8a a1       	ldd	r24, Y+34	; 0x22
    45ea:	9b a1       	ldd	r25, Y+35	; 0x23
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	9b a3       	std	Y+35, r25	; 0x23
    45f0:	8a a3       	std	Y+34, r24	; 0x22
    45f2:	9e a1       	ldd	r25, Y+38	; 0x26
    45f4:	91 50       	subi	r25, 0x01	; 1
    45f6:	9e a3       	std	Y+38, r25	; 0x26
    45f8:	ee a1       	ldd	r30, Y+38	; 0x26
    45fa:	ee 23       	and	r30, r30
    45fc:	51 f7       	brne	.-44     	; 0x45d2 <App_voidTurnOnTimer0_EXTI2+0x68>

	TIMER0_voidEnableTIMER0();					//Enable timer0 interrupt to resume counting
    45fe:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <TIMER0_voidEnableTIMER0>

	LCD_u8GoToXY(LCD_u8_LINE_ONE , 10);			//Send "Resume" message
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	6a e0       	ldi	r22, 0x0A	; 10
    4606:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8PauseArr);
    460a:	ce 01       	movw	r24, r28
    460c:	0f 96       	adiw	r24, 0x0f	; 15
    460e:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	af e2       	ldi	r26, 0x2F	; 47
    4618:	b4 e4       	ldi	r27, 0x44	; 68
    461a:	8b 87       	std	Y+11, r24	; 0x0b
    461c:	9c 87       	std	Y+12, r25	; 0x0c
    461e:	ad 87       	std	Y+13, r26	; 0x0d
    4620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4622:	6b 85       	ldd	r22, Y+11	; 0x0b
    4624:	7c 85       	ldd	r23, Y+12	; 0x0c
    4626:	8d 85       	ldd	r24, Y+13	; 0x0d
    4628:	9e 85       	ldd	r25, Y+14	; 0x0e
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	4a ef       	ldi	r20, 0xFA	; 250
    4630:	54 e4       	ldi	r21, 0x44	; 68
    4632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	8f 83       	std	Y+7, r24	; 0x07
    463c:	98 87       	std	Y+8, r25	; 0x08
    463e:	a9 87       	std	Y+9, r26	; 0x09
    4640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4642:	6f 81       	ldd	r22, Y+7	; 0x07
    4644:	78 85       	ldd	r23, Y+8	; 0x08
    4646:	89 85       	ldd	r24, Y+9	; 0x09
    4648:	9a 85       	ldd	r25, Y+10	; 0x0a
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	40 e8       	ldi	r20, 0x80	; 128
    4650:	5f e3       	ldi	r21, 0x3F	; 63
    4652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4656:	88 23       	and	r24, r24
    4658:	2c f4       	brge	.+10     	; 0x4664 <App_voidTurnOnTimer0_EXTI2+0xfa>
		__ticks = 1;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9e 83       	std	Y+6, r25	; 0x06
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	3f c0       	rjmp	.+126    	; 0x46e2 <App_voidTurnOnTimer0_EXTI2+0x178>
	else if (__tmp > 65535)
    4664:	6f 81       	ldd	r22, Y+7	; 0x07
    4666:	78 85       	ldd	r23, Y+8	; 0x08
    4668:	89 85       	ldd	r24, Y+9	; 0x09
    466a:	9a 85       	ldd	r25, Y+10	; 0x0a
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	3f ef       	ldi	r19, 0xFF	; 255
    4670:	4f e7       	ldi	r20, 0x7F	; 127
    4672:	57 e4       	ldi	r21, 0x47	; 71
    4674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4678:	18 16       	cp	r1, r24
    467a:	4c f5       	brge	.+82     	; 0x46ce <App_voidTurnOnTimer0_EXTI2+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467c:	6b 85       	ldd	r22, Y+11	; 0x0b
    467e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4680:	8d 85       	ldd	r24, Y+13	; 0x0d
    4682:	9e 85       	ldd	r25, Y+14	; 0x0e
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e2       	ldi	r20, 0x20	; 32
    468a:	51 e4       	ldi	r21, 0x41	; 65
    468c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	bc 01       	movw	r22, r24
    4696:	cd 01       	movw	r24, r26
    4698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	8d 83       	std	Y+5, r24	; 0x05
    46a4:	0f c0       	rjmp	.+30     	; 0x46c4 <App_voidTurnOnTimer0_EXTI2+0x15a>
    46a6:	88 ec       	ldi	r24, 0xC8	; 200
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	9c 83       	std	Y+4, r25	; 0x04
    46ac:	8b 83       	std	Y+3, r24	; 0x03
    46ae:	8b 81       	ldd	r24, Y+3	; 0x03
    46b0:	9c 81       	ldd	r25, Y+4	; 0x04
    46b2:	01 97       	sbiw	r24, 0x01	; 1
    46b4:	f1 f7       	brne	.-4      	; 0x46b2 <App_voidTurnOnTimer0_EXTI2+0x148>
    46b6:	9c 83       	std	Y+4, r25	; 0x04
    46b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ba:	8d 81       	ldd	r24, Y+5	; 0x05
    46bc:	9e 81       	ldd	r25, Y+6	; 0x06
    46be:	01 97       	sbiw	r24, 0x01	; 1
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c4:	8d 81       	ldd	r24, Y+5	; 0x05
    46c6:	9e 81       	ldd	r25, Y+6	; 0x06
    46c8:	00 97       	sbiw	r24, 0x00	; 0
    46ca:	69 f7       	brne	.-38     	; 0x46a6 <App_voidTurnOnTimer0_EXTI2+0x13c>
    46cc:	14 c0       	rjmp	.+40     	; 0x46f6 <App_voidTurnOnTimer0_EXTI2+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	9e 83       	std	Y+6, r25	; 0x06
    46e0:	8d 83       	std	Y+5, r24	; 0x05
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	9e 81       	ldd	r25, Y+6	; 0x06
    46e6:	9a 83       	std	Y+2, r25	; 0x02
    46e8:	89 83       	std	Y+1, r24	; 0x01
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	f1 f7       	brne	.-4      	; 0x46ee <App_voidTurnOnTimer0_EXTI2+0x184>
    46f2:	9a 83       	std	Y+2, r25	; 0x02
    46f4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(700);								//Clear "Resume" message after 700msec
	LCD_u8GoToXY(LCD_u8_LINE_ONE , 10);
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	6a e0       	ldi	r22, 0x0A	; 10
    46fa:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
	LCD_voidSendString(Local_u8Clear);
    46fe:	ce 01       	movw	r24, r28
    4700:	46 96       	adiw	r24, 0x16	; 22
    4702:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>
}
    4706:	a6 96       	adiw	r28, 0x26	; 38
    4708:	0f b6       	in	r0, 0x3f	; 63
    470a:	f8 94       	cli
    470c:	de bf       	out	0x3e, r29	; 62
    470e:	0f be       	out	0x3f, r0	; 63
    4710:	cd bf       	out	0x3d, r28	; 61
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <App_voidTimerOVFunction>:


void App_voidTimerOVFunction(void)
/*TIMER0 ISR function, used with timer application to count time down*/
{
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	6e 97       	sbiw	r28, 0x1e	; 30
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
	//Counting down after 's' button is pressed

	if(App_u8TimerSeconds != 0)		//Seconds
    472c:	80 91 3e 01 	lds	r24, 0x013E
    4730:	88 23       	and	r24, r24
    4732:	89 f1       	breq	.+98     	; 0x4796 <App_voidTimerOVFunction+0x7e>
	{
		App_u8TimerSeconds--;		//Decrese seconds count
    4734:	80 91 3e 01 	lds	r24, 0x013E
    4738:	81 50       	subi	r24, 0x01	; 1
    473a:	80 93 3e 01 	sts	0x013E, r24

		//If condition to specify the location of the new seconds count
		if(App_u8TimerSeconds > 9)
    473e:	80 91 3e 01 	lds	r24, 0x013E
    4742:	8a 30       	cpi	r24, 0x0A	; 10
    4744:	78 f0       	brcs	.+30     	; 0x4764 <App_voidTimerOVFunction+0x4c>
		{
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 12);
    4746:	82 e0       	ldi	r24, 0x02	; 2
    4748:	6c e0       	ldi	r22, 0x0C	; 12
    474a:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(App_u8TimerSeconds);
    474e:	80 91 3e 01 	lds	r24, 0x013E
    4752:	88 2f       	mov	r24, r24
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	a0 e0       	ldi	r26, 0x00	; 0
    4758:	b0 e0       	ldi	r27, 0x00	; 0
    475a:	bc 01       	movw	r22, r24
    475c:	cd 01       	movw	r24, r26
    475e:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4762:	88 c0       	rjmp	.+272    	; 0x4874 <App_voidTimerOVFunction+0x15c>
		}

		else
		{
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 12);
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	6c e0       	ldi	r22, 0x0C	; 12
    4768:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(0);
    476c:	60 e0       	ldi	r22, 0x00	; 0
    476e:	70 e0       	ldi	r23, 0x00	; 0
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 13);
    4778:	82 e0       	ldi	r24, 0x02	; 2
    477a:	6d e0       	ldi	r22, 0x0D	; 13
    477c:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
			LCD_voidSendNum(App_u8TimerSeconds);
    4780:	80 91 3e 01 	lds	r24, 0x013E
    4784:	88 2f       	mov	r24, r24
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	a0 e0       	ldi	r26, 0x00	; 0
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	bc 01       	movw	r22, r24
    478e:	cd 01       	movw	r24, r26
    4790:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4794:	6f c0       	rjmp	.+222    	; 0x4874 <App_voidTimerOVFunction+0x15c>
		}
	}

	else
	{
		if(App_u8TimerMinutes != 0)		//Minutes
    4796:	80 91 3f 01 	lds	r24, 0x013F
    479a:	88 23       	and	r24, r24
    479c:	a1 f1       	breq	.+104    	; 0x4806 <App_voidTimerOVFunction+0xee>
		{
			App_u8TimerMinutes--;		//Decrese minutes count
    479e:	80 91 3f 01 	lds	r24, 0x013F
    47a2:	81 50       	subi	r24, 0x01	; 1
    47a4:	80 93 3f 01 	sts	0x013F, r24
			App_u8TimerSeconds = 60;	//Reset seconds count
    47a8:	8c e3       	ldi	r24, 0x3C	; 60
    47aa:	80 93 3e 01 	sts	0x013E, r24

			//If condition to specify the location of the new minutes count
			if(App_u8TimerMinutes > 9)
    47ae:	80 91 3f 01 	lds	r24, 0x013F
    47b2:	8a 30       	cpi	r24, 0x0A	; 10
    47b4:	78 f0       	brcs	.+30     	; 0x47d4 <App_voidTimerOVFunction+0xbc>
			{
				LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	67 e0       	ldi	r22, 0x07	; 7
    47ba:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
				LCD_voidSendNum(App_u8TimerMinutes);
    47be:	80 91 3f 01 	lds	r24, 0x013F
    47c2:	88 2f       	mov	r24, r24
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	a0 e0       	ldi	r26, 0x00	; 0
    47c8:	b0 e0       	ldi	r27, 0x00	; 0
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    47d2:	50 c0       	rjmp	.+160    	; 0x4874 <App_voidTimerOVFunction+0x15c>
			}

			else
			{
				LCD_u8GoToXY(LCD_u8_LINE_TWO , 7);
    47d4:	82 e0       	ldi	r24, 0x02	; 2
    47d6:	67 e0       	ldi	r22, 0x07	; 7
    47d8:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
				LCD_voidSendNum(0);
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
				LCD_u8GoToXY(LCD_u8_LINE_TWO , 8);
    47e8:	82 e0       	ldi	r24, 0x02	; 2
    47ea:	68 e0       	ldi	r22, 0x08	; 8
    47ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
				LCD_voidSendNum(App_u8TimerMinutes);
    47f0:	80 91 3f 01 	lds	r24, 0x013F
    47f4:	88 2f       	mov	r24, r24
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	a0 e0       	ldi	r26, 0x00	; 0
    47fa:	b0 e0       	ldi	r27, 0x00	; 0
    47fc:	bc 01       	movw	r22, r24
    47fe:	cd 01       	movw	r24, r26
    4800:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4804:	37 c0       	rjmp	.+110    	; 0x4874 <App_voidTimerOVFunction+0x15c>
			}
		}
		else
		{
			if(App_u8TimerHours != 0)		//Hours
    4806:	80 91 40 01 	lds	r24, 0x0140
    480a:	88 23       	and	r24, r24
    480c:	99 f1       	breq	.+102    	; 0x4874 <App_voidTimerOVFunction+0x15c>
			{
				App_u8TimerHours--;			//Decrese hours count
    480e:	80 91 40 01 	lds	r24, 0x0140
    4812:	81 50       	subi	r24, 0x01	; 1
    4814:	80 93 40 01 	sts	0x0140, r24
				App_u8TimerMinutes = 60;	//Reset minutes count
    4818:	8c e3       	ldi	r24, 0x3C	; 60
    481a:	80 93 3f 01 	sts	0x013F, r24

				//If condition to specify the location of the new hours count
				if(App_u8TimerHours > 9)
    481e:	80 91 40 01 	lds	r24, 0x0140
    4822:	8a 30       	cpi	r24, 0x0A	; 10
    4824:	78 f0       	brcs	.+30     	; 0x4844 <App_voidTimerOVFunction+0x12c>
				{
					LCD_u8GoToXY(LCD_u8_LINE_TWO , 2);
    4826:	82 e0       	ldi	r24, 0x02	; 2
    4828:	62 e0       	ldi	r22, 0x02	; 2
    482a:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
					LCD_voidSendNum(App_u8TimerHours);
    482e:	80 91 40 01 	lds	r24, 0x0140
    4832:	88 2f       	mov	r24, r24
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	a0 e0       	ldi	r26, 0x00	; 0
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	bc 01       	movw	r22, r24
    483c:	cd 01       	movw	r24, r26
    483e:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
    4842:	18 c0       	rjmp	.+48     	; 0x4874 <App_voidTimerOVFunction+0x15c>
				}

				else
				{
					LCD_u8GoToXY(LCD_u8_LINE_TWO , 2);
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	62 e0       	ldi	r22, 0x02	; 2
    4848:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
					LCD_voidSendNum(0);
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
					LCD_u8GoToXY(LCD_u8_LINE_TWO , 3);
    4858:	82 e0       	ldi	r24, 0x02	; 2
    485a:	63 e0       	ldi	r22, 0x03	; 3
    485c:	0e 94 9c 14 	call	0x2938	; 0x2938 <LCD_u8GoToXY>
					LCD_voidSendNum(App_u8TimerHours);
    4860:	80 91 40 01 	lds	r24, 0x0140
    4864:	88 2f       	mov	r24, r24
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	a0 e0       	ldi	r26, 0x00	; 0
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	bc 01       	movw	r22, r24
    486e:	cd 01       	movw	r24, r26
    4870:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_voidSendNum>
			}
		}
	}

	//Sending a Time's up alert at the end of timer's counting down process
	if((App_u8TimerHours == 0)&&(App_u8TimerMinutes == 0)&&(App_u8TimerSeconds == 0))
    4874:	80 91 40 01 	lds	r24, 0x0140
    4878:	88 23       	and	r24, r24
    487a:	09 f0       	breq	.+2      	; 0x487e <App_voidTimerOVFunction+0x166>
    487c:	ae c0       	rjmp	.+348    	; 0x49da <App_voidTimerOVFunction+0x2c2>
    487e:	80 91 3f 01 	lds	r24, 0x013F
    4882:	88 23       	and	r24, r24
    4884:	09 f0       	breq	.+2      	; 0x4888 <App_voidTimerOVFunction+0x170>
    4886:	a9 c0       	rjmp	.+338    	; 0x49da <App_voidTimerOVFunction+0x2c2>
    4888:	80 91 3e 01 	lds	r24, 0x013E
    488c:	88 23       	and	r24, r24
    488e:	09 f0       	breq	.+2      	; 0x4892 <App_voidTimerOVFunction+0x17a>
    4890:	a4 c0       	rjmp	.+328    	; 0x49da <App_voidTimerOVFunction+0x2c2>
	{
		u8 Local_u8TimerArr[] = "Time's Up!";			//An array of u8 to hold "Time's up" message
    4892:	ce 01       	movw	r24, r28
    4894:	0f 96       	adiw	r24, 0x0f	; 15
    4896:	9b 8f       	std	Y+27, r25	; 0x1b
    4898:	8a 8f       	std	Y+26, r24	; 0x1a
    489a:	ea eb       	ldi	r30, 0xBA	; 186
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	fd 8f       	std	Y+29, r31	; 0x1d
    48a0:	ec 8f       	std	Y+28, r30	; 0x1c
    48a2:	fb e0       	ldi	r31, 0x0B	; 11
    48a4:	fe 8f       	std	Y+30, r31	; 0x1e
    48a6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    48a8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    48aa:	00 80       	ld	r0, Z
    48ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	9d 8f       	std	Y+29, r25	; 0x1d
    48b4:	8c 8f       	std	Y+28, r24	; 0x1c
    48b6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    48b8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    48ba:	00 82       	st	Z, r0
    48bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	9b 8f       	std	Y+27, r25	; 0x1b
    48c4:	8a 8f       	std	Y+26, r24	; 0x1a
    48c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48c8:	91 50       	subi	r25, 0x01	; 1
    48ca:	9e 8f       	std	Y+30, r25	; 0x1e
    48cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    48ce:	ee 23       	and	r30, r30
    48d0:	51 f7       	brne	.-44     	; 0x48a6 <App_voidTimerOVFunction+0x18e>
		LCD_voidClearScreen();
    48d2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <LCD_voidClearScreen>
		LCD_voidSendString(Local_u8TimerArr);
    48d6:	ce 01       	movw	r24, r28
    48d8:	0f 96       	adiw	r24, 0x0f	; 15
    48da:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidSendString>

		//Set buzzer alarm for 1sec at the end of counting down operation
		DIO_u8SetPinValue(DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_HIGH);
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	60 e0       	ldi	r22, 0x00	; 0
    48e2:	41 e0       	ldi	r20, 0x01	; 1
    48e4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	aa e7       	ldi	r26, 0x7A	; 122
    48ee:	b4 e4       	ldi	r27, 0x44	; 68
    48f0:	8b 87       	std	Y+11, r24	; 0x0b
    48f2:	9c 87       	std	Y+12, r25	; 0x0c
    48f4:	ad 87       	std	Y+13, r26	; 0x0d
    48f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    48fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	4a ef       	ldi	r20, 0xFA	; 250
    4906:	54 e4       	ldi	r21, 0x44	; 68
    4908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	8f 83       	std	Y+7, r24	; 0x07
    4912:	98 87       	std	Y+8, r25	; 0x08
    4914:	a9 87       	std	Y+9, r26	; 0x09
    4916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4918:	6f 81       	ldd	r22, Y+7	; 0x07
    491a:	78 85       	ldd	r23, Y+8	; 0x08
    491c:	89 85       	ldd	r24, Y+9	; 0x09
    491e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e8       	ldi	r20, 0x80	; 128
    4926:	5f e3       	ldi	r21, 0x3F	; 63
    4928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    492c:	88 23       	and	r24, r24
    492e:	2c f4       	brge	.+10     	; 0x493a <App_voidTimerOVFunction+0x222>
		__ticks = 1;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	9e 83       	std	Y+6, r25	; 0x06
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	3f c0       	rjmp	.+126    	; 0x49b8 <App_voidTimerOVFunction+0x2a0>
	else if (__tmp > 65535)
    493a:	6f 81       	ldd	r22, Y+7	; 0x07
    493c:	78 85       	ldd	r23, Y+8	; 0x08
    493e:	89 85       	ldd	r24, Y+9	; 0x09
    4940:	9a 85       	ldd	r25, Y+10	; 0x0a
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	3f ef       	ldi	r19, 0xFF	; 255
    4946:	4f e7       	ldi	r20, 0x7F	; 127
    4948:	57 e4       	ldi	r21, 0x47	; 71
    494a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494e:	18 16       	cp	r1, r24
    4950:	4c f5       	brge	.+82     	; 0x49a4 <App_voidTimerOVFunction+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4952:	6b 85       	ldd	r22, Y+11	; 0x0b
    4954:	7c 85       	ldd	r23, Y+12	; 0x0c
    4956:	8d 85       	ldd	r24, Y+13	; 0x0d
    4958:	9e 85       	ldd	r25, Y+14	; 0x0e
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	40 e2       	ldi	r20, 0x20	; 32
    4960:	51 e4       	ldi	r21, 0x41	; 65
    4962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	bc 01       	movw	r22, r24
    496c:	cd 01       	movw	r24, r26
    496e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	9e 83       	std	Y+6, r25	; 0x06
    4978:	8d 83       	std	Y+5, r24	; 0x05
    497a:	0f c0       	rjmp	.+30     	; 0x499a <App_voidTimerOVFunction+0x282>
    497c:	88 ec       	ldi	r24, 0xC8	; 200
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	9c 83       	std	Y+4, r25	; 0x04
    4982:	8b 83       	std	Y+3, r24	; 0x03
    4984:	8b 81       	ldd	r24, Y+3	; 0x03
    4986:	9c 81       	ldd	r25, Y+4	; 0x04
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <App_voidTimerOVFunction+0x270>
    498c:	9c 83       	std	Y+4, r25	; 0x04
    498e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	8d 81       	ldd	r24, Y+5	; 0x05
    4992:	9e 81       	ldd	r25, Y+6	; 0x06
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    499a:	8d 81       	ldd	r24, Y+5	; 0x05
    499c:	9e 81       	ldd	r25, Y+6	; 0x06
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	69 f7       	brne	.-38     	; 0x497c <App_voidTimerOVFunction+0x264>
    49a2:	14 c0       	rjmp	.+40     	; 0x49cc <App_voidTimerOVFunction+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a4:	6f 81       	ldd	r22, Y+7	; 0x07
    49a6:	78 85       	ldd	r23, Y+8	; 0x08
    49a8:	89 85       	ldd	r24, Y+9	; 0x09
    49aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	9e 83       	std	Y+6, r25	; 0x06
    49b6:	8d 83       	std	Y+5, r24	; 0x05
    49b8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ba:	9e 81       	ldd	r25, Y+6	; 0x06
    49bc:	9a 83       	std	Y+2, r25	; 0x02
    49be:	89 83       	std	Y+1, r24	; 0x01
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <App_voidTimerOVFunction+0x2ac>
    49c8:	9a 83       	std	Y+2, r25	; 0x02
    49ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_u8SetPinValue(DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_LOW);
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_u8SetPinValue>
		TIMER2_voidStopTIMER2();
    49d6:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TIMER2_voidStopTIMER2>
	}
}
    49da:	6e 96       	adiw	r28, 0x1e	; 30
    49dc:	0f b6       	in	r0, 0x3f	; 63
    49de:	f8 94       	cli
    49e0:	de bf       	out	0x3e, r29	; 62
    49e2:	0f be       	out	0x3f, r0	; 63
    49e4:	cd bf       	out	0x3d, r28	; 61
    49e6:	cf 91       	pop	r28
    49e8:	df 91       	pop	r29
    49ea:	08 95       	ret

000049ec <__mulsi3>:
    49ec:	62 9f       	mul	r22, r18
    49ee:	d0 01       	movw	r26, r0
    49f0:	73 9f       	mul	r23, r19
    49f2:	f0 01       	movw	r30, r0
    49f4:	82 9f       	mul	r24, r18
    49f6:	e0 0d       	add	r30, r0
    49f8:	f1 1d       	adc	r31, r1
    49fa:	64 9f       	mul	r22, r20
    49fc:	e0 0d       	add	r30, r0
    49fe:	f1 1d       	adc	r31, r1
    4a00:	92 9f       	mul	r25, r18
    4a02:	f0 0d       	add	r31, r0
    4a04:	83 9f       	mul	r24, r19
    4a06:	f0 0d       	add	r31, r0
    4a08:	74 9f       	mul	r23, r20
    4a0a:	f0 0d       	add	r31, r0
    4a0c:	65 9f       	mul	r22, r21
    4a0e:	f0 0d       	add	r31, r0
    4a10:	99 27       	eor	r25, r25
    4a12:	72 9f       	mul	r23, r18
    4a14:	b0 0d       	add	r27, r0
    4a16:	e1 1d       	adc	r30, r1
    4a18:	f9 1f       	adc	r31, r25
    4a1a:	63 9f       	mul	r22, r19
    4a1c:	b0 0d       	add	r27, r0
    4a1e:	e1 1d       	adc	r30, r1
    4a20:	f9 1f       	adc	r31, r25
    4a22:	bd 01       	movw	r22, r26
    4a24:	cf 01       	movw	r24, r30
    4a26:	11 24       	eor	r1, r1
    4a28:	08 95       	ret

00004a2a <__udivmodhi4>:
    4a2a:	aa 1b       	sub	r26, r26
    4a2c:	bb 1b       	sub	r27, r27
    4a2e:	51 e1       	ldi	r21, 0x11	; 17
    4a30:	07 c0       	rjmp	.+14     	; 0x4a40 <__udivmodhi4_ep>

00004a32 <__udivmodhi4_loop>:
    4a32:	aa 1f       	adc	r26, r26
    4a34:	bb 1f       	adc	r27, r27
    4a36:	a6 17       	cp	r26, r22
    4a38:	b7 07       	cpc	r27, r23
    4a3a:	10 f0       	brcs	.+4      	; 0x4a40 <__udivmodhi4_ep>
    4a3c:	a6 1b       	sub	r26, r22
    4a3e:	b7 0b       	sbc	r27, r23

00004a40 <__udivmodhi4_ep>:
    4a40:	88 1f       	adc	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	5a 95       	dec	r21
    4a46:	a9 f7       	brne	.-22     	; 0x4a32 <__udivmodhi4_loop>
    4a48:	80 95       	com	r24
    4a4a:	90 95       	com	r25
    4a4c:	bc 01       	movw	r22, r24
    4a4e:	cd 01       	movw	r24, r26
    4a50:	08 95       	ret

00004a52 <__udivmodsi4>:
    4a52:	a1 e2       	ldi	r26, 0x21	; 33
    4a54:	1a 2e       	mov	r1, r26
    4a56:	aa 1b       	sub	r26, r26
    4a58:	bb 1b       	sub	r27, r27
    4a5a:	fd 01       	movw	r30, r26
    4a5c:	0d c0       	rjmp	.+26     	; 0x4a78 <__udivmodsi4_ep>

00004a5e <__udivmodsi4_loop>:
    4a5e:	aa 1f       	adc	r26, r26
    4a60:	bb 1f       	adc	r27, r27
    4a62:	ee 1f       	adc	r30, r30
    4a64:	ff 1f       	adc	r31, r31
    4a66:	a2 17       	cp	r26, r18
    4a68:	b3 07       	cpc	r27, r19
    4a6a:	e4 07       	cpc	r30, r20
    4a6c:	f5 07       	cpc	r31, r21
    4a6e:	20 f0       	brcs	.+8      	; 0x4a78 <__udivmodsi4_ep>
    4a70:	a2 1b       	sub	r26, r18
    4a72:	b3 0b       	sbc	r27, r19
    4a74:	e4 0b       	sbc	r30, r20
    4a76:	f5 0b       	sbc	r31, r21

00004a78 <__udivmodsi4_ep>:
    4a78:	66 1f       	adc	r22, r22
    4a7a:	77 1f       	adc	r23, r23
    4a7c:	88 1f       	adc	r24, r24
    4a7e:	99 1f       	adc	r25, r25
    4a80:	1a 94       	dec	r1
    4a82:	69 f7       	brne	.-38     	; 0x4a5e <__udivmodsi4_loop>
    4a84:	60 95       	com	r22
    4a86:	70 95       	com	r23
    4a88:	80 95       	com	r24
    4a8a:	90 95       	com	r25
    4a8c:	9b 01       	movw	r18, r22
    4a8e:	ac 01       	movw	r20, r24
    4a90:	bd 01       	movw	r22, r26
    4a92:	cf 01       	movw	r24, r30
    4a94:	08 95       	ret

00004a96 <__prologue_saves__>:
    4a96:	2f 92       	push	r2
    4a98:	3f 92       	push	r3
    4a9a:	4f 92       	push	r4
    4a9c:	5f 92       	push	r5
    4a9e:	6f 92       	push	r6
    4aa0:	7f 92       	push	r7
    4aa2:	8f 92       	push	r8
    4aa4:	9f 92       	push	r9
    4aa6:	af 92       	push	r10
    4aa8:	bf 92       	push	r11
    4aaa:	cf 92       	push	r12
    4aac:	df 92       	push	r13
    4aae:	ef 92       	push	r14
    4ab0:	ff 92       	push	r15
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	cd b7       	in	r28, 0x3d	; 61
    4abc:	de b7       	in	r29, 0x3e	; 62
    4abe:	ca 1b       	sub	r28, r26
    4ac0:	db 0b       	sbc	r29, r27
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	09 94       	ijmp

00004ace <__epilogue_restores__>:
    4ace:	2a 88       	ldd	r2, Y+18	; 0x12
    4ad0:	39 88       	ldd	r3, Y+17	; 0x11
    4ad2:	48 88       	ldd	r4, Y+16	; 0x10
    4ad4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ad6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ad8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ada:	8c 84       	ldd	r8, Y+12	; 0x0c
    4adc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ade:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ae0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ae2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ae4:	df 80       	ldd	r13, Y+7	; 0x07
    4ae6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ae8:	fd 80       	ldd	r15, Y+5	; 0x05
    4aea:	0c 81       	ldd	r16, Y+4	; 0x04
    4aec:	1b 81       	ldd	r17, Y+3	; 0x03
    4aee:	aa 81       	ldd	r26, Y+2	; 0x02
    4af0:	b9 81       	ldd	r27, Y+1	; 0x01
    4af2:	ce 0f       	add	r28, r30
    4af4:	d1 1d       	adc	r29, r1
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	ed 01       	movw	r28, r26
    4b02:	08 95       	ret

00004b04 <_exit>:
    4b04:	f8 94       	cli

00004b06 <__stop_program>:
    4b06:	ff cf       	rjmp	.-2      	; 0x4b06 <__stop_program>
